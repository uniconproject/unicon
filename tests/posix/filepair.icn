$include "posix.icn"

global count

procedure main()

   L1 := filepair() | stop("Couldn't get filepair: ", sys_errstr(&errno))

   count := 20

   pid := fork() | stop("Couldn't fork")
   if pid = 0 then {
      close(L1[1])
      child(L1[2])
   } else {
      close(L1[2])
      parent(L1[1])
   }
end


#
# The parent gets the lines and checks them for
# consistency.
#
procedure parent(in)
   # turn non-blocking mode on.
   fcntl(in, "F", "d")

   i := 0
   str := ""
   tries := 0
   while i < count do {
#       write("parent ", i)
      tries +:= 1
      if s := read(in) then {
	 j := (s ? integer(tab(many(&digits)))) | -1
	 if j ~= i then {
	    write("failed - expected ", i, " got ", j, " from ", image(s))
	    break
	 }
         i +:= 1
      }
      else {
	 delay(1)
         if tries > 10 then stop("too many tries for i ", i)
         }
   }
   write("parent ending")
end

#
# The child just writes lines of random length starting
# with an integer: 0 xxx, 1 xxx, 2 xxxx etc.
#
procedure child(out)
   i := 0
   every 1 to count do {
#      write("child ", i)
      s := i || " " || repl("x", ?200)

      write(out, s) | stop("child failed to write")

      i +:= 1
   }

end
