############################################################################
#
#	File:     run-shootout.icn
#
#	Subject:  Run Unicon Benchmarks with full, benchmark shootout
#                 game n 
#
#	Author:   Shea Newton
#
#	Date:     January 3, 2014
#
############################################################################
#
#   This file is in the public domain.
#
############################################################################
#
#   Compile and run without arguments to run entire suite or
#   specify as runtime argumnets which benchmarks to run.
#
############################################################################

link "auxiliary" 

$ifdef _UNIX
$define NUL "/dev/null"
$else
   $define NUL "\\nul"
$endif

global output

procedure main(argv)
   local rL, tL, rT, concurrent, tests := [], rTable := table()

   concurrent := verify_concurrent()
   
   output := open(NUL, "w") | stop("Cannot open " || NUL || " for writing")

   if *argv < 1 then {
      if /concurrent then
         write_error(3)
      put(tests, "all")
      }
   else every put(tests, !argv) 
   while test := get(tests) do {
      case test of {
         "all" : {

            write_header(1)

            rT := []
            writes(left("binary-trees 20",31))
            tL:= gettimes(run_binarytrees_sequential,20)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            put(rT, list_to_num(rL)) 
#            insert(rTable, "binary-trees", tabulate_ratios(rT))

            if \concurrent then {
#               writes(left("binary-trees 17 ",31))
               writestime(rL[1], rL[2], rL[3])
               tL := gettimes(run_binarytrees_concurrent,20)
               rL := calctimes(tL[1], tL[2], tL[3], tL[4])
               put(rT, list_to_num(rL))
#               insert(rTable, "binary-trees", tabulate_ratios(rT))
               writestime(rL[1], rL[2], rL[3],1)
               writes(right(tabulate_ratios(rT) || "x\n",16))
               }
            
            if \concurrent then {
	       writes(left("chameneos-redux 6000000",43))
               writes(left("N/A", 3))
               tL := gettimes(run_chameneos, 6000000)
               rL := calctimes(tL[1], tL[2], tL[3], tL[4])
               writetime(rL[1], rL[2], rL[3],1)
               }

            writes(left("fannkuch 12",31))
            tL := gettimes(run_fannkuch, 12)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            if \concurrent then {
               writestime(rL[1], rL[2], rL[3])
               writes(right("N/A\n", 16))
            } else writetime(rL[1], rL[2], rL[3])

            writes(left("fasta 25000000",31))
            tL := gettimes(run_fasta, 25000000)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            if \concurrent then {
               writestime(rL[1], rL[2], rL[3])
               writes(right("N/A\n", 16))
            } else writetime(rL[1], rL[2], rL[3])

            writes(left("k-nucleotide 25-mil.dat",31))
            tL := gettimes(run_knucleotide, "25-mil.dat")
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            if \concurrent then {
               writestime(rL[1], rL[2], rL[3])
               writes(right("N/A\n", 16))
            } else writetime(rL[1], rL[2], rL[3])

            rT := []
            writes(left("mandelbrot 16000",31))
            tL := gettimes(run_mandelbrot_sequential,16000)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            put(rT, list_to_num(rL)) 

            if \concurrent then {
               writestime(rL[1], rL[2], rL[3])
               tL := gettimes(run_mandelbrot_concurrent,16000)
               rL := calctimes(tL[1], tL[2], tL[3], tL[4])
               put(rT, list_to_num(rL))
#               insert(rTable, "mandelbrot", tabulate_ratios(rT))
               writestime(rL[1], rL[2], rL[3],1)
               writes(right(tabulate_ratios(rT) || "x\n", 16))
               }
            else writetime(rL[1], rL[2], rL[3])
            
            writes(left("meteor-contest 2098",31))
            tL := gettimes(run_meteorcontest, 2098)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            if \concurrent then {
               writestime(rL[1], rL[2], rL[3])
               writes(right("N/A\n", 16))
            } else writetime(rL[1], rL[2], rL[3])

            writes(left("n-body 50000000",31))
            tL := gettimes(run_nbody, 50000000)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            if \concurrent then {
               writestime(rL[1], rL[2], rL[3])
               writes(right("N/A\n", 16))
            } else writetime(rL[1], rL[2], rL[3])

            writes(left("pidigits 10000",31))
            tL := gettimes(run_pidigits, 10000)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            if \concurrent then {
               writestime(rL[1], rL[2], rL[3])
               writes(right("N/A\n", 16))
            } else writetime(rL[1], rL[2], rL[3])

            rT := []
            writes(left("regex-dna 5-mil.dat",31))
            tL := gettimes(run_regexdna_sequential, "5-mil.dat")
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            put(rT, list_to_num(rL))

            if \concurrent then {
               writestime(rL[1], rL[2], rL[3])
               tL := gettimes(run_regexdna_concurrent, "5-mil.dat")
               rL := calctimes(tL[1], tL[2], tL[3], tL[4])
               put(rT, list_to_num(rL))
#               insert(rTable, "regex-dna", tabulate_ratios(rT))
               writestime(rL[1], rL[2], rL[3],1)
               writes(right(tabulate_ratios(rT) || "x\n", 16))
               }
            else writetime(rL[1], rL[2], rL[3])
            
            writes(left("reverse-complement 25-mil.dat",31))
            tL := gettimes(run_reversecomplement, "25-mil.dat")
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            if \concurrent then {
               writestime(rL[1], rL[2], rL[3])
               writes(right("N/A\n", 16))
            } else writetime(rL[1], rL[2], rL[3])

            writes(left("spectral-norm 5500",31))
            tL := gettimes(run_spectralnorm, 5500)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            if \concurrent then {
               writestime(rL[1], rL[2], rL[3])
               writes(right("N/A\n", 16))
            } else writetime(rL[1], rL[2], rL[3])

            if \concurrent then {
	       writes(left("thread-ring 50000000",43))
               writes(left("N/A", 3))
               tL := gettimes(run_threadring, 50000000)
               rL := calctimes(tL[1], tL[2], tL[3], tL[4])
               writetime(rL[1], rL[2], rL[3],1)
               }
            if \concurrent then write_ratios(rTable)            
            }
         "concord" : {
            write("\n")
            write("concord N/A")
            }
         "deal" : {
            write("\n")
            write("deal N/A")
            }
         "ipxref" : {
            write("\n")
            write("ipxref N/A")
            }
         "queens" : {
            write("\n")
            write("queens N/A")
            }
         "rsg" : {
            write("\n")
            write("rsg N/A")
            }
         "binary-trees" : {
            write_header()
            writes(left("binary-trees 20",31))
            if \concurrent then tL := gettimes(run_binarytrees_concurrent,20)
            else tL := gettimes(run_binarytrees_sequential,20)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3],1)
            }
         "chameneos-redux" : {
            write_header()
            writes(left("chameneos-redux 6000000",31))
            if \concurrent then {
               tL := gettimes(run_chameneos, 6000000)
               rL := calctimes(tL[1], tL[2], tL[3], tL[4])
               writetime(rL[1], rL[2], rL[3],1)
               } else write_error(2)
            }
         "fannkuch" : {
            write_header()
            writes(left("fannkuch 12",31))
            tL := gettimes(run_fannkuch, 12)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            }
         "fasta" : {
            write_header()
            writes(left("fasta 25000000",31))
            tL := gettimes(run_fasta, 25000000)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            }
         "k-nucleotide": {
            write_header()
            writes(left("k-nucleotide 25-mil.dat",31))
            tL := gettimes(run_knucleotide, "25-mil.dat")
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            }
         "mandelbrot" : {
            write_header()
            writes(left("mandelbrot 16000",31))
            if \concurrent then tL := gettimes(run_mandelbrot_concurrent,16000)
            else tL := gettimes(run_mandelbrot_sequential,16000)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3],1)
            }
         "meteor-contest" : {
            write_header()
            writes(left("meteor-contest 2098",31)) 
            tL := gettimes(run_meteorcontest, 2098)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            }
         "n-body" : {
            write_header()
            writes(left("n-body 50000000",31))
            tL := gettimes(run_nbody, 50000000)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            }
         "pidigits" : {
            write_header()
            writes(left("pidigits 10000",31))
            tL := gettimes(run_pidigits, 10000)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            }
         "regex-dna" : {
            write_header()
            writes(left("regex-dna 5-mil.dat",31))
            if \concurrent then tL := gettimes(run_regexdna_concurrent, "5-mil.dat")
            else tL := gettimes(run_regexdna_sequential, "5-mil.dat")
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3],1)
            }
         "reverse-complement" : {
            write_header()
            writes(left("reverse-complement 25-mil.dat",31))
            tL := gettimes(run_reversecomplement, "25-mil.dat")
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            }
         "spectral-norm" : {
            write_header()
            writes(left("spectral-norm 5500",31))
            tL := gettimes(run_spectralnorm, 5500)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            }
         "thread-ring" : {
            write_header()
            writes(left("thread-ring 50000000",31))
            if \concurrent then {
               tL := gettimes(run_threadring, 50000000)
               rL := calctimes(tL[1], tL[2], tL[3], tL[4])
               writetime(rL[1], rL[2], rL[3],1)
               } else write_error(2)
            }
         default : write("\ncannot run benchmark " || test || "\n")
         }
      }
end
