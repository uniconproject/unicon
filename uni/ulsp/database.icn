
# -------------------------------------------------------------------------
# ---------------------- Database Class -----------------------------------
# -------------------------------------------------------------------------
#
# Description:
#
#
#

package ulsp

import UniDoc

class LSPDB(
   built_in_functions,
   action_words,
   declarative_expressions,
   syntax_reserved_words,
   keywords,
   preprocessors,
   packages,
   files,
   imports,
   procedures,
   comments,
   params,
   types,
   defaults,
   classes,
   methods,
   attributes,
   sources
   )

   method getInstance()
      static instance
      initial
      {
         instance := LSPDB()
         instance.build()
      }
      return instance
   end

   method build()
      built_in_functions := []
      packages := []
      files := []
      imports := []
      procedures := []
      comments := []
      params := []
      types := []
      defaults := []
      classes := []
      methods := []
      attributes := []
      sources := []

      if getenv("FPATH") then
      {
         build_bnf()
         build_package_db()
      }
      else
      {
         write(&errout, "Unable to find Unicon envirionment.")
      }

      action_words := ["break", "case", "create", "critical", "every", "fail", "if",
                       "initial", "initially", "next", "not", "repeat", "return",
                       "suspend", "thread", "to", "until", "while"]

      declarative_expressions := ["abstract", "class", "global", "import", "invocable",
                                  "link", "local", "method", "package", "procedure",
                                  "record", "static"]
      syntax_reserved_words := ["all", "by", "default", "do", "end", "else", "of", "then"]

      keywords := ["&allocated", "&ascii", "&clock", "&col", "&collections", "&column",
                   "&control", "&cset", "&current", "&date", "&dateline", "&digits", "&dump",
                   "&e", "&errno", "&error", "&errornumber", "&errortext", "&errorvalue",
                   "&errout", "&eventcode", "&eventsource", "&eventvalue", "&fail",
                   "&features", "&file", "&host", "&input", "&interval", "&lcase", "&ldrag",
                   "&letters", "&level", "&line", "&lpress", "&lrelease", "&main", "&mdrag",
                   "&meta", "&mpress", "&mreleasee", "&now", "&null", "&output", "&phi", "&pi",
                   "&pick", "&pos", "&progname", "&random", "&rdrag", "&regions", "&resize",
                   "&row", "&rpress", "&rrelease", "&shift", "&source", "&storage", "&subject",
                   "&time", "&trace", "&ucase", "&version", "&window", "&x", "&y"]

      preprocessors := ["$define", "$else", "$endif", "$error", "$ifdef", "$ifndef",
                                  "$include", "$line", "$undef", "#line"]
   end

   method build_bnf()
      local idoc := UniAll(), dirPath := getenv("FPATH"), source_file, _procedure,
         param_in_procedure, dbProcedure, dbComment, dbParam

      dirPath ?
      {
         tab(upto("/"))
         dirPath := tab(-3)
         dirPath ||:= "uni/ulsp/unicon_built_in_functions.icn"
      }

      idoc.setSourcePath(dirPath)
      idoc.processFile(dirPath)
      source_file := idoc.getAllFiles()[1]

      every _procedure := source_file.getProcedures().get() do
      {
         dbProcedure := DBObject("procedure", _procedure.getName())
         put(built_in_functions, dbProcedure)

         dbComment := createRelationship(dbProcedure, DBObject("comment", makeComment(_procedure)))
         put(comments, dbComment)

         every param_in_procedure := _procedure.getParams().get() do
         {
            dbParam := createRelationship(dbProcedure, DBObject("param", param_in_procedure.getName()))
            put(params, dbParam)
            put(types, createRelationship(dbParam, DBObject("type", \param_in_procedure.getTypeValue())))
            put(defaults, createRelationship(dbParam, DBObject("default", \param_in_procedure.getDefValue())))
         }
      }
   end

   method build_package_db()
      local dirPath := getenv("FPATH"), paths := [], path

      dirPath ?
      {
         tab(upto("/"))
         dirPath := tab(-3)
      }

      put(paths, dirPath || "ipl/procs")

      dirPath ||:= "uni/"
      put(paths, dirPath || "3d")
      put(paths, dirPath || "gui")
      put(paths, dirPath || "xml")
      put(paths, dirPath || "lib")
      put(paths, dirPath || "unidoc")
      #put(paths, dirPath || "parser")

      every path := !paths do build_by_path(path)
   end

   method build_by_path(path)
      local idoc := UniAll(), pack, file_in_pack, import_in_file, procedure_in_file, param_in_procedure,
         class_in_file, method_in_class, param_in_method, class_param, constructor_param, class_comment,
         dbPackage, dbFile, dbProcedure, dbClass, dbMethod, dbAttribute, dbParam

      idoc.setSourcePath(path)
      idoc.setTargetDir(path)
      idoc.processFile(path)

      every pack := !idoc.packages do
      {
         dbPackage := DBObject("package", pack.getName())
         put(packages, dbPackage)

         every file_in_pack := pack.getFiles().get() do
         {
            file_in_pack.getName() ?
            {
               dbFile := createRelationship(dbPackage, DBObject("file", tab(upto("."))))
               put(files, dbFile)
               put(sources, createRelationship(dbFile, DBObject("source", idoc.getTargetDir() || file_in_pack.getName())))
            }

            every import_in_file := file_in_pack.getImports().get() do
            {
               put(imports, createRelationship(dbFile, DBObject("import", import_in_file.getName())))
            }

            every procedure_in_file := file_in_pack.getProcedures().get() do
            {
               dbProcedure := createRelationship(dbFile, DBObject("procedure", procedure_in_file.getName()))
               put(procedures, dbProcedure)
               put(comments, createRelationship(dbProcedure, DBObject("comment", makeComment(procedure_in_file))))

               every param_in_procedure := procedure_in_file.getParams().get() do
               {
                  dbParam := createRelationship(dbProcedure, DBObject("param", param_in_procedure.getName()))
                  put(params, dbParam)
                  put(types, createRelationship(dbParam, DBObject("type", \param_in_procedure.getTypeValue())))
                  put(defaults, createRelationship(dbParam, DBObject("default", \param_in_procedure.getDefValue())))
               }
            }

            every class_in_file := file_in_pack.getClasses().get() do
            {
               dbClass := createRelationship(dbFile, DBObject("class", class_in_file.getName()))
               put(classes, dbClass)
               put(comments, createRelationship(dbClass, DBObject("comment", makeComment(class_in_file))))

               every method_in_class := class_in_file.getMethods().get() do
               {
                  dbMethod := createRelationship(dbClass, DBObject("method", method_in_class.getName()))
                  put(methods, dbMethod)
                  put(comments, createRelationship(dbMethod, DBObject("comment", makeComment(method_in_class))))

                  every param_in_method := method_in_class.getParams().get() do
                  {
                     dbParam := createRelationship(dbMethod, DBObject("param", param_in_method.getName()))
                     put(params, dbParam)
                     put(types, createRelationship(dbParam, DBObject("type", \param_in_method.getTypeValue())))
                     put(defaults, createRelationship(dbParam, DBObject("default", \param_in_method.getDefValue())))
                  }
               }

               every class_param := class_in_file.getParams().get() do
               {
                  dbAttribute := createRelationship(dbClass, DBObject("attribute", class_param.getName()))
                  put(attributes, dbAttribute)
                  put(types, createRelationship(dbAttribute, DBObject("type", \class_param.getTypeValue())))
                  put(defaults, createRelationship(dbAttribute, DBObject("default", \class_param.getDefValue())))
               }

               every constructor_param := class_in_file.getConstructor().getParams().get() do
               {
                  dbParam := createRelationship(dbClass, DBObject("param", constructor_param.getName()))
                  put(params, dbParam)
                  put(types, createRelationship(dbParam, DBObject("type", \constructor_param.getTypeValue())))
                  put(defaults, createRelationship(dbParam, DBObject("default", \constructor_param.getDefValue())))
               }
            }
         }
      }
   end
end

class DBObject(
   type,
   desc,
   parent,
   children
   )

   method getParent()
      return parent
   end

   method setParent(parent)
      self.parent := parent
   end

   method addChild(child)
      (\children) | (children := [])
      put(children, \child)
   end

   method getChildren()
      return children
   end

   method getChildrenByType(type)
      local results := []

      (\children) | (return results)

      every child := !children do
      {
         if child.type == type then
         {
            put(results, child)
         }
      }

      return results
   end

   initially(type, desc)
      self.type := type
      self.desc := desc
end

procedure createRelationship(parent, child)
   (\parent) | fail
   (\child) | fail

   parent.addChild(child)
   child.setParent(parent)

   return child
end

# Creates a working comments
procedure makeComment(_function)
   local paramComment, returnComment, failsComment, genComment, normalComment, firstTen, currentType, insideComment,
   tabCharacter, _comment, paramCounter, returnCounter, failsCounter, genCounter, _line, paramPos, returnsPos,
   failsPos, genPos, firstKey, fullComment, paramList, _param, paramName, sourceComment, srcFile
   paramComment:= ""
   returnComment := ""
   failsComment := ""
   genComment := ""
   sourceComment := ""
   normalComment := ""
   firstTen := ""
   currentType := 0
   insideComment := 0
   tabCharacter := "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"
   paramList := []

   every _param := _function.getParams().get() do {
      paramName := _param.getName()
      put(paramList, paramName)
   }

   every _comment := _function.getComments().get() do {
      paramCounter := 1
      returnCounter := 0
      failsCounter := 0
      genCounter := 0
      every _line := _comment.get() do {
         _line := replace(_line, "\\n", "\\\\n")

         if((find("<[", _line))) then
            insideComment := 1
         if((find("]>", _line))) then
            insideComment := 0

         if((find("<[", _line)) | (find("]>", _line))) then {

            if(find("param", _line)) then
               paramPos := find("param", _line)
            else
               paramPos := 9999

            if (find("returns", _line)) then
               returnsPos := find("returns", _line)
            else
               returnsPos := 9999

            if (find("fails", _line)) then
               failsPos := find("fails", _line)
            else
               failsPos := 9999

            if (find("generates", _line)) then
               genPos := find("generates", _line)
            else
               genPos := 9999

            firstKey := min(paramPos, returnsPos, failsPos, genPos)

            if ((find("param", _line[firstKey:firstKey+5]) & (find("<[", _line)))) then {
               if \paramList then
                  _line := _line[1:firstKey+6] || "*" || _line[firstKey+6:firstKey+6+*paramList[paramCounter]] || "*:" || _line[firstKey+6+*paramList[paramCounter]:*_line+1]

               if(paramCounter == 1) then
                  _line := replace(_line, "param", "\n **Parameters:**  \n \\\\>" || tabCharacter)
               else
                  _line := replace(_line, "param", "\n \\\\>" || tabCharacter)


               paramCounter +:= 1
               paramComment ||:= _line
               currentType := 1
            }
            else if ((find("returns", _line[firstKey:firstKey+7]) & (find("<[", _line)))) then {
               if(returnCounter == 0) then {
                  _line := replace(_line, "returns", "\n **Returns:**  \n " || tabCharacter)
                  returnCounter +:= 1
               }
               else
                  _line := replace(_line, "returns", "\n " || tabCharacter)

               returnComment ||:= _line
               currentType := 2
            }
            else if ((find("fails", _line[firstKey:firstKey+5]) & (find("<[", _line)))) then {
               if(failsCounter == 0) then {
                  _line := replace(_line, "fails", "\n **Fails:**  \n " || tabCharacter)
                  failsCounter +:= 1
               }
               else
                  _line := replace(_line, "fails", "\n " || tabCharacter)

               failsComment ||:= _line
               currentType := 3
            }
            else if ((find("generates", _line[firstKey:firstKey+9]) & (find("<[", _line)))) then {
               if(genCounter == 0) then {
                  _line := replace(_line, "generates", "\n **Generates:**  \n " || tabCharacter)
                  genCounter +:= 1
               }
               else
                  _line := replace(_line, "generates", "\n " || tabCharacter)

               genComment ||:= _line
               currentType := 4
            }
            else
               if currentType = 1 then paramComment ||:= _line
               else if currentType = 2 then returnComment ||:= _line
               else if currentType = 3 then failsComment ||:= _line
               else if currentType = 4 then genComment ||:= _line
         }
         else if (insideComment = 1) then {
            if currentType = 1 then paramComment ||:= _line
            else if currentType = 2 then returnComment ||:= _line
            else if currentType = 3 then failsComment ||:= _line
            else if currentType = 4 then genComment ||:= _line
         }
         else if ReMatch("^[\ ]*Source: ", _line) then {
            sourceComment := replace(_line, "Source:", "\n **Source:**")
         }
         else
            normalComment ||:= _line
      }
   }

   if srcFile := _function.getSrcFile() & sourceComment == "" then
      sourceComment := "\n **Source:** " || srcFile

   fullComment := normalComment || "\n \n --- \n \n" || " " || returnComment || " " || paramComment || " " || failsComment || " " || genComment || " " || sourceComment
   fullComment := replacem(fullComment, "<p>", "", "</p>", "")
   fullComment := replacem(fullComment, "<i>", "_", "</i>", "_")
   fullComment := replacem(fullComment, "<b>", "**", "</b>", "**")
   fullComment := replacem(fullComment, "<tt>", "`", "</tt>", "`")
   fullComment := replace(fullComment, "\"", "\\\"")
   fullComment := replace(fullComment, "<[", "")
   fullComment := replace(fullComment, "]>", "")

   return fullComment
end
