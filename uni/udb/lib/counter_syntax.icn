

$include "evdefs.icn"

$ifndef StandAlone
class EventCounterSyntax : Listener(
$else
class EventCounterSyntax(
$endif
   eventMask, # an event mask
   count # count the number of events
   )

method handle_E_Syntax()
   count +:= 1
end

method handle_E_Exit()
   write("---------------------------------------")
   write("Total # of E_Syntax events is : ", count)
   write("---------------------------------------")
end

initially(name, state)

$ifndef StandAlone
   self.Listener.initially(name, state)
$endif

   count := 0
   eventMask  := cset (E_Syntax || E_Exit)
end


#
# StandAlone is defined when this tool is used as a stand-alone monitor.
#  Otherwise, this tool can be statically linked into the main utop/udb
#  source code 
#
$ifdef StandAlone

link evinit

#
# This main procedure is only used in the standalone mode
# or udb's external co-expression mode
# 
procedure main(tp)
    local mask, obj

    EvInit(tp) | stop(" can not initilalize target program" || tp[1])

    obj  := EventCounterSyntax()
    mask := obj.eventMask

    while EvGet(mask) do{
	if &eventcode == E_Syntax then
	    obj.handle_E_Syntax()
	else 
	    obj.handle_E_Exit()
    }
    return 0
    handle_Events()
end

#
# This handle_Events procedure is only used udb's external 
# inter-program procedure calls
#
procedure handle_Events(code, value)
   static obj
   
   initial{
      #EvInit(arg) | stop(" **** can not initialize Monitor !!!")   
      obj := EventCounterSyntax()
      return obj.eventMask
      } 

   &eventcode  := code
   &eventvalue := value

   if &eventcode == E_Syntax then
      obj.handle_E_Syntax()
   else 
      obj.handle_E_Exit()
   return
end

$endif
