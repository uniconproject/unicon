#
# $Id: canvasslider.icn,v 1.2 2006-07-09 23:43:13 rparlett Exp $
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import gui


############################################################################
#
# Class for representing a Slider on the canvas.
#
class CanvasSlider : CanvasComponent : Slider()
   #
   # Generate code into Code object c.
   #
   method gen_code(c)
      local s
      self.CanvasComponent.gen_code(c)
      c.line(name || ".set_range(" || self.lo || ", " || self.hi || ")")
      c.line(name || ".set_value(" || self.value || ")")
      c.line(name || ".set_increment_size(" || self.increment_size || ")")
      c.line(name || ".set_ticks(" || \self.ticks || ")")
      c.line(name || ".set_labels(" || \self.labels || ")")
      c.line(name || ".set_snaps(" || \self.snaps || ")")
      if \self.is_horizontal_flag then
         c.line(name || ".set_is_horizontal()")
   end

   #
   # Copy fields from self to c.
   #
   method cp_fields(c)
      c.set_range(self.lo, self.hi)
      c.set_value(self.value)
      c.set_increment_size(self.increment_size)
      c.set_ticks(self.ticks)
      c.set_labels(self.labels)
      c.set_snaps(self.snaps)
      c.is_horizontal_flag := self.is_horizontal_flag
   end

   #
   # Copy object.
   #
   method cp()
      local c
      c := CanvasSlider()
      self.CanvasComponent.cp(c)
      self.cp_fields(c)
      return c
   end

   #
   # Duplicate object.
   #
   method dup(pc)
      local c
      c := CanvasSlider()
      self.CanvasComponent.dup(c, pc)
      self.cp_fields(c)
      return c
   end

   #
   # Return the I/O template.
   #
   method get_template()
      return self.CanvasComponent.get_template() ||| 
         [
          ["Hi", "hi"],
          ["Lo", "lo"],
          ["Value", "value"],
          ["Ticks", "ticks"],
          ["Labels", "labels"],
          ["Increment Size", "increment_size"],
          ["Snaps", "snaps"],
          ["Is Horizontal Flag", "is_horizontal_flag"]
         ]
   end

   #
   # Open the configuration dialog box.
   #
   method dialog()
      return CanvasSliderDialog(self)
   end

   initially
      self.CanvasComponent.initially()
      self.Slider.initially()
      self.class_name := "Slider"
      self.import_name := "gui"
      self.name := "slider"
end
