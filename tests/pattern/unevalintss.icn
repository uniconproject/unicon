## unevalcharss.icn
## Paden Rumsey
## July 8, 2016

## Unit Tests for pattern functions that take an integer as an argument
## This tests all the possible (correct) types of input that a
## function could take

procedure main()
    c := integ()
    x := 1
    count := 1
    while s := read() do {

	if count = 2 then {
	    c.var := 5
	    x := 5
	    }
	else if count = 3 then {
	    c.var := 10
	    x := 10
	    }
	
	p := Len(x)
	s ?? p -> out
	write(out)
	p := Len(`c.int_return(x)`)
	s ?? p -> out
	write(out)
	p := Len(`fcall(x)`)
	s ?? p -> out
	write(out)
	p := Len(`c.var`)
	s ?? p -> out
	write(out)
	p := Len(`x`)
	s ?? p -> out
	write(out)
	
	p := Pos(x)
	if s ?? p -> out then write("Pos Matched")
	else write("Pos Failed")
	p := Pos(`fcall(x)`)
	if s ?? p -> out then write("Pos Matched")
	else write("Pos Failed")
	p := Pos(`c.int_return(x)`)
	if s ?? p -> out then write("Pos Matched")
	else write("Pos Failed")
	p := Pos(`c.var`)
	if s ?? p -> out then write("Pos Matched")
	else write("Pos Failed")
	p := Pos(`x`)
	if s ?? p -> out then write("Pos Matched")
	else write("Pos Failed")

	p := Rpos(x)
	if s ?? p -> out then write("Rpos Matched")
	else write("Rpos Failed")
	p := Rpos(`fcall(x)`)
	if s ?? p -> out then write("Rpos Matched")
	else write("Rpos Failed")
	p := Rpos(`c.int_return(x)`)
	if s ?? p -> out then write("Rpos Matched")
	else write("Rpos Failed")
	p := Rpos(`c.var`)
	if s ?? p -> out then write("Rpos Matched")
	else write("Rpos Failed")
	p := Rpos(`x`)
	if s ?? p -> out then write("Rpos Matched")
	else write("Rpos Failed")

	p := Tab(x)
	s ?? p -> out
	write(out)
	p := Tab(`fcall(x)`)
	s ?? p -> out
	write(out)
	p := Tab(`c.int_return(x)`)
	s ?? p -> out
	write(out)
	p := Tab(`c.var`)
	s ?? p -> out
	write(out)
        p := Tab(`x`)
	s ?? p -> out
	write(out)

	p := Rtab(x)
 	s ?? p -> out
	write(out)
	p := Rtab(`fcall(x)`)
	s ?? p -> out
	write(out)
	p := Rtab(`c.int_return(x)`)
	s ?? p -> out
	write(out)	
	p := Rtab(`c.var`)
	s ?? p -> out
	write(out)
        p := Rtab(`x`)
	s ?? p -> out
	write(out)

	count +:= 1 
    }
end

procedure fcall(param)
    if      param == 1 then return 1
    else if param == 5 then return 5
    else if param == 10 then return 10 
end

class integ(var)

method int_return(param)
    if      param == 1 then return 1
    else if param == 5 then return 5
    else if param == 10 then return 10 
end

initially()
   var := 1
end

