# Matrix.icn
#
#  Author : Jafar Al-Gharaibeh
#  Date   : Oct/07/08
#
package graphics3d

$include "graphics3dh.icn"

#
#
#
class Matrix4x4(
   A
    # list of 16 elements representing 4x4 matrix
   )
   method set(L)
      local i
      every i:=1 to 16 do
         A[i] := L[i]
   end
   
   method to_list()
   return [ A[1 ],  A[2 ],  A[3 ],  A[4 ],
	    A[5 ],  A[6 ],  A[7 ],  A[8 ],
	    A[9 ],  A[10],  A[11],  A[12],
	    A[13],  A[14],  A[15],  A[16]
	     ]
   end
   
   method copy_elements_to(L)
      local i
      every i:=1 to 16 do
         L[i] := A[i]
   end
   
   method get_copy()
      local mat, B, i
      mat := Matrix4x4()
      B := mat.A
      every i:=1 to 16 do
	 B[i] := A[i]
      
      return mat
   end
   
   method identity()
      A[1 ] := 1.0; A[2 ] := 0.0; A[3 ] := 0.0; A[4 ] := 0.0
      A[5 ] := 0.0; A[6 ] := 1.0; A[7 ] := 0.0; A[8 ] := 0.0
      A[9 ] := 0.0; A[10] := 0.0; A[11] := 1.0; A[12] := 0.0
      A[13] := 0.0; A[14] := 0.0; A[15] := 0.0; A[16] := 1.0
   end

   method transpose()
      A[5 ] :=: A[2]
      A[9 ] :=: A[3]
      A[10] :=: A[7]
      A[13] :=: A[4]
      A[14] :=: A[8]
      A[15] :=: A[12]   
      return self
   end

   method print_row(i)
      local b:= (i-1)*4
      every writes(left(string(A[b to (b+4)]),5), "  ")
      write()
   end
   
   method print()
      print_row(1)
      print_row(2)
      print_row(3)
      print_row(4)
   end

   method add(matb)
      local b := matb.A
      A[ 1]+:= b[1]
      A[ 2]+:= b[2]
      A[ 3]+:= b[3]
      A[ 4]+:= b[4]
      A[ 5]+:= b[5]
      A[ 6]+:= b[6]
      A[ 7]+:= b[7]
      A[ 8]+:= b[8]
      A[ 9]+:= b[9]
      A[10]+:= b[10]
      A[11]+:= b[11]
      A[12]+:= b[12]
      A[13]+:= b[13]
      A[14]+:= b[14]
      A[15]+:= b[15]
      A[16]+:= b[16]
      return self
   end

   method sub(matb)
      local b:= matb.A
      A[ 1]-:= b[1]
      A[ 2]-:= b[2]
      A[ 3]-:= b[3]
      A[ 4]-:= b[4]
      A[ 5]-:= b[5]
      A[ 6]-:= b[6]
      A[ 7]-:= b[7]
      A[ 8]-:= b[8]
      A[ 9]-:= b[9]
      A[10]-:= b[10]
      A[11]-:= b[11]
      A[12]-:= b[12]
      A[13]-:= b[13]
      A[14]-:= b[14]
      A[15]-:= b[15]
      A[16]-:= b[16]
      return self
   end

   method mul_s(s)
      A[ 1]*:= s
      A[ 2]*:= s
      A[ 3]*:= s
      A[ 4]*:= s
      A[ 5]*:= s
      A[ 6]*:= s
      A[ 7]*:= s
      A[ 8]*:= s
      A[ 9]*:= s
      A[10]*:= s
      A[11]*:= s
      A[12]*:= s
      A[13]*:= s
      A[14]*:= s
      A[15]*:= s
      A[16]*:= s
      return self
   end

   method plus(matb)
      local m, b, c
      m := Matrix4x4()
      c:= m.A
      b := matb.A
      c[ 1]:= A[ 1] + b[1]
      c[ 2]:= A[ 2] + b[2]
      c[ 3]:= A[ 3] + b[3]
      c[ 4]:= A[ 4] + b[4]
      c[ 5]:= A[ 5] + b[5]
      c[ 6]:= A[ 6] + b[6]
      c[ 7]:= A[ 7] + b[7]
      c[ 8]:= A[ 8] + b[8]
      c[ 9]:= A[ 9] + b[9]
      c[10]:= A[10] + b[10]
      c[11]:= A[11] + b[11]
      c[12]:= A[12] + b[12]
      c[13]:= A[13] + b[13]
      c[14]:= A[14] + b[14]
      c[15]:= A[15] + b[15]
      c[16]:= A[16] + b[16]
      return m
   end

   method minus(matb)
      local m, b, c
      m := Matrix4x4()
      c:= m.A
      b := matb.A
      c[ 1]:= A[ 1] - b[1]
      c[ 2]:= A[ 2] - b[2]
      c[ 3]:= A[ 3] - b[3]
      c[ 4]:= A[ 4] - b[4]
      c[ 5]:= A[ 5] - b[5]
      c[ 6]:= A[ 6] - b[6]
      c[ 7]:= A[ 7] - b[7]
      c[ 8]:= A[ 8] - b[8]
      c[ 9]:= A[ 9] - b[9]
      c[10]:= A[10] - b[10]
      c[11]:= A[11] - b[11]
      c[12]:= A[12] - b[12]
      c[13]:= A[13] - b[13]
      c[14]:= A[14] - b[14]
      c[15]:= A[15] - b[15]
      c[16]:= A[16] - b[16]
      return m
   end

   method mul(matb)
      local b,
         e1:=A[1], e2:=A[2], e3:=A[3], e4:=A[4], e5:=A[5], e6:=A[6], e7:=A[7],
	 e8:=A[8], e9:=A[9], e10:=A[10], e11:=A[11], e12:=A[12], e13:=A[13], 
	 e14:=A[14], e15:=A[15], e16:=A[16]  
      
      b := matb.A
      
      A[1 ] := e1*b[1] + e2*b[5] + e3*b[9 ] + e4*b[13]
      A[2 ] := e1*b[2] + e2*b[6] + e3*b[10] + e4*b[14]
      A[3 ] := e1*b[3] + e2*b[7] + e3*b[11] + e4*b[15]
      A[4 ] := e1*b[4] + e2*b[8] + e3*b[12] + e4*b[16]
      
      A[5 ] := e5*b[1] + e6*b[5] + e7*b[9 ] + e8*b[13]
      A[6 ] := e5*b[2] + e6*b[6] + e7*b[10] + e8*b[14]
      A[7 ] := e5*b[3] + e6*b[7] + e7*b[11] + e8*b[15]
      A[8 ] := e5*b[4] + e6*b[8] + e7*b[12] + e8*b[16]
      
      A[9 ] := e9*b[1] + e10*b[5] + e11*b[9 ] + e12*b[13]
      A[10] := e9*b[2] + e10*b[6] + e11*b[10] + e12*b[14]
      A[11] := e9*b[3] + e10*b[7] + e11*b[11] + e12*b[15]
      A[12] := e9*b[4] + e10*b[8] + e11*b[12] + e12*b[16]
      
      A[13] := e13*b[1] + e14*b[5] + e15*b[9 ] + e16*b[13]
      A[14] := e13*b[2] + e14*b[6] + e15*b[10] + e16*b[14]
      A[15] := e13*b[3] + e14*b[7] + e15*b[11] + e16*b[15]
      A[16] := e13*b[4] + e14*b[8] + e15*b[12] + e16*b[16]
      
      return self
   end

   method mul2(matb)
      local matc, b, c,
         e1:=A[1], e2:=A[2], e3:=A[3], e4:=A[4], e5:=A[5], e6:=A[6], e7:=A[7],
	 e8:=A[8], e9:=A[9], e10:=A[10], e11:=A[11], e12:=A[12], e13:=A[13], 
	 e14:=A[14], e15:=A[15], e16:=A[16]  
      
      matc := Matrix4x4()
      c := matc.A
      b := matb.A
      
      c[1 ] := e1*b[1] + e2*b[5] + e3*b[9 ] + e4*b[13]
      c[2 ] := e1*b[2] + e2*b[6] + e3*b[10] + e4*b[14]
      c[3 ] := e1*b[3] + e2*b[7] + e3*b[11] + e4*b[15]
      c[4 ] := e1*b[4] + e2*b[8] + e3*b[12] + e4*b[16]
      
      c[5 ] := e5*b[1] + e6*b[5] + e7*b[9 ] + e8*b[13]
      c[6 ] := e5*b[2] + e6*b[6] + e7*b[10] + e8*b[14]
      c[7 ] := e5*b[3] + e6*b[7] + e7*b[11] + e8*b[15]
      c[8 ] := e5*b[4] + e6*b[8] + e7*b[12] + e8*b[16]
      
      c[9 ] := e9*b[1] + e10*b[5] + e11*b[9 ] + e12*b[13]
      c[10] := e9*b[2] + e10*b[6] + e11*b[10] + e12*b[14]
      c[11] := e9*b[3] + e10*b[7] + e11*b[11] + e12*b[15]
      c[12] := e9*b[4] + e10*b[8] + e11*b[12] + e12*b[16]
      
      c[13] := e13*b[1] + e14*b[5] + e15*b[9 ] + e16*b[13]
      c[14] := e13*b[2] + e14*b[6] + e15*b[10] + e16*b[14]
      c[15] := e13*b[3] + e14*b[7] + e15*b[11] + e16*b[15]
      c[16] := e13*b[4] + e14*b[8] + e15*b[12] + e16*b[16]
      
      return matc
   end

   method rotation_matrix(angle, axis)
      local sint, cost, L
      sint := sin(angle)
      cost := cos(angle)
      
      case axis of{
	 "x" :{
	    A[ 6] := cost
	    A[ 7] := sint
	    A[10] :=-sint
	    A[11] := cost
	    }
	 "y" :{
	    A[ 1] := sint
	    A[ 3] := cost
	    A[ 9] := cost
	    A[11] :=-sint
	    }
	 "z" :{
	    A[ 1] := cost
	    A[ 2] := sint
	    A[ 5] :=-sint
	    A[ 6] := cost
	 }
      } # case
   end
   
   method scaling_matrix(s)
      A[ 1] := s.x
      A[ 6] := s.y
      A[11] := s.z
   end

   method translation_matrix(t)
      A[13] := t.x
      A[14] := t.y
      A[15] := t.z
   end

   initially(L)
      A := array(16, 0.0)
      if \L then set(L)
end