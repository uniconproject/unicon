#
# $Id: canvastabledialog.icn,v 1.6 2006-07-09 23:43:13 rparlett Exp $
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import gui
$include "guih.icn"

############################################################################
#
#
#
class CanvasTableDialog : CanvasComponentDialog(
   c,                       #         
   add_col,                 #               
   delete,                  #              
   apply,                   #             
   struct,                  #              
   edit_label,              #                  
   size,                    #            
   internal_alignment,      #                          
   os,                      #          
   os_on,                   #             
   os_off,                  #              
   col_var_category0,       # Checkboxes for column variable category
   col_var_category1,       #  
   col_var_category_cbg,    #
   internal_alignment_list, #                               
   col_name,                #
   auto_width_cb,
   select_group             #
   )

   method on_struct()
      local i, new
      if i := struct.get_selections()[1] & i <= *c.table_header.children then {
         new := c.table_header.children[i]
         delete.clear_is_shaded()
         apply.clear_is_shaded()
         os.set_which_one(os_on)
         edit_label.set_contents(new.label)
         if \new.auto_width_flag then {
            size.set_is_shaded()
            size.set_contents("")
            auto_width_cb.set_is_checked()
         } else {
            size.clear_is_shaded()
            size.set_contents(new.column_width)
            auto_width_cb.clear_is_checked()
         }
         col_name.set_contents(new.name)
         internal_alignment.set_selection(case new.internal_alignment of {
            "c" : 1
            "l" : 2
            "r" : 3 })
         if \new.class_variable then
            col_var_category_cbg.set_which_one(col_var_category0)
         else
            col_var_category_cbg.set_which_one(col_var_category1)
      } else {
         apply.set_is_shaded()
         delete.set_is_shaded()
         os.set_which_one(os_off)
      }
   end

   method on_add_col()
      local new, l, nl, line, nlines
      new := CanvasTableColumn()
      new.set_name(c.parent_Canvas.get_new_name(new.name))
      new.set_label("Edit me")
      new.set_column_width(75)
      new.set_parent(c.table_header)
      new.init()
      new.set_parent_Canvas(c.parent_Canvas)
      l := struct.get_selections()
      nl := l[1]
      if *l = 0 | nl > *c.table_header.children then {
         put(c.table_header.children, new)
         struct.set_contents(c.string_rep())
         struct.goto_pos(*c.table_header.children)                             
         struct.set_selections([*c.table_header.children])
         struct.set_cursor(*c.table_header.children)
      } else {
         c.table_header.children := c.table_header.children[1:nl] ||| [new] ||| c.table_header.children[nl:0]
         struct.set_contents(c.string_rep())      
         line := struct.get_first_line()
         nlines := struct.get_curr_lines()
         if nl > line + nlines - 1 then
            line := nl - nlines + 1
         else if nl < line then
            line := nl
         struct.goto_pos(line)
         struct.set_selections([nl])
         struct.set_cursor(nl)
      }                              
      if \new.class_variable then
         col_var_category_cbg.set_which_one(col_var_category0)
      else
         col_var_category_cbg.set_which_one(col_var_category1)
      delete.clear_is_shaded()
      apply.clear_is_shaded()
      os.set_which_one(os_on)
      edit_label.set_contents(new.label)
      size.set_contents(new.column_width)
      col_name.set_contents(new.name)
      internal_alignment.set_selection(case new.internal_alignment of {
         "c" : 1
         "l" : 2
         "r" : 3 })
      set_focus(edit_label, "\t")
   end

   method on_apply()
      local r
      #
      # Validate fields
      #
      auto_width_cb.is_checked() |
         integer(self.size.get_contents()) | return alert_error("Integer field required for col width")
      r := c.table_header.children[struct.get_selections()[1]]
      r.set_label(self.edit_label.get_contents())
      if auto_width_cb.is_checked() then {
         r.auto_width_flag := 1
         r.set_column_width(&null)
      } else {
         r.auto_width_flag := &null
         r.set_column_width(integer(self.size.get_contents()))
      }
      r.set_internal_alignment(internal_alignment_list[internal_alignment.get_selection()])
      r.set_name(col_name.get_contents())
      r.class_variable := case col_var_category_cbg.get_which_one() of {
         col_var_category0 : 1
         col_var_category1 : &null
      }
      struct.set_contents(c.string_rep())
      struct.clear_selections()
      delete.set_is_shaded()
      apply.set_is_shaded()
      os.set_which_one(os_off)
   end

   method on_delete()
      local i
      i := struct.get_selections()[1]
      c.table_header.children[i].finally()
      c.table_header.children := c.table_header.children[1:i] ||| c.table_header.children[i + 1:0]
      struct.set_contents(c.string_rep())
      struct.clear_selections()
      delete.set_is_shaded()
      apply.set_is_shaded()
      os.set_which_one(os_off)
   end

   method on_auto_width_cb()
      size.toggle_is_shaded()
   end

   method on_cancel()
      c.parent_Canvas.parent_dialog.use_extra_undo()
      self.dispose()
   end

   method on_okay()
      self.validate_input() | fail
      self.set_vals(c)
      c.select_one := c.select_many := &null
      case select_group.get_selection() of {
         2 :  c.select_one := 1
         3 :  c.select_many := 1
      }
      c.reset(c.parent)
      self.okay_result := 1
      self.dispose()
   end

   initially
      local p, t1, t2, t3, b, l
      internal_alignment_list := ["c", "l", "r"]
      self.setup(c)
      set_w_default.set_is_shaded()
      set_h_default.set_is_shaded()
      draw_border.set_is_shaded()
      c.parent_Canvas.parent_dialog.save_extra_undo()

      self.set_attribs("size=540,425", "label=" || label)

      p := TabItem()
      add_tab_at_front(p)
      p.set_label("General")

      struct := Table()
      struct.connect(self, "on_struct", SELECTION_CHANGED_EVENT)
      struct.set_size(225, "100%-50")
      struct.set_pos(25, 25)
      struct.set_select_one()
      struct.set_contents(c.string_rep())
      p.add(struct)

      t1 := TableColumn()
      t1.set_label("Label")
      t1.set_column_width(75)
      struct.add_column(t1)

      t2 := TableColumn()
      t2.set_label("Width")
      t2.set_internal_alignment("r")
      t2.set_column_width(60)
      struct.add_column(t2)

      t3 := TableColumn()
      t3.set_label("Align")
      t3.set_internal_alignment("r")
      t3.set_column_width(60)
      struct.add_column(t3)

      add_col := TextButton()
      add_col.connect(self, "on_add_col", ACTION_EVENT)
      add_col.set_label("Add")
      add_col.set_pos(275, 25)
      p.add(add_col)

      delete := TextButton()
      delete.connect(self, "on_delete", ACTION_EVENT)
      delete.set_label("Delete")
      delete.set_pos(330, 25)
      delete.set_is_shaded()
      p.add(delete)

      apply := TextButton()
      apply.connect(self, "on_apply", ACTION_EVENT)
      apply.set_label("Apply")
      apply.set_pos(395, 25)
      apply.set_is_shaded()
      p.add(apply)

      os := OverlaySet()
      os.set_pos(275, 60)
      os.set_size("100%-300", "100%-85")
      p.add(os)

      os_off := OverlayItem()
      os.add(os_off)

      os_on := OverlayItem() 
      os.add(os_on)

      b := Border()
      b.set_pos(0, 0)
      b.set_size("100%", "100%")
      l := Label()
      l.set_label("Edit")
      b.set_title(l)
      os_on.add(b)

      l := Label()
      l.set_label("Label : ")
      l.set_pos(20, 25)
      l.set_align("l", "c")
      b.add(l)
      
      edit_label := TextField()
      edit_label.set_align("l", "c")
      edit_label.set_pos(70, 25)
      edit_label.set_size(100)
      b.add(edit_label)

      l := Label()
      l.set_label("Width : ")
      l.set_pos(20, 60)
      l.set_align("l", "c")
      b.add(l)
      
      size := TextField()
      size.set_align("l", "c")
      size.set_pos(70, 60)
      size.set_size(47)
      b.add(size)

      auto_width_cb := CheckBox()
      auto_width_cb.set_label("Auto")
      auto_width_cb.set_align("l", "c")
      auto_width_cb.set_pos(125, 60)
      auto_width_cb.connect(self, "on_auto_width_cb", ACTION_EVENT)
      b.add(auto_width_cb)

      l := Label()
      l.set_label("Align : ")
      l.set_pos(20, 95)
      l.set_align("l", "c")
      b.add(l)

      internal_alignment := List()
      internal_alignment.set_pos(70, 95)
      internal_alignment.set_size(50)
      internal_alignment.set_align("l", "c")
      internal_alignment.set_selection_list(internal_alignment_list)
      b.add(internal_alignment)

      l := Label()
      l.set_label("Name :")
      l.set_pos(20, 130)
      l.set_align("l", "c")
      b.add(l)

      col_name := TextField()
      col_name.set_size(100)
      col_name.set_pos(70, 130)
      col_name.set_align("l", "c")
      b.add(col_name)

      col_var_category_cbg := CheckBoxGroup()

      col_var_category0 := CheckBox()
      col_var_category0.set_label("Class variable")
      col_var_category0.set_pos(20, 170)
      col_var_category0.set_align("l", "c")
      col_var_category_cbg.add(col_var_category0)
      b.add(col_var_category0)

      col_var_category1 := CheckBox()
      col_var_category1.set_label("Local variable")
      col_var_category1.set_pos(20, 190)
      col_var_category1.set_align("l", "c")
      col_var_category_cbg.add(col_var_category1)
      b.add(col_var_category1)

      p := TabItem()
      add_tab(p)
      p.set_label("Selection")

      select_group := List()
      select_group.set_selection_list(["No selection", "Select one", "Select many"])
      select_group.set_size(120)
      select_group.set_pos(100, 100)
      p.add(select_group)

      if \c.select_one then
         select_group.set_selection(2)
      else if \c.select_many then
         select_group.set_selection(3)

end
