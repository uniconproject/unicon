#
# console.icn
# Handles the main console based command interpreter
# Author : Ziad Al-Sharif
# Date   : Feb 24, 2008 
# e-mail : zsharif@gmail.com
#

$include "defaults.icn"
$include "evdefs.icn"

link argparse

class Console : Session(
   UP,         # The up arrow control key
   DOWN,       # The down arrow control key
   RIGHT,      # The right arrow control key
   LEFT,       # The left arrow control key
   ENTER,      # The enter key
   TAB,        # The tab key
   BkSp,       # The Back Space key
   badKeys,    # A set of all other control keys
   mode        # Either &null (normal), "--line", or "--adapter"
   )

#
# A general getch() that works on windows/linux and handles control keys
#
method my_getch()
   local e1, e2, e3

   if not (e1 := getch()) then fail
$ifdef _UNIX
   if e1 === "\e" then {
      if kbhit() then {
         e2 := getch()
         e3 := getch()
         if e3 === !"2356" then e3 ||:= getch()
         return e1 || e2 || e3
         }
      }
$else # Windows console
   if e1 === "\xe0" then {
      if kbhit() then {
         e2 := getch()
         return e1 || e2
         }
      }
$endif # _UNIX
   else{
      return e1
      }
end

#
# Reads an input string char by char
#
method get_Line()
   local line := "", i := 0, ch, c, left, x, max := 0, matchableCmds, matchedCmd
   static stateUnloadedCmds, stateLoadedCmds, statePausedCmds
   initial {
      stateUnloadedCmds := [
         "load",
         "quit",
         "help",
         "directory",
         "show",
         "source",
         "info",
         "analyze",
         "ls",
         "pwd",
         "cd"
      ]
      stateLoadedCmds := stateUnloadedCmds ||| [
         "run",
         "break",
         "watch",
         "awatch",
         "twatch",
         "vwatch",
         "rwatch",
         "swatch",
         "list",
         "clear",
         "delete",
         "enable",
         "disable",
         "assert",
         "trace"
      ]
      statePausedCmds := stateLoadedCmds ||| [
         "print",
         "eval",
         "step",
         "pstep",
         "next",
         "return",
         "frame",
         "up",
         "down",
         "continue",
         "where",
         "bracktrace",
         "coexp"
      ]
   }

   writes(PROMPT)

   # if line mode, read a whole line the old fashioned way, skip this function
   if \mode == "--line" | \mode == "--adapter" then
      return DState.stateRead() | "quit"

   # normal mode, read the line interactively
   repeat {
      if not (ch := my_getch()) then return "quit"
      case ch of{
         DOWN:{
            left := &null
            if i > 1 then  
               i-:=1
            else if i = (1|0) then
               i := *DState.cmdHistory
            else
               i := 1
            line := DState.cmdHistory[i]
            }
         UP:{
            left := &null
            if i < *DState.cmdHistory then
               i+:=1
            else if i = *DState.cmdHistory then
               i := 1
            else
               i := *DState.cmdHistory
            line := DState.cmdHistory[i]
            }
         BkSp:{
            if /left then
               line := line[1:-1]
            else{
               if left > 1 then left-:=1  
               line := line[1:left]||line[left+1:0]
               }   
            }
         LEFT:{
            if /left then
               left := *line
            else if left > 1 then left-:=1  
            }
         RIGHT:{
            if \left & left <= *line then left+:=1
            }
         TAB:{
            line ? {
               tab(many("\ "))
               cmd := tab(upto("\ ") | 0)
               if not pos(0) then next
            }
            case DState.State of {
               NONE: { matchableCmds := stateUnloadedCmds }
               LOAD: { matchableCmds := stateLoadedCmds }
               PAUSE: { matchableCmds := statePausedCmds }
            }
            matchedCmd := tab_Complete(cmd, matchableCmds)
            if \matchedCmd then {
               line := matchedCmd
               left := &null
               matchedCmd := &null
            }
         }
         ENTER:{
            left := &null
$ifndef _UNIX
            write()
$endif
            if *line = 0 then{ 
               line := DState.cmdHistory[1]
               writes(line)
               }
            break 
            }
         default:{
            if not member(badKeys, ch) then{
               if /left then  
                  line ||:=ch
               else{
                  line := line[1:left]||ch||line[left:0]
                  left +:= 1
                  }
               }
            }
         }#end of case

      writes("\r")
      max <:= *line
      every c := 1 to max+7 do writes(" ")
      writes("\r")
      writes(PROMPT || line)
      if \left then {
         writes("\r")
         writes(PROMPT || line[1:left])
         } 
      }#end of while
   write() # new line after the prompt
   return line
end

# Displays set of possible commands if more than one valid match.
# Returns matched cmd if only one valid match, otherwise returns nothing.
method tab_Complete(line, matchableCmds)
   local matchedCmds, formattedCmds := [], i, minLength := 0, cmd, diff, outString := "\n", col
   matchedCmds := copy(matchableCmds)
   if line ~== "" then {
      i := 1
      while i <= *matchedCmds do {
         if not match(map(line), matchedCmds[i]) then
            delete(matchedCmds, i)
         else
            i +:= 1
      }
   }
   if *matchedCmds > 1 then {
      matchedCmds := sort(matchedCmds)
      every cmd := !matchedCmds do {
         if *cmd > minLength then
            minLength := *cmd
      }
      minLength +:= 2
      col := 0
      every cmd := !matchedCmds do {
         if col = 3 then
            outString ||:= "\n"
         diff := minLength - *cmd
         every 1 to diff do
            cmd ||:= " "
         outString ||:= cmd
         if col = 3 then
            col := 1
         else
            col +:= 1
      }
      write(outString)
   }
   else if *matchedCmds = 1 then
      return matchedCmds[1]
end

#
# returns list of the current command line
#
method get_CommandLine()
   local tok, op, cmd, line := get_Line()

   # analyze that cmd line
   if *line > 0 then{  
      DState.update_cmdHistory(line)
      return argparse(line)
      }
   else
      fail
end

#
# Here where we start a UDB Console Session and have
# most of the user control debugging interface
#
method startConsole(argv)
   local ans, cmd, old_State := NONE, funame, errorTable

   # check whether we are on Solaris, and if so, default to cooked input
   if funame := open("uname","p") then {
      if find("SunOS", read(funame)) then mode := "--line"
      close(funame)
      }
   if argv[1] == "--line" then { mode := pop(argv); udb_no_more_flag := 1 }
   else if argv[1] == "--adapter" then { 
      mode := pop(argv) 
      DState.udap := Adapter(pop(argv))
      udb_no_more_flag := 1 
   }
   else if argv[1] == "--noline" then { mode := &null; pop(argv) }

   DState.mode := mode
   DState.initializeState(argv)

   # main interface loop
   while DState.State ~= QUIT do {
     case DState.State of {
       RUN: {
          # everything is fine, file is loaded and ready to run TP
          # when the program is PAUSED, we can make use of cmds such as:
          # [run: re-execute],[break],[step],[next],[cont],[quit],[up],[down]
          # [frame], [print], [where]

$ifdef TEST
          DState.RunCode := RUN
          #Debug.Internal.cmdEnable("counter") ### TEST E_Deref
          #Debug.External.cmdLoad(["-call","counter"]) ### TEST E_Deref
          #Debug.External.cmdLoad(["counter"]) ### TEST E_Deref

          #Debug.Internal.cmdEnable("counter_pcall") ### TEST E_Pcall
          #Debug.External.cmdLoad(["-call","counter_pcall"]) ### TEST E_Pcall
          #Debug.External.cmdLoad(["counter_pcall"]) ### TEST E_Pcall

          #Debug.Internal.cmdEnable("counter_line") ### TEST E_Line
          #Debug.External.cmdLoad(["-call","counter_line"]) ### TEST E_Line
          #Debug.External.cmdLoad(["counter_line"]) ### TEST E_Line

          #Debug.Internal.cmdEnable("counter_syntax") ### TEST E_Syntax
          #Debug.External.cmdLoad(["-call","counter_syntax"]) ### TEST E_Syntax
          #Debug.External.cmdLoad(["counter_syntax"]) ### TEST E_Syntax

          #cmd:=["assert","test_assert",":","6","sometime","()","{","i","<=","n","}"]
          #push(DState.cmdHistory,"assert test_assert:6 sometime(){ i <= n }")
          #cmd := ["assert","test_assert",":","6","always","()","{","i","<=","n","}"]
          #push(DState.cmdHistory,"assert test_assert:6 always(){ i <= n }")
          #Debug.DTA.cmdAssert(cmd)
          #DState.State := RUN
$endif
          # debugging session loop
          every startSession() do {
             old_State := DState.State
             # user interaction loop during debug
             while DState.State ~= RUN do {
               if \DState.mode == "--adapter" then {
                  if \&errornumber then {
                     errorTable := table("type", "crash", "errornumber", &errornumber)
                     errorTable["errortext"] := \&errortext 
                     errorTable["errorvalue"] := \&errorvalue
                     DState.Write(errorTable)
                  }
               }
               case DState.State of {
                 RELOAD |
                 END | 
                 QUIT:    { 
                            # refresh coexp at debug session end
                            DState.coState.reinit() 
$ifndef TEST
                            break break next
$else 
                            #-- Automated TEST: to get the Time right
                            break break break 
$endif
                          }
                 CONTINUE:{ 
                            if DState.RunCode == ERROR then {
                               DState.runtimeErrorMsg() 
                               next
                               } 
                            DState.State   := RUN
                            DState.RunCode := CONTINUE    
                            next                       }
                 STEP:    { 
                            if DState.RunCode == ERROR then {
                               DState.runtimeErrorMsg() 
                               next
                               } 
                            DState.State   := RUN
                            DState.RunCode := STEP
                            next                       }
                 PSTEP:   { 
                            if DState.RunCode == ERROR then {
                               DState.runtimeErrorMsg() 
                               next
                               } 
                            DState.State   := RUN
                            DState.RunCode := PSTEP    
                            next                       }
                 NEXT:    { 
                            if DState.RunCode == ERROR then {
                               DState.runtimeErrorMsg() 
                               next
                               } 
                            DState.State   := RUN
                            DState.RunCode := NEXT
                            next                       }
                 RERUN:   { DState.State   := RUN
                            DState.coState.reinit() # refresh coexps
                            break break next           }
                 SKIP:    { DState.State := old_State  }
                 ERROR:   { DState.State := old_State
                            Write(Message)             }
               }# end of case

               # update current symbol table before user input       
               DState.srcFile.updateCurrSymtab(DState.coState)

               if cmd := get_CommandLine() then {
                  if cmd[1] == "reset" then return "reset"
                  else parse_Command(cmd)
               }
               else                             DState.State := SKIP
             }# end of while
          }#end of every
          }
       RELOAD:{
          DState.initializeState() # load program now that debugging has ended
          }
       END:{
          # if debugging finished OK
          DState.State := LOAD #important for re-run
          }
       ERROR:{
          # if there is a Console Error, handle it, 
          # and go back to the old state
          DState.State := old_State 
          }
       SKIP:{
          DState.State := old_State
          }
       QUIT:{
          return
          }
       default:{
          # for anyything else ???, like when DState.State = NONE
          # write("udb_Console Default!!!!!")
          }
     } # end case DState.State
    old_State := DState.State
    if cmd := get_CommandLine() then {
      if cmd[1] == "reset" then return "reset"
      else parse_Command(cmd)
   }
    else                             DState.State := SKIP
   }# end while DState.State
end

method otherControls()
   local F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12
   local PgUp, PgDn, Ins, Del, End, Home

$ifdef _UNIX 
   F1 := "\eOP";  F2 := "\eOQ";  F3 := "\eOR";  F4 := "\eOS"
   F5 := "\e[1";  F6 := "\e[1";  F7 := "\e[1";  F8 := "\e[1"
   F9 := "\e[20"; F10:= "\e[21"; F11:= "\e[23"; F12:= "??"

   PgUp:= "\e[5~"; PgDn:= "\e[6~"; Ins := "\e[2~"; Del := "\e[3~"
   End := "\e[F";  Home:= "\e[H"

   return set(F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
              PgUp, PgDn, Ins, Del, End, Home)
$else
   return set()
$endif

end

#
#  Initialization
#
initially()
   
   self.Session.initially()

   #cmdHistory := [""]
   #wchar := CHARACTER ++ cset('\'\\/-+.*:=,\_n&?[]\"!<>~')

   # Constant Keys used with the command history
$ifdef _UNIX 
   UP    := "\e[A"
   DOWN  := "\e[B"
   RIGHT := "\e[C"
   LEFT  := "\e[D"
   ENTER := "\n"
   TAB   := "\t"
   BkSp  := "\d"
   badKeys := otherControls()
$else
   UP    := "\xe0H"
   DOWN  := "\xe0P"
   RIGHT := "\xe0M" 
   LEFT  := "\xe0K"
   ENTER := "\r"
   TAB   := "\t"
   BkSp  := "\b"
   badKeys := otherControls()
$endif
end
