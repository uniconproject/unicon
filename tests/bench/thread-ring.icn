# thread-ring.icn
#
# The Computer Language Benchmarks Game
# http://shootout.alioth.debian.org/
# Translated from Antti Kervinen and
# Tupteq's Python program

global main_lock, first_lock, n
procedure threadfun(number, my_lock, next_lock)
   repeat {
      critical my_lock: wait(my_lock)
      if n > 0 then {
         n -:= 1
         signal(next_lock)
         }
      else {
         write(output, number)
         signal(main_lock)
         }
      }
end

procedure run_threadring_old(argv)
local my_lock, next_lock, number
   n := argv[1]
   main_lock := condvar()
   next_lock := first_lock := condvar()
   every number := 1 to 503 do {
      my_lock := next_lock
      next_lock := if number < 503 then condvar() else first_lock
      spawn(create threadfun(number, my_lock, next_lock),1K, 1K, 64K)
      }
   signal(first_lock)
   critical main_lock: wait(main_lock)
end

procedure threadfun2(number)
local next_thread
   next_thread := <<@        # wait for &main to send me my next thread
   repeat {
      delay(-1)              # delay/block forever! until some thread signals me 
      if n > 0 then{
	 n -:= 1
	 signal(next_thread) # wake up the next thread
      }
      else{                  # no more work! wake &main
         write(output, number)
         signal(&main)
     }
  }
end

procedure threadfun3(number)
local next_thread
   next_thread := <<@        # wait for &main to send me my next thread
   while ((0 < <<@) - 1) @>> next_thread
   write(output, number)
   @>> &main
end

procedure run_threadring(argv)
 if argv[2] then{
     if numeric(argv[2]) = 2 then
        run_threadring_new2(argv)
     else
        run_threadring_old(argv)
 }
 else
     run_threadring_new(argv)
end

procedure run_threadring_new(argv)
local n, first_thread, prev_thread, number, new_thread
   n := argv[1]
   first_thread :=  prev_thread := spawn(create threadfun2(1), 1K, 1K, 64K)
   signal(first_thread)
   every number := 2 to 503 do {
      new_thread := spawn(create threadfun2(number), 1K, 1K, 64K)
      new_thread @>> prev_thread
      prev_thread := new_thread
      }
   first_thread @>> new_thread
   delay(-1)
end

procedure run_threadring_new2(argv)
local n, first_thread, prev_thread, number, new_thread
   n := argv[1]
   first_thread :=  prev_thread := spawn(create threadfun3(1), 1K, 1K, 64K)
   every number := 2 to 503 do {
      new_thread := spawn(create threadfun3(number), 1K, 1K, 64K)
      new_thread @>> prev_thread
      prev_thread := new_thread
      }
   first_thread @>> new_thread
   n @>> first_thread
   <<@
end

$ifdef MAIN
procedure main(argv)
   output := &output
   run_threadring(argv)
end
$endif
