###########################################################################
#
#	File:     ui.icn
#
#	Subject:  Unicon IDE, an integrated programming environment
#
#	Authors:  Hani Bani Salameh, Nolan Clayton and Clinton Jeffery
#
#	Date:     July 2, 2007
#
############################################################################
#
#  This program provides a simple multi-platform development environment
#  for Unicon.  It is gradually gaining features and usability.
#
#  To do:
#	keyboard shortcuts
#	multiple edit regions.
#	
############################################################################
#
#  Requires:  graphics, version 2 GUI libraries, and ivib
#
############################################################################
#
#  Links:  graphics, io, font_dlg
#
############################################################################

import gui
$include "guih.icn"
link mainbar
link getpaths
link classbrowser
link enqueue, preferences
link stddlg

$ifdef _MS_WINDOWS_NT
$define SL "\\"
$else
$define SL "/"
$endif

#
# You may alter your Makedefs and/or makefile to add directories in which
# to find these files to your IPATH.
#
link unigram, idol, tree, preproce, unilex, unicon, yyerror

global linebreak, uidlog, browser, browserversion, docpath, UIDE_VERS,
       is_MSWindows, PATHSEP, env, win_position,
       fontname

#$define lpr "enscript -b \" \" -1 -Plex3normal"
##$define HELP_PATH "help"

class UIDE : Dialog(
   #
   # The class variables, generally representing components in the dialog.
   #
   startfile,
   pnlToolbar, menubar,
   MsgBox, EditBox, PtyBox,
   FileTabSet,ClassTabSet, DevTabSet,
   FileBrowser,
   tab_item_1, tab_item_2, tab_item_3, tab_item_4,
   ui_Preferences
   )

   # as inherited from Dialog, except non-fatal if the requested font fails.
   method open_win()
      local i
      if not (self.win := (WOpen ! (["inputmask=mc"] ||| self.attribs))) then {
	 every i := 1 to *self.attribs do if match("font=", self.attribs[i]) then {
	    delete(self.attribs, i)
	    if not (self.win := (WOpen ! (["inputmask=mc"] ||| self.attribs))) then fatal("couldn't open window")
	    else break # might need to do more here to indicate font setting was lost
	    }
	 }
      self.buffer_win := (WOpen ! (["canvas=hidden"] ||| self.attribs)) | fatal("couldn't open window")
      Raise(self.win)
      return
   end

   method component_setup()
      local error_msg := pre_ui_initialize()
      # most error messages are reported in a MsgBox, but this one is fatal
      if error_msg === "can't open window" then stop(error_msg)
      self.setup()
      pnlToolbar := Panel()
      pnlToolbar.set_pos("0", "4.5%")
      pnlToolbar.set_size("100%", "4.5%")
      pnlToolbar.set_draw_border()
      pnlToolbar.set_attribs("bg=light whitish gray", "resize=on", "font=mono,16")
      self.add(pnlToolbar)
      menubar.Menubar()
      ide.Toolbar(pnlToolbar) #This call to add a toolbar
      FileBrowser.addreplace("file_contents", "tab_label", 0)
      MsgBox.set_contents([\error_msg])
   end

   method IDEDialog()
   end

   #
   # Set Doc Path Proc:
   #
   method set_docpath()
      match("Binaries at ", docpath := &features) |
      Notice("What, no binaries?" ||
             "Have you added Unicon's bin directory to your path?")
      docpath ?:= (="Binaries at " & tab(0))
      if map(docpath[-4:0])==("bin/"|"bin\\") then docpath[-4:0] := ""
      else write("did not find expected Unicon binaries in a bin/ directory")
   end

   #
   # pre initialization procedure
   #
   method pre_ui_initialize()
      local blank_window, error_msg
      ui_Preferences := DialogPreferences()
      error_msg := menubar.load_config()
      if \ui_Preferences.paren_check_box_state == "" then
	  ui_Preferences.paren_check_box_state := &null
      if \ui_Preferences.syntax_check_box_state == "" then
	  ui_Preferences.syntax_check_box_state := &null
      if not (blank_window := open("u_ide_blank", "g", "canvas=hidden")) then
	 return "can't open window"
      if /win_position then win_position := "2,3"
      if /height then height := WAttrib(blank_window, "displayheight") - 150
      if /width then width := WAttrib(blank_window, "displaywidth") - 150
      close(blank_window)
      if /msglines then msglines := 7
      if /fontname then fontname := "mono,16"
      if /linebreak then linebreak := "LF"  # default to UNIX mode
      if \error_msg then return error_msg
   end

   #
   # main initialization procedure
   #
   method ui_initialize()
      local f, m, line
      menubar.on_hide_toolbar() # hide/show toolbar and setup ide window layout
      env := getenv("IDOLENV") | "uniclass"
      alpha    := &ucase ++ &lcase ++ '_' ++ &digits
      nonalpha := &cset -- alpha
      alphadot := alpha ++ '.'
      white    := ' \t\f\r'
      nonwhite := &cset -- white

      wiconlog := tempname("ui",".tmp",,)
      xargs := ""
      if \MsgBox.contents then {
         m := ""
         every m ||:= !!MsgBox.contents
	 }
      if /is_MSWindows then {
         # browser search appears random but should actually should be in order
         # of how well docs are displayed (in-line, external tool, or not at all)
         every browser := getenv("BROWSER") | "qupzilla" | "surf" | "uzbl" | "dillo" |
		  "firefox" | "chromium-browser" | "opera" | "netscape" | "open" | "midori" | "mozilla" do {
	    if stat(getpaths() || browser) then {
	       MsgBox.set_contents(["found browser " || browser, \m])
	       break
	       }
	    else browser := &null
	    }
	 }
      else {
         (browser := "\""|| (
	     WinAssociate("HTM") |
             (getenv("ProgramW6432"|"ProgramFiles"|"ProgramFiles(x86)") ||
			"\\Internet Explorer\\iexplore.exe")) || "\"") |
            write("What, no browser?  Unicon's online help won't be readable \n_
             until you associate an HTML reader application with the HTM \n_
             file extension.\n")
      }
      # iexplore runs off http:// but not file://
      if (not find("iexplore.exe", \browser)) |
	 (not match("online", is_online())) then set_docpath()
#      if not verify_make() then on_close()
   end

   method end_dialog()
   end

   method init_dialog()
   local wid, ht
      ui_initialize()
#      docpath := &null
      insert(opened_files_set,"scratch")
      ide.handle_openfile(&null, \startfile)
      menubar.set_font()
      # queue up an lpress to set the initial focus to the editor buffer
      if \win then {
	 Enqueue(\win, &lpress, EditBox.x+2, EditBox.y+2)
	 }
   end

# Proposed function key bindings. Still under construction.
# Loosely based on Borland-style IDE keybindings.
#
#  Key	Base		Control     Alt		Shift
#  F1   Help		search@crsr help/srch	help index
#  F2	Save file	restart	    Find(next)	grep
#  F3	Open file	callstack   closewin	New file
#  F4   Run to cursor
#  F5	Toggle breakpt		    User screen
#  F6	Next win/tab				Previous win
#  F7	Step		set watchpt
#  F8	Next		set breakpt
#  F9	Make		Run	    Compileonly Run/debug
#  F10	Main menu		
#  F11	runtime msgs	project dlg inspect
#  F12	compiler msgs	toggle ivib
# alt-x = exit


   #
   # Generic implementation
   #
   method on_function_key(ev)
      case ev.param of {
	 Key_F1:   ide_key_file_menu()
	 Key_F2:   ide_key_help_menu()
	 Key_F3:   ide_handle_save()
	 Key_F4:   ide_handle_open()
	 Key_F5:   ide_prev_tab()
	 Key_F6:   ide_next_tab()
	 Key_F7:   ""#ide_handle_compile()
	 Key_F8:   ""#ide_handle_run()
	 Key_F9:    ""
	 Key_F10:   ""
	 Key_F11:   ""
	 Key_F12:  ide_handle_exit()
	 }
   end

   #
   # compile and run are not reliable enough yet to
   # implement these shortcuts
   #
   method ide_handle_compile()
      ide.on_makeexe_btn()
   end

   method ide_handle_run()
      ide.on_run_btn()
   end

   method ide_handle_exit()
      menubar.on_exit()
   end

   method ide_handle_open()
      ide.on_open_btn()
   end

   method ide_handle_save()
      ide.on_save_btn()
      ide.CurrentEditBox().handle_event()
    end

   method ide_next_tab()
      local i, fs, cs, ct
      fs := FileTabSet
      cs := FileTabSet.children
      ct := ide.CurrentTabItem()

      if  *cs = 1 then fail
      every i := 1 to *cs do if cs[i] === ct then break
      if (i > *cs) | (cs[i] ~=== ct) then fail
      if cs[*cs] === ct then
         fs.set_which_one(cs[1])
      else
         fs.set_which_one(cs[i+1])
   end

   method ide_prev_tab()
      local i, fs, cs, ct
      fs := FileTabSet
      cs := FileTabSet.children
      ct := ide.CurrentTabItem()

      if  *cs = 1 then fail
      every i := 1 to *cs do if cs[i] === ct then break
      if (i > *cs) | (cs[i] ~=== ct) then fail
      if cs[1] === ct then
         fs.set_which_one(cs[-1])
      else
         fs.set_which_one(cs[i-1])
   end

   method ide_key_file_menu()
      local m, b, r
      m := menubar.menu_bar_1.menus
      b := menubar.menu_bar_1
      uidlog.set_focus(b)
#      if not b.has_focus then
#         set_focus(b)
      if (r := !m).label == "File" then {
         if \b.which_open then {
            if b.which_open === r then
               b.set_which_open()
            else
               b.set_which_open(r)
            }
         else {
            b.set_which_open(r)
            }
       #  self.unique_end()
         }
   end

   method ide_key_help_menu()
      local m, b, r
      m := menubar.menu_bar_1.menus
      b := menubar.menu_bar_1
      uidlog.set_focus(b)
#      if not b.has_focus then
#         set_focus(b)
      if (r := !m).label == "Help" then {
         if \b.which_open then {
            if b.which_open === r then
               b.set_which_open()
            else
               b.set_which_open(r)
            }
         else {
            b.set_which_open(r)
            }
      #   self.unique_end()
         }
   end

   method on_close(ev)
      menubar.on_exit(ev)
   end

   method change(e)
#      write("The tabset selection changed.")
   end

   method setup()
      self.min_width := 645
      self.min_height := 485
      self.set_attribs("size="||width||","||height, "pos="||win_position,
		       "bg=pale gray",
		       "label=Unicon IDE", "font=mono,16", "resize=on")

      DevTabSet := TabSet()
      DevTabSet.set_pos("0", "100%-110")
      DevTabSet.set_size("100%", "110")
      tab_item_1 := TabItem()
      tab_item_1.set_label("Messages: (Single File Mode)")
      MsgBox := EditableTextList()
      MsgBox.set_pos("2", "2")
      MsgBox.set_size("100%-4", "100%-4")
      MsgBox.set_draw_border()
      MsgBox.set_attribs("bg=white", "font="||fontname)
      MsgBox.set_contents([""])
      tab_item_1.add(MsgBox)

      PtyBox := ShellETL()
      PtyBox.set_pos("2", "2")
      PtyBox.set_size("100%-4", "100%-4") 
      PtyBox.set_draw_border()
      PtyBox.set_attribs("bg=yellowish white", "font="||fontname)
      PtyBox.set_contents([""])
      tab_item_4 := TabItem()
      tab_item_4.set_label("Debug Messages: (Single File Mode)")
      tab_item_4.add(PtyBox)

      EditBox := BuffEditableTextList()
      EditBox.set_pos("2", "2")
      EditBox.set_size("100%-4", "100%-4")
      EditBox.set_draw_border()
      EditBox.set_attribs("bg="||ui_Preferences.val_background_color,
			  "font="||fontname)
      EditBox.set_contents([""])

      DevTabSet.add(tab_item_1)
      DevTabSet.set_which_one(tab_item_1)
      DevTabSet.add(tab_item_4)
      DevTabSet.connect(self, "change", SELECTION_CHANGED_EVENT)
      self.add(DevTabSet)
      
      FileTabSet := BufferTabSet()
      FileTabSet.set_pos("150", "9%")
      FileTabSet.set_size("100%-150", "100%-160")
      tab_item_2 := BufferTabItem()
      tab_item_2.set_label("scratch")
      tab_item_2.add(EditBox)
      FileTabSet.add(tab_item_2)
      FileTabSet.set_which_one(tab_item_2)
      self.add(FileTabSet)
      
      ClassTabSet := BufferTabSet()
      ClassTabSet.set_pos("0", "9%")
      ClassTabSet.set_size("150", "100%-160")
      tab_item_3 := TabItem()
      tab_item_3.set_label("Class Browser")
      FileBrowser := ClassBrowser()
      FileBrowser.set_pos("2", "2")
      FileBrowser.set_size("100%-4", "100%-4")
      FileBrowser.set_draw_border()
      FileBrowser.set_attribs("bg=white")
      FileBrowser.set_select_one()
      tab_item_3.add(FileBrowser)
      ClassTabSet.add(tab_item_3)
      ClassTabSet.set_which_one(tab_item_3)
      self.add(ClassTabSet)
      
      pnlToolbar := Panel()
      pnlToolbar.set_pos("0", "4.5%")
      pnlToolbar.set_size("100%", "4.5%")
      pnlToolbar.set_attribs("bg=light whitish gray", "resize=on", "font=mono,16")
      self.add(pnlToolbar)
      self.connect(self, "on_close", CLOSE_BUTTON_EVENT)
   end

initially(initfile)
   self.Dialog.initially()

   # contains the main ide functions
   ide := IDE(FileTabSet, ClassTabSet, FileBrowser)
   uidlog := self
   menubar := Mainbar(UProject())
   startfile := initfile
   gui::dispatcher := ptyDispatcher()
   return self
end

# outside of package UniconPackage, an IDE warning should be in the messagebox
procedure ui_Warning(s, lineno, filenam)
   local msg := ""
   if \filenam then msg := msg || filenam || ":"
   if \lineno then msg := msg || lineno || ":"
   msg ||:= ": " || s
   uidlog.MsgBox.set_contents([msg])
end

procedure ui_Progend(x)
    fail
end

procedure ui_trapint(x)
   uidlog.ide_handle_exit()
end

procedure main(argv)
   local d := argv[1]
   UIDE_VERS := "0.95"
   if not match("graphics", &features) then stop("Graphics not enabled")
   reinitialize()
   trap("SIGINT", ui_trapint)
   Progend := ui_Progend
   warning := ui_Warning

   if &features=="MS Windows NT" then {
      PATHSEP := "\\"
      is_MSWindows := 1
      }
   else {
      PATHSEP := "/"
      is_MSWindows := &null
      }

   d := UIDE(d)
   d.show_modal()
end

### Ivib-v2 layout ##
#class|Canvas|17|Name Table|table|integer|0|11|string|editable_text_lis
#t|integer|2|string|icon|integer|1|string|menu|integer|2|string|menu_ba
#r|integer|1|string|menu_separator|integer|1|string|panel|integer|1|str
#ing|tab_item|integer|4|string|tab_set|integer|3|string|text_list|integ
#er|2|string|text_menu_item|integer|18|string|tree|integer|1|SuperClass
# Name|string|Dialog|Import Name|string|gui|Button Groups|class|ButtonG
#roupSet|2|Parent Canvas|1|Boxes|list|0|Checkbox Groups|class|CheckBoxG
#roupSet|2|Parent Canvas|1|Boxes|list|0|Gen Indent|integer|3|Gen Main|i
#nteger|1|Gen Component Setup|integer|1|Gen Init Dialog|integer|1|Gen I
#nitially|integer|1|Dialog Struct|class|CDialog|4|Min Width|null|Min He
#ight|null|Ticker Rate|null|Attribs|list|4|string|bg=pale gray|string|l
#abel=Unicon IDE|string|font=mono,16|string|resize=on|Name|string|UIDE|
#Width|integer|750|Height|integer|560|Items|list|4|class|CanvasTabSet|2
#7|Parent Canvas|1|Name|string|DevTabSet|Class Name|string|TabSet|Impor
#t Name|string|gui|X Fix|null|Y Fix|null|W Fix|null|H Fix|null|W Defaul
#t|null|H Default|null|X Spec|string|0|Y Spec|string|100%-110|W Spec|st
#ring|100%|H Spec|string|110|X Align|string|l|Y Align|string|t|Is shade
#d|null|Is Button Subclass|null|Draw Border|null|Attribs|list|0|Tooltip
#|null|Accel|null|Event Handlers|list|0|Class Variable|integer|1|Parent
# Component|1|Children|list|1|class|CanvasTabItem|28|Parent Canvas|1|Na
#me|string|tab_item_1|Class Name|string|TabItem|Import Name|string|gui|
#X Fix|null|Y Fix|null|W Fix|null|H Fix|null|W Default|null|H Default|n
#ull|X Spec|integer|0|Y Spec|integer|0|W Spec|string|100%|H Spec|string
#|100%|X Align|string|l|Y Align|string|t|Is shaded|null|Is Button Subcl
#ass|null|Draw Border|null|Attribs|list|0|Tooltip|null|Accel|null|Event
# Handlers|null|Class Variable|integer|1|Parent Component|10|Label|stri
#ng|Messages: (Single File Mode)|Parent TabSet|10|Children|list|1|class
#|CanvasEditableTextList|26|Parent Canvas|1|Name|string|MsgBox|Class Na
#me|string|EditableTextList|Import Name|string|gui|X Fix|null|Y Fix|nul
#l|W Fix|null|H Fix|null|W Default|null|H Default|null|X Spec|string|2|
#Y Spec|string|2|W Spec|string|100%-4|H Spec|string|100%-4|X Align|stri
#ng|l|Y Align|string|t|Is shaded|null|Is Button Subclass|null|Draw Bord
#er|integer|1|Attribs|list|1|string|bg=white|Tooltip|null|Accel|null|Ev
#ent Handlers|list|0|Class Variable|integer|1|Parent Component|14|Conte
#nts|list|1|string||Which One|14|class|CanvasTabSet|27|Parent Canvas|1|
#Name|string|FileTabSet|Class Name|string|BufferTabSet|Import Name|stri
#ng|gui|X Fix|null|Y Fix|null|W Fix|null|H Fix|null|W Default|null|H De
#fault|null|X Spec|string|150|Y Spec|string|9%|W Spec|string|100%-150|H
# Spec|string|100%-160|X Align|string|l|Y Align|string|t|Is shaded|null
#|Is Button Subclass|null|Draw Border|null|Attribs|list|0|Tooltip|null|
#Accel|null|Event Handlers|list|0|Class Variable|integer|1|Parent Compo
#nent|1|Children|list|1|class|CanvasTabItem|28|Parent Canvas|1|Name|str
#ing|tab_item_2|Class Name|string|TabItem|Import Name|string|gui|X Fix|
#null|Y Fix|null|W Fix|null|H Fix|null|W Default|null|H Default|null|X 
#Spec|integer|0|Y Spec|integer|0|W Spec|string|100%|H Spec|string|100%|
#X Align|string|l|Y Align|string|t|Is shaded|null|Is Button Subclass|nu
#ll|Draw Border|null|Attribs|list|0|Tooltip|null|Accel|null|Event Handl
#ers|null|Class Variable|integer|1|Parent Component|21|Label|string|scr
#atch|Parent TabSet|21|Children|list|1|class|CanvasEditableTextList|26|
#Parent Canvas|1|Name|string|EditBox|Class Name|string|BuffEditableText
#List|Import Name|string|gui|X Fix|null|Y Fix|null|W Fix|null|H Fix|nul
#l|W Default|null|H Default|null|X Spec|string|2|Y Spec|string|2|W Spec
#|string|100%-4|H Spec|string|100%-4|X Align|string|l|Y Align|string|t|
#Is shaded|null|Is Button Subclass|null|Draw Border|integer|1|Attribs|l
#ist|1|string|bg=white|Tooltip|null|Accel|null|Event Handlers|list|0|Cl
#ass Variable|integer|1|Parent Component|25|Contents|list|1|string||Whi
#ch One|25|class|CanvasTabSet|27|Parent Canvas|1|Name|string|ClassTabSe
#t|Class Name|string|BufferTabSet|Import Name|string|gui|X Fix|null|Y F
#ix|null|W Fix|null|H Fix|null|W Default|null|H Default|null|X Spec|str
#ing|0|Y Spec|string|9%|W Spec|string|150|H Spec|string|100%-160|X Alig
#n|string|l|Y Align|string|t|Is shaded|null|Is Button Subclass|null|Dra
#w Border|null|Attribs|list|0|Tooltip|null|Accel|null|Event Handlers|li
#st|0|Class Variable|integer|1|Parent Component|1|Children|list|1|class
#|CanvasTabItem|28|Parent Canvas|1|Name|string|tab_item_3|Class Name|st
#ring|TabItem|Import Name|string|gui|X Fix|null|Y Fix|null|W Fix|null|H
# Fix|null|W Default|null|H Default|null|X Spec|integer|0|Y Spec|intege
#r|0|W Spec|string|100%|H Spec|string|100%|X Align|string|l|Y Align|str
#ing|t|Is shaded|null|Is Button Subclass|null|Draw Border|null|Attribs|
#list|0|Tooltip|null|Accel|null|Event Handlers|null|Class Variable|inte
#ger|1|Parent Component|32|Label|string|Class Browser|Parent TabSet|32|
#Children|list|1|class|CanvasTree|29|Parent Canvas|1|Name|string|FileBr
#owser|Class Name|string|ClassBrowser|Import Name|string|gui|X Fix|null
#|Y Fix|null|W Fix|null|H Fix|null|W Default|null|H Default|null|X Spec
#|string|2|Y Spec|string|2|W Spec|string|100%-4|H Spec|string|100%-4|X 
#Align|string|l|Y Align|string|t|Is shaded|null|Is Button Subclass|null
#|Draw Border|integer|1|Attribs|list|1|string|bg=white|Tooltip|null|Acc
#el|null|Event Handlers|list|0|Class Variable|integer|1|Parent Componen
#t|36|Select One|integer|1|Select Many|null|Show Root Handles|integer|1
#|Show Root|integer|1|Which One|36|class|CanvasPanel|26|Parent Canvas|1
#|Name|string|pnlToolbar|Class Name|string|Panel|Import Name|string|gui
#|X Fix|null|Y Fix|null|W Fix|null|H Fix|null|W Default|null|H Default|
#null|X Spec|string|0|Y Spec|string|4.5%|W Spec|string|100%|H Spec|stri
#ng|4.5%|X Align|string|l|Y Align|string|t|Is shaded|null|Is Button Sub
#class|null|Draw Border|null|Attribs|list|0|Tooltip|null|Accel|null|Eve
#nt Handlers|list|0|Class Variable|integer|1|Parent Component|1|Childre
#n|list|0|Initial Focus|null|Event Handlers|list|1|list|2|string|CLOSE_
#BUTTON_EVENT|string|on_close|
