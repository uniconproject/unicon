#
# unicon.icn - main module for the Unicon OOP preprocessor
#
# SYNOPSIS:
#
#   unicon prog[.icn] ... [-x args ]
#   prog
#
# FILES:
#
#   ./prog.icn                     : Unicon source code
#   ./uniclass.{dir,pag}           : class/inheritance database
#
# SEE ALSO:
#
#   "Programming with Unicon", draft manuscript, 460pp.
#   serves as user's guide and reference manual for Unicon
#
### Global variables
#
# FILES  : fin = input (.iol) file, fout = output (.icn) file
# CSETS  : alpha = identifier characters, nonalpha = everything else
#          alphadot = identifiers + '.'
#          white = whitespace, nonwhite = everything else
# TAQUES : classes in this module
# FLAGS  : comp if we should try to make an executable from args[1]
#          strict if we should generate paranoic encapsulation protection
#          loud if we should generate extra console messages
#          xec if we should run the result after translation
# LISTS  : links = names of external icon code to link to
#          imports = names of external classes to import
#

global parsingErrors, returnErrorsFlag, dbg, fset

global fin,flog,flogname,fLine,alpha,alphadot,white,nonwhite,nonalpha
global classes,comp,xec,strict,links,imports,loud,ct,reserved,optimize
global icontopt,ilinkopt,tempenv,tmpcount, exename,widollog,tmpname,silent
global yydbg, yyout, linkline, translateducode, imported, imported_classes
global warnings

#
# These globals for -C
#
global iconc, iconc_links, iconc_parsed, iconc_imports
global iconc_posixloc, iconc_parsed_posix, iconc_perifile_idx
global iconc_fd # if iconc is used, add the -fd option (off by default)
global no_iconc_fs # don't add -fs by default, if iconc is used
global iconc_import # suppress writing to uniclass files if \iconc_import
link basename, io, paths

$define MERRADDRESS "jeffery@cs.nmt.edu"
global merrflag, merraddress, uni_predefs

$ifdef _MS_WINDOWS_NT
$define PATHCHAR "\\"
$else
$define PATHCHAR "/"
$endif

procedure istop(args[])
   if push(args, \flog) then {
      write ! args
      pop(args)
      close( flog ) # if close(flog) then @ &main
      moveto(flogname, widollog)
      }
   if \loud then stop ! args
   else exit(1)
end

procedure iwrite(args[])
   if \loud then {
      if /silent | *parsingErrors>0 then
         write ! args
      }
  if \flog then {
      if args[1] === &errout then
          pop(args)
      push(args, flog)
      write ! args
  }
  return args[-1]|""
end

procedure iwrites(args[])
   if \loud then {
      if (/silent | *parsingErrors>0) then
         writes ! args
      }

   if \flog then {
       if args[1] === &errout then
           pop(args)
       push(args, flog)
       writes ! args
   }
  return args[-1]|""
end

procedure iconc_make_exename_opt(args)
   local rslt
   local i, arg
   local cmpnts

   rslt := "-o "
   i := 1
   while i <= *args do {
      arg := args[i]
      if arg == "-v" then {
         i +:= 2
         next
         }
      else if arg[1] == "-" then {
         i +:= 1
         next
         }
      cmpnts := suffix(arg)
      rslt ||:= cmpnts[1]
      rslt ||:= " "
      break
      }
   if rslt == "-o " then rslt ||:= "a.out"
   return rslt
end

procedure calc_posix_loc()
   local prefix
   if \(prefix := ulibprefix()) then
      iconc_posixloc := (prefix || "ipl" || PATHCHAR ||  "procs" || PATHCHAR || "posix.icn")
   else
       istop("cannot calculate location of posix.icn relative to iconx")
end

procedure iconc_linkref_resolve(srcfname, ref)
   static lpaths, ipaths, sep
   local i, f, path, base, comps, rslt, fil

   initial {
      sep := PATHCHAR
      lpaths := lpaths_get()
      ipaths := ipaths_get()
      if /iconc_posixloc then calc_posix_loc()
      }

   if ref[1] == '"' then
      # strip quotes
      ref := ref[2:-1]

   rslt := []
   comps := tail(ref)
   ca_add_link(srcfname, ref)
   #
   # try the raw ref first
   #
   if (map(ref[-4:0])==".icn") & (f := open(ref)) then {
      close(f)
      put(rslt, ref)
      return rslt
      }

   #
   # try the raw ref .icn next
   #
   if f := open(ref || ".icn") then {
      close(f)
      put(rslt, ref || ".icn")
      return rslt
      }

   if not (comps[1] == "") then {
      #
      # This linkref has a path-spec.
      #
      comps := suffix(ref)
      comps[2] := ".icn"
      if f := open(comps[1] || comps[2]) then {
         close(f)
         put(rslt, (comps[1] || comps[2]))
         return rslt
         }
      #
      # Couldn't find the ref specified.
      #
      return &null
      }

   #
   # mdw:
   # This is a hack to circumvent the conventional
   # link resolution facility and ensure that we parse
   # the iconc-compatible posix.icn.  This will have
   # to be revisited.
   #
   # begin hack
   if ref == "posix" then
      return [iconc_posixloc]
   # end hack

   base := comps[2]
   comps := tail(srcfname)
   path := comps[1] || sep
   if f := open(path || base || ".icn") then {
      close(f)
      put(rslt, (path || base || ".icn"))
      return rslt
      }

   #
   # Either the ref is an .icn file in the LPATH corresponding to
   # some .u file on the IPATH, or it is invalid.
   #
   if f := open(fil := ((!lpaths | !ipaths) || sep || ref || ".icn")) then {
      close(f)
      }
   else {
      #
      # The ref is invalid.
      #
      return &null
      }

   #
   # We found a .icn for the ref, so assume that
   # a .u exists for it and the ref is valid.
   #
   put(rslt, fil)

   return rslt
end

procedure iconc_importref_resolve(ref)
   static sep, ipaths
   local i, k, f, entry, rslt

   initial {
      sep := PATHCHAR
      ipaths := ipaths_get()
   }

   # write("iconc_importref_resolve(" || ref || ")...")
   rslt := []

   #
   # Search for an ndbm entry containing this ref.
   #
   every i := 1 to *ipaths do {
      # write("trying " || ipaths[i] || "/" || "uniclass...")
      if not (f := open(ipaths[i] || sep || "uniclass", "dr")) then {
         # write("  open failed.")
         next
         }
      if not (entry := fetch(f, ref)) then {
         # write("  fetch failed.")
         close(f)
         f := &null
         next
         }
      close(f)
      break
      }

   if i = *ipaths & /f then
      return rslt

   #
   # parse the ndbm entry, adding its files into rslt[]
   #
   entry ? {
      tab(upto(':'))
      tab(many(' :'))
      while put(rslt, (ipaths[i] || sep || tab(upto(':')))) do
         tab(many(' :'))
      if k := find("(") then
         put(rslt, (ipaths[i] || sep || tab(k)))
      else
         put(rslt, (ipaths[i] || sep || tab(0)))
      }

   return rslt
end

procedure iconc_yyparse(fname, tmplist)
   local pe, rv
   yyfilename := outfilename := fname
   yyin := ""
   every yyin ||:= preprocessor(fname, uni_predefs) do
      yyin ||:= "\n"
   if preproc_err_count > 0 then {
      every pe := !parsingErrors do {
         write(&errout, pe.errorMessage)
         }
      stop()      # force error exit (abruptly)
      }
   yylex_reinit()
   if /yydbg then {
      tmpname := tempname("uni",,,5)
      yyout := open(tmpname, "w") |
         stop("can't open temporary file ",tmpname," for writing")
      put(tmplist, tmpname)
      }
   else
      yyout := &output
   /iconc_perifile_idx := *tmplist
   write(yyout, "#line 0 \"", fname, "\"")
   iwrites(&errout, "Parsing ", fname ,": ")
   ca_assoc(fname, tmpname)
   rv := yyparse()
   if not (*\parsingErrors > 0) then iwrite(&errout)
   else {
      # we got some errors. In the old days they wrote themselves out, but
      # in order be IDE friendly, we now do this after yyparse finishes.
      every pe := !parsingErrors do {
         write(&errout, pe.errorMessage)
         }
      }
   if /yydbg then
      close(yyout)
   reinitialize()
end

procedure get_abs_file_name(fname)
   local pair, cwd, rslt

   pair := tail(fname)
   if pair[1] == "" then
      pair[1] := "."
   cwd := chdir()
   if not (rslt := chdir(pair[1])) then {
      halt("chdir(", image(pair[1]|fname), ") failed: ", &errortext)
      }
   chdir(cwd)
   if not (rslt[-1] == PATHCHAR) then
      rslt ||:= PATHCHAR
   rslt ||:= pair[2]
   return rslt
end


#
# initialize global variables
#
procedure initialize()
   loud     := 1
#  comp     := 0 # moved to unicon()
   yynerrs  := 0
   errors   := 0

   returnErrorsFlag := 0
   parsingErrors := []

   merraddress := MERRADDRESS
   alpha    := &ucase ++ &lcase ++ '_' ++ &digits
   nonalpha := &cset -- alpha
   alphadot := alpha ++ '.'
   white    := ' \t\f\r'
   nonwhite := &cset -- white
   reinitialize()
   ilinkopt := ""
   linkline := ""
   tmpcount := 0
   reserved := " fi neht esle yreve elihw od ot yb "
   flogname := tempname("uni",,,5)
   if widollog := getenv("WIDOLLOG") then flog := open(flogname,"w")
   uni_predefs := predefs()
   sysinitialize()
   iconc_import := &null
end

procedure unicon_usage(continue_flag)
   local f, msg
   if \continue_flag then f := iwrite else f := istop
   msg := "Usage: unicon [-cBCstuEGyZMhRK] [-Dsym=val] [-f[adelns]...] [-o ofile]\n   _
            [-nofs] [-help] [-version] [-features] [-v i] file... [-x args]"
   f(msg)
end

procedure unicon_help()
   unicon_usage(1)
   every iwrite ( ! [
   "options may be one of:",
   "   -B          : bundle VM (iconx) into executable",
   "   -c          : compile only, do not link",
   "   -C          : generate (optimized) C code executable",
   "   -Dsym[=val] : define preprocessor symbol",
   "   -e efile    : redirect icont's standard error output to efile",
   "   -E          : preprocess only, do not compile",
   "   -features   : report Unicon features supported in this build",
   "   -fs         : prevent removal of unreferenced declarations",
   "   -G          : generate graphics (wiconx) executable",
   "   -M          : report error message to the authorities",
   "   -o ofile    : generate executable named ofile",
   "   -O          : optimize (under construction)",
   "   -s          : work silently",
   "   -t          : turn on tracing",
   "   -u          : warn of undeclared variables",
   "   -v i        : set diagnostic verbosity level to i",
   "   -version    : report Unicon version",
   "   -x args     : execute immediately",
   "   -y          : parse (syntax check) only, do not compile",
   "   -Z          : compress icode",
   "   -K          : keep tmpfiles",
   "   -h          : display this information"
   ] )
   istop()
end

procedure handle_D(arg)
   local def, sym
   arg ? {
      move(2)
      if sym := tab(find("=")) then {
         move(1)
         def := tab(0)
         }
      else {
         sym := tab(0)
         def := "1"
         }
      uni_predefs[sym] := def
      }
end

procedure handle_C(arg)
   local tmpopt
   #
   # Generate code suitable for consumption by iconc.
   #
   if comp === -1 then {
      istop("conflicting requests for -c and -C")
      }

   iconc := 1
   if *arg > 2 then
      tmpopt := "-U" || arg[3:0] || " "
   else
      tmpopt := "-U1 "
   if /icontopt then
      icontopt := tmpopt
   else
      icontopt ||:= tmpopt
   calc_posix_loc()
end

procedure versionLine()
   static vline
   local latest, LTB, LTBchars, v
   initial {
      v := []
      every put(v, &version)
      LTBchars := '0123456789.'
      vline := v[1] || " ("
      v[2]? {
         latest := tab(many(LTBchars))
         if = "-" then {
            if "0" == tab(many(&digits)) then { # Latest commit is tagged
               # Use the tag name (in latest) to decide the annotation
               dots := 0; every find(".",latest) do dots +:= 1
               case dots of {
                  default: { vline ||:= latest; vline ||:= " Maintenance Release)"}
                  0:       { vline ||:= v[2];   vline ||:= " Development)"}
                  1:       { vline ||:= "Release)"}
               }
            } else { # Latest commit is not tagged
               if v[3] == "master" then {
                  vline ||:= v[2]; vline ||:= " pre-release)"
               } else { # Use the branch name (in v[3]) to decide the annotation
                  v[3] ? {
                     LTB := tab(many(LTBchars))
                     if \LTB == v[3] then {
                        vline ||:= v[2]; vline ||:= " Maintenance pre-release)"
                     } else {
                        vline ||:= v[2]; vline ||:= " Development \""
                        vline ||:= v[3]; vline ||:= "\")"
                     }
                  }
               }
            }
         } else { # We don't understand the output of git describe
            vline ||:= v[2]; vline ||:= ")"
         }
      }
   }

   return vline
end

procedure unicon(argv)
   local tmpfnames, tmpopt, skip, parseonly,
      EmptyNode, N_Empty, i, thepath, tmp_s, ucodefile,
      cmd, wilog, flog2, locallinks, localimports, k,
      files, n, local_name, v, mw_tmpname, rv, pe

   fset:='s'  # doing -fs by default now
# before initialize, set global option vars:
   comp := 0
   every !argv ?
       case ="-" & move(1) of {
          "x" : break  # after -x, args are for execution
          "C" : iconc := parseonly := 1
          "c" : comp := -1        # don't make exe
          "f" : fset ++:= tab(0)
          "n" : ="ofs" & fset --:= "s" # -nofs, remove s
          }


   initialize()
   if *argv = 0 then {
      unicon_usage()
      }

   EmptyNode := leaf(N_Empty)
   /yydebug := 0

   tmpfnames := []
   iconc_links := table()
   iconc_parsed := table()
   iconc_imports := table()
   ca_init()

   every i := 1 to *argv do {
      # after -x, args are for execution
      # so we break out if we hit -x and pass the remianing options down
      #

      if \skip then { # if we forward processed this argument then skip it
         skip := &null
         next
         }

      if argv[i][1] == "-" & *argv[i]>1 then {
         if match("-D", argv[i]) then # symbols
            handle_D(argv[i])
         else if match ("-C", argv[i]) then{ # iconc
            handle_C(argv[i])
            parseonly := 1
            }
         else
            case argv[i] of {
               "-c"   : {
                  sysok := &null
                  if comp = 0 then comp := -1        # don't make exe
                  if iconc === 1 then
                     istop("conflicting requests for -c and -C")
                  }
               "-quiet"  : loud := &null
               "-s"      : {
                  silent := 1
                  icontopt ||:= "-s "
                  ilinkopt ||:= "-s "
                  }
               "-K"      : {
                  icontopt ||:= "-K "
                  keeptmp := 1
                  }
               "-log"  : {
                  if (i=1) | (argv[i-1] ~=== "-log") then {
                     if widollog := argv[i+1] then {
                        /flog := open(flogname, "w") |
                           write(&errout, "couldn't write log to ",image(flogname))
                        }
                     argv[i+1] := "-log"
                     }
                  }
               "-version": {
                  iwrite(versionLine())
                  return 0
                  }
               "-features": {
                  iwrite(versionLine())
                  every iwrite(&features)
                  return 0
                  }
               "-x"      : { xec := i; break } # exit the every loop
               #
               # Really, -e should redirect *our* stderr output, and then
               # tell the icont invocation to append its stderr output.
               #
               "-e"      : {
                  if (i=1) | (argv[i-1]) ~=== "-e" then {
                     icontopt ||:= "-e " || quotes(argv[i+1])
                     argv[i+1] := "-e"
                     }
                  }
               "-o"      : {
                  if (i=1) | (argv[i-1] ~=== "-o") then {
                     exename := " -o " || quotes(argv[i+1]) || " "
                     argv[i+1] := "-o"
                     }
                  }
               "-O": optimize := 1
               # -I and -L: add argv[i+1] to LPATH or IPATH, respectively
               "-I"|"-L": {
                  if argv[i] == "-I" then thepath := "LPATH" else thepath := "IPATH"
                  if (i=1) | (argv[i-1] ~=== argv[i]) then {
                     tmp_s := argv[i+1]
                     argv[i+1] := argv[i]
                     tmp_s ||:= " " || getenv(thepath)
                     setenv(thepath, tmp_s) | write(&errout, "setenv failed")
                     }
                  }
               "-y": parseonly := 1
               "-yydbg": parseonly := yydbg := 1
               "-G"|"-B"|"-Z": ilinkopt ||:= argv[i] || " "
               "-v" : {
                  if i = *argv then
                     stop("missing verbosity value after -v")

                  varg := (integer(argv[i+1]) || " ") |
                     stop("bad verbosity value: ", image(argv[i+1]))

                  icontopt ||:= argv[i] || varg
                  ilinkopt ||:= argv[i] || varg

                  if integer(argv[i+1]) = 0 then
                     silent := 1

                  skip := 1
                  }
               "-v0": {
                  ilinkopt ||:= "-v0 "
                  icontopt ||:= "-v0 "
                  silent := 1
                  }
               "-v1"|"-v2"|"-v3" : {
                  ilinkopt ||:= argv[i] || " "
                  icontopt ||:= argv[i] || " "
                  }

               "-nofs": no_iconc_fs := 1
               "-M" : merrflag := 1
               "-r" : returnErrorsFlag := 1
               "-h" | "-help" | "--help" | "-?": unicon_help()
               default   : icontopt ||:= argv[i] || " "
               } # case
         }
      else {   #the argument isn't an option
         yyfilename := argv[i] | stop("usage: unicon file")
         if yyfilename == "-" then yyfilename := "_stdin.icn"

         if not (map(yyfilename[find(".", yyfilename)+1 : 0])== ("icn"|"u"|"u1"|"u2")) then
            yyfilename ||:= ".icn"

         # do not translate .u files
         if map(yyfilename[find(".", yyfilename)+1 : 0]) == ("u"|"u1"|"u2") then {
             linkline ||:= " " || quotes(yyfilename)
             if \iconc then {
                insert(iconc_links, yyfilename)
                }
             next
         }
         else {
            # we are gonna translate, and if we link, we remove the .u
            ucodefile := basename(yyfilename, ".icn") || ".u"
            linkline ||:= " " || quotes(ucodefile)
            /translateducode := []
            put(translateducode, ucodefile)
            }
         if \iconc then {
            # mark this file as parsed
            insert(iconc_parsed, get_abs_file_name(yyfilename))
            }

         outfilename := yyfilename
         yyin := ""
         every yyin ||:= preprocessor(yyfilename, uni_predefs) do yyin ||:= "\n"
         if preproc_err_count > 0 then {
            every pe := !parsingErrors do {
               write(&errout, pe.errorMessage)
               }
            stop()      # force error exit (abruptly)
            }
         yylex_reinit()
         cmd := selecticont()
         if &features=="MS Windows NT" & &features=="console window" then{
            wilog := tempname("uni",".tmp",,)
            cmd ||:= " -l "|| wilog
            }
         cmd ||:= " -c "||icontopt||" -O "|| quotes(yyfilename) ||" "
         if /yydbg then {
            tmpname := tempname("uni",,,5)
            yyout := open(tmpname, "w") |
               stop("can't open temporary file ",tmpname," for writing")
            put(tmpfnames, tmpname)
            ca_assoc(yyfilename, tmpname)
            }
         else yyout := &output

         write(yyout, "#line 0 \"", yyfilename, "\"")
         iwrites(&errout, "Parsing ", yyfilename ,": ")
         rv := yyparse()
         if not (*\parsingErrors > 0) then iwrite(&errout)
         else {
            every pe := !parsingErrors do {
               iwrite(&errout, pe.errorMessage)
               }
            }
         if /yydbg then
            close(yyout)
         if (rv = errors = 0) & (not (*\parsingErrors > 0)) & /parseonly then {
             rv := mysystem(cmd || tmpname)
             if rv ~=== 0 then yynerrs +:= 1
             if &features=="MS Windows NT" & &features=="console window" then {
                # copy icont log to our console
                every 1 to 5 do {
                    if flog2 := open(wilog) then {
                        while iwrite(&errout, read(flog2))
                        close(flog2)
                        /keeptmp & remove(wilog) | write(&errout, wilog, " - wilog B not removed.")
                        break
                    }
                    delay(1000)
                }
            }
         }

         if /iconc then {
            /keeptmp & /tmpname | remove(tmpname) |
            iwrite(&errout,"remove ", image(tmpname), " fails")
            }
         reinitialize()
         }    # the argument doesn't start with "-"
      } # every argument

   if /yyfilename & not find(" - ", icontopt) then {
      write(&errout, "unicon: error: no input file")
      unicon_usage()
      }


   #
   # If this output is intended for consumption by iconc, suck in
   # all files associated with link-refs and import-refs, and yyparse
   # each of said files once.
   #
   if \iconc then {
      iconc_import := 1   # suppress writing to uniclass databases
      locallinks := table()
      localimports := table()
      while (*iconc_links > 0) | (*iconc_imports > 0) do {
         while *iconc_imports > 0 do {
            every k := key(iconc_imports) do {
               if member(localimports, k) then {
                  # write("mdw: redundant import: " || k)
                  delete(iconc_imports, k)
                  next
                  }

               #
               # mark this importref as having been processed
               #
               insert(localimports, k)
               delete(iconc_imports, k)

               #
               # get the list of files for this importref
               #
               if /(files := iconc_importref_resolve(k)) then
                  stop(k || ": unresolved import reference.")

               #
               # yyparse each file associated with this importref,
               # unless the file has been previously yyparsed
               #
               every n := 1 to *files do {
                  # inode := stat(files[n]).ino
                  local_name := get_abs_file_name(files[n])
                  # if member(iconc_parsed, inode) then
                  if member(iconc_parsed, local_name) then {
                     write("file \"" || local_name || "\" already parsed.")
                          next # this file has already been parsed
                     }
                  #insert(iconc_parsed, inode)
                  insert(iconc_parsed, local_name)
                  iconc_yyparse(files[n], tmpfnames)
                  }
               }
            }

         while *iconc_links > 0 do {
            every k := key(iconc_links) do {
               if k == "posix" then
                  iconc_parsed_posix := 1
               if member(locallinks, k) then {
                  delete(iconc_links, k)
                  next
                  }

               #
               # get the value associated with this key
               #
               v := iconc_links[k]
               if /v | v=="" then stop ("bad srcfname:v: "||image(v)||" for key k="||k|| " (*.u with -C?) ")
               #
               # mark this linkref as having been processed
               #
               insert(locallinks, k)
               delete(iconc_links, k)

               #
               # get the list of files for this linkref
               #
               if /(files := iconc_linkref_resolve(v, k)) then
                  stop(k || ": unresolved link reference.")

               #
               # yyparse each file associated with this linkref,
               # unless the file has been previously yyparsed
               #
               every n := 1 to *files do {
                  local_name := get_abs_file_name(files[n])
                  if member(iconc_parsed, local_name) then
                     next # this file has already been parsed
                  insert(iconc_parsed, local_name)
                  iconc_yyparse(files[n], tmpfnames)
                  }
               }
            }
         }
      if /iconc_parsed_posix then
         iconc_yyparse(iconc_posixloc, tmpfnames)
      iconc_import := &null     # Allow writing to uniclass databases
      }

   if \iconc & (*tmpfnames > 0) & (\rv = errors = yynerrs = 0) then {
      # transform idol output for iconc
      every k := 1 to *tmpfnames do
         cfy(tmpfnames[k], (tmpfnames[k] || "-iconc"));
      cmd := (getenv("ICONC")|"iconc") || " "
      cmd ||:= \icontopt
      if \iconc_fd & (not find("-fd", icontopt)) then cmd ||:= " -fd "
      if /no_iconc_fs & (not find("-fs", icontopt)) then cmd ||:= " -fs "
      cmd ||:= \ilinkopt

      # create exename (and option) if none supplied
      if /exename then {
         exename := iconc_make_exename_opt(argv)
         }
      cmd ||:= \exename
      if \iconc_perifile_idx then {
         mw_tmpname := tempname("uni",,, 5)
         ca_write(mw_tmpname, tmpfnames[iconc_perifile_idx])
         cmd ||:= " -A " || mw_tmpname || " "
         }
      every k := 1 to *tmpfnames do {
         cmd ||:= tmpfnames[k]
         cmd ||:= "-iconc "
         }

      rv := mysystem(cmd)

      # remove temporary files unless asked not to (by -K)
      /keeptmp & every remove(!tmpfnames || "-iconc")
      /keeptmp & every remove(!tmpfnames)
      /keeptmp & remove(\ mw_tmpname)

      if rv ~=== 0 then
         errors +:= 1

      if errors = 0 & \xec then {
         if cmd := \exename then {
            if match("-o ", cmd) then cmd[1:4] := ""
            if not (any('/\\', cmd) | (cmd[any(&letters,cmd)]==":")) then
               cmd := "./" || cmd
            every cmd ||:= " " || argv[xec+1 to *argv]
            rv := system(cmd)
            }
         }
      }
   else

   if /parseonly & (comp = errors = yynerrs = 0) &
      (not (*\parsingErrors > 0)) & (not find("-E", icontopt)) then {
      cmd := selecticont()
      if &features=="MS Windows NT" & &features=="console window" then
         cmd ||:= " -l "|| (wilog := tempname("uni",".tmp",,))
      cmd ||:= " "
      if \exename then cmd ||:= exename
      cmd ||:= ilinkopt
      cmd ||:= linkline
      if \xec then {
         every cmd ||:= " " || argv[xec to *argv]
         }

      rv := mysystem(cmd)
      if rv === 0 then {
         # if no errors, and we linked them from source, remove the .u
         /keeptmp & every remove(!\translateducode)
         }
      if &features=="MS Windows NT" & &features=="console window" then {
         # copy icont log to our console
         every j := 1 to 5 do {
            if flog2 := open(wilog) then {
               while iwrite(&errout, read(flog2))
               close(flog2)
               /keeptmp & remove(wilog) | write(&errout, wilog, " wilog not removed.")
               break
               }
            delay(1000)
            }
         }
      }
   if \flog then {
      close(flog)
      moveto(flogname, widollog)
      }

   # Produce a non-zero exit code if there were any errors.
   if errors + yynerrs > 0 then {
      if \returnErrorsFlag = 1 then
         return parsingErrors
      else
         return 1
      }

   # If we run the program then return its exit code
   if \xec then
      return rv

   return 0
end
#
# error/warning/message handling
#
procedure halt(args[])
   errsrc()
   every iwrites(&errout,!args)
   istop()
end

procedure errsrc()
   iwrites(&errout,"File ",\yyfilename,"; Line ",\fLine,": Unicon/")
end

#
# Canonize a path.  This involves :-
#   - lower-casing the name (Windows only)
#   - changing backslashes to forward slashes (Windows)
#   - expanding non-absolute paths to absolute ones using chdir()
#   - adding a trailing /
#   - removing any ".." or "." directories
#
procedure canonize(path)
   local res, cd

   path := map(path, "\\", "/")

$ifdef _MS_WINDOWS_NT
   path := map(path)
   if not (path[1:3] == "//" | path[2:4] == ":/") then {
      cd := map(chdir(), "\\", "/")
      if path[1] == "/" then
         # Root of current drive.
         path := cd[1:3] || path
      else
         path := cd || "/" || path
      }
$else
   if path[1] ~== "/" then
      path := chdir() || "/" || path
$endif

   if path[-1] ~== "/" then
      path ||:= "/"
   res := ""
   path ? repeat {
      res ||:= tab(upto('/') | 0)
      if pos(0) then
         break
      if match("/../") then {
         move(3)
         while res[-1] ~== "/" do
            res[-1] := ""
         res[-1] := ""
         }
      else if match("/./") then
         move(2)
      else
         res ||:= move(1)
      }
   return res
end

procedure writelink(dir, s)
   if \iconc then {
      # do not generate linkrefs in
      # code that will be sent to iconc...
      return
      }
   if map(s[-4:0]) == ".icn" then
      s[-4:0] := ""
   write(yyout,"link \"",canonize(dir),map(s,'\\','/'),"\"")
   outline +:= 1
end
procedure trans(argstr, prefix)
   if find("iconc", mygetenv("ICONT")) then return # iconc --> don't translate
   return icont(" -c "||argstr, prefix)
end

procedure icont(argstr,prefix)
   local myfile, rv
   static trans, logger
   initial {
      trans := selecticont()
      logger := mygetenv("WICONLOG") | (getenv("TEMP")||"\\winicon.log")
      }
   if \logger then
      remove(logger) | write( logger, " - log not removed.")

   rv := mysystem((\prefix|"") || trans || icontopt || argstr)
   if \flog then {
      if \logger then {
         if myfile := open(logger) then {
            while write(flog, read(myfile))
            close(myfile)
            }
         }
      }
   return rv
end
procedure mygetenv(s)
   return if &features == "environment variables" then getenv(s)
end

procedure moveto(src, dest)
   local f1, f2
   f1 := open(src) | { write(&errout, src, " - cannot be opened for reading"); fail }
   f2 := open(dest,"w") | { write(&errout, dest, " - cannot be opened for writing"); fail }
   while(write(f2,read(f1)))
   close(f1)
   close(f2)
   remove(src) | write(&errout, src, " - src not removed.")
   return
end

# find the icont to use. An ICONT variable overrides defaults.
procedure selecticont()
local cmd, dash_s
   if not (cmd := mygetenv("ICONT")) then {

      #
      # if we find binaries via path search, use them; otherwise
      # try for binaries directory via &progname.  Won't be very
      # successful
      #
      cmd := ((&features ? (="Binaries at " & tab(0))) |
              (&progname ? tab(find("unicon"))) | "")

      if &features=="MS Windows NT" then {
         if (cmd ~== "") & (not (cmd[-1] == "\\")) then cmd ||:= "\\"
         if &features=="console window" then {
            if stat(cmd || "wunicont.exe") then
                cmd ||:= "wunicont.exe"
            else
                cmd ||:= "wicont.exe"

            dash_s:=1
            }
         else
            if stat(cmd || "unicont.exe") then
                cmd ||:= "unicont.exe"
            else
                cmd ||:= "icont.exe"
         }
      else {
          if (cmd ~== "") & (not (cmd[-1] == "/")) then cmd ||:= "/"
          if stat(cmd || "unicont") then
              cmd ||:= "unicont"
          else
              cmd ||:= "icont"
         }
      }

   cmd := quotes(cmd)

   if not stat(cmd) then
      write("warning: no icont found thought it would be\n\t", cmd)

   if \dash_s then cmd ||:= " -s"

   return cmd
end

procedure warn(args[])
   errsrc()
   every iwrites(&errout,!args)
   iwrite(&errout)
end

procedure warning(s, lineno, filenam, text)
   /warnings := 0
   /errors := 0
   if warnings + errors = 0 then iwrite(&errout)
   iwrites(&errout, \(filenam|yyfilename), ":")
   iwrite(&errout, \lineno|yylineno, ": # \"", \text|yytext, "\": ", s)
   warnings +:= 1
end

procedure quotes(s)
   if find(" ", s) then s := "\"" || s || "\""
   return s
end
