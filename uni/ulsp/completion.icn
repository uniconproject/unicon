package ulsp

import json

class CompletionHandler(
   workspace,
   params
   )

   method setVariables(new_workspace, new_params)
      workspace := new_workspace
      params := new_params
   end

   method run()
      local _context, line, character, results_table, results, desired_line, objectName
		
      line := params["position"]["line"]
      character := params["position"]["character"]

      _context := getContext(line, character, workspace.temp_file)

      results_table := table()
      results_table["isComplete"] :=  "__true__"
      results_table["items"] := []

      case _context of {
         "inside comment" : {
            results_table["items"] := []
            }
         "after dot operator" : {
            desired_line := getDesiredLine(line, workspace.temp_file)	
            objectName := getObjectName(desired_line, character) 
            workspace.buildObjectCompletionItems(results_table, objectName)
            }
         default : { 
            buildDefaultCompletionItems(results_table, workspace)
            }
         }

      results := tojson(results_table)
      return results
   end


   method getObjectName(line, character)
      local temp, c, objectName
      line ? {
         temp := tab(character + 1)
         while c := move(-1) do {
            if (c ** identifiers) ~== c then { 
               break
                  }
            }

         if ="." then {
            move(-1)
            while c := move(-1) do {
               if (c ** identifiers) ~== c then { 
                  move(1)
                  break
                     }
               }
            objectName := tab(upto("."))
            return objectName
            }
         }
   end

   method getDesiredLine(line, file)
      local f, desired_line
      f := open(file)
      every !line do read(f)
      desired_line := read(f)
      return desired_line
   end

   method getContext(line, character, file)
      local desired_line, ch, objectName
      desired_line := getDesiredLine(line, file)

      #-----------------------------------------------#
      #----------- Case "start of file" --------------#
      #-----------------------------------------------#

      \desired_line | fail

      #-----------------------------------------------#
      #----------- Case "inside comment" -------------#
      #-----------------------------------------------#

      desired_line ? {
         while (&pos < character) do {
            ch := move(1) | break
            if ch == "#" then return "inside comment"
            }
         }

      #-----------------------------------------------#
      #-------- Case "after dot operator" ------------#
      #-----------------------------------------------#

      if objectName := getObjectName(desired_line, character) then 
         return "after dot operator"  

      #-----------------------------------------------#
      #---------------- Default case -----------------#
      #-----------------------------------------------#
   end

   method addBuiltInFunctionsCompletionItems(results_table)
      local _function
      every _function := key(workspace.getBuiltInFunctions()) do {
         put(results_table["items"], table("label", _function, "kind", 3))
         }
   end

   method addActionWordsCompletionItems(results_table)
      local _actionWord
      every _actionWord := !workspace.getActionWords() do {
         put(results_table["items"], table("label", _actionWord))
         }
   end

   method addDeclarativeExpressionsCompletionItems(results_table)
      local _declarativeExpression
      every _declarativeExpression := !workspace.getDeclarativeExpressions() do {
         put(results_table["items"], table("label", _declarativeExpression))
         }
   end

   method addSyntaxReservedWordsCompletionItems(results_table)
      local _syntaxReservedWord
      every _syntaxReservedWord := !workspace.getSyntaxReservedWords() do {
         put(results_table["items"], table("label", _syntaxReservedWord))
         }
   end

   method addKeywordsCompletionItems(results_table)
      local _keyword
      every _keyword := !workspace.getKeywords() do {
         put(results_table["items"], table("label", _keyword, "kind", 14))
         }
   end

   method addPreprocessorCompletionItems(results_table)
      local _preprocessor
      every _preprocessor := !workspace.getPreprocessors() do {
         put(results_table["items"], table("label", _preprocessor))
         }
   end

   method addWorkspaceProcedures(results_table, workspace)
      local _internalProcedure, _linkedProcedure, _importedProcedure, _packageProcedure
      every _internalProcedure := key(workspace.getInternalProcedures()) do {
         put(results_table["items"], table("label", _internalProcedure, "kind", 3))
         }
      every _linkedProcedure := key(workspace.getLinkedProcedures()) do {
         put(results_table["items"], table("label", _linkedProcedure, "kind", 3))
         }
      every _importedProcedure := key(workspace.getImportedProcedures()) do {
         put(results_table["items"], table("label", _importedProcedure, "kind", 3))
         }
      every _packageProcedure := key(workspace.getPackageProcedures()) do {
         put(results_table["items"], table("label", _packageProcedure, "kind", 3))
         }
   end
 
   method addWordspaceClasses(results_table, workspace)
      local _internalClass, _linkedClass, _importedClass, _packageClass
      every _internalClass := key(workspace.getInternalClasses()) do {
         put(results_table["items"], table("label", _internalClass, "kind", 4))
         }
      every _linkedClass := key(workspace.getLinkedClasses()) do {
         put(results_table["items"], table("label", _linkedClass, "kind", 4))
         }
      every _importedClass := key(workspace.getImportedClasses()) do {
         put(results_table["items"], table("label", _importedClass, "kind", 4))
         }
      every _packageClass := key(workspace.getPackageClasses()) do {
         put(results_table["items"], table("label", _packageClass, "kind", 4))
         }
   end

   method addInternalObjects(results_table, workspace)
      local _object
      every _object := key(workspace.getObjects()) do {
         put(results_table["items"], table("label", _object, "kind", 6))
      }
   end

   method addInternalVariables(results_table, workspace)
      local _variable
      every _variable := key(workspace.getVariables()) do {
         put(results_table["items"], table("label", _variable, "kind", 6))
      }
   end

   method buildDefaultCompletionItems(results_table, workspace)
      addActionWordsCompletionItems(results_table)
      addBuiltInFunctionsCompletionItems(results_table)
      addDeclarativeExpressionsCompletionItems(results_table)
      addKeywordsCompletionItems(results_table)
      addPreprocessorCompletionItems(results_table)
      addSyntaxReservedWordsCompletionItems(results_table)
      addWordspaceClasses(results_table, workspace)
      addWorkspaceProcedures(results_table, workspace)
      addInternalObjects(results_table, workspace)
      addInternalVariables(results_table, workspace)
   end
end
