/*
 * File: fxaudio.ri - Unicon Audio + VoIP Interface
 *  Contents: PlayAudio, StopAudio, VAttrib.
 */

#ifdef Audio

"PlayAudio(s) - Play audio file."
function{0,1} PlayAudio(fname)

   if !cnv:C_string(fname) then
      runerr(103,fname)

    abstract {
      return integer;
      }

   body {
      int f;

      if ((f = StartAudioThread(fname)) == -1) fail;
      return C_integer f;
      }
end

"StopAudio - kill the audio thread."
function{1} StopAudio(f)

   if !cnv:C_integer(f) then
      runerr(103, f)

   abstract {
      return integer;
      }

   body {
      StopAudioThread(f);
      return C_integer 1;
      }
end

#else					/* Audio */
MissingFunc1(PlayAudio)
MissingFunc1(StopAudio)
#endif					/* Audio */

#if defined(HAVE_VOICE) || defined(Audio)

/*function{0,1} VAttrib(f,attrib)*/

"VAttrib(f,attrib) - set voice attribute. "
function{0,1} VAttrib(argv[argc])
   abstract {
      return integer ++ string ++ list;
      }
   body {
      int i,res=0;
      tended struct descrip sbuf; 
      tended char *attrib = NULL;

      /* Audio Mixer stuff */
      if (!is:file(argv[0])) {
	 for(i = 0 ; i < argc ; i++ ){
	    if (!cnv:C_string(argv[i], attrib))
	       runerr(103,argv[i]);
	    if ((res = AudioMixer(attrib)) <= 0)
	       fail;
	    }
	 return C_integer res;
	 }
      /* VoIP Stuff */
      else {

#ifdef HAVE_VOICE
	 PVSESSION Ptr;
	 Ptr = (PVSESSION)BlkLoc(argv[0])->file.fd.fp;
	 if (!cnv:tmp_string(argv[1], sbuf)) /* sbuf not allocated */
	    runerr(109, argv[1]);

	 attrib = StrLoc(sbuf);

	 if (strstr(attrib, "+=") || strstr(attrib, "-=") ) {
	    SetVoiceAttrib(Ptr, attrib);
	    return C_integer 1;
	    }
	 else {
	    if (strchr(attrib,'=')){
	       /* forming the attrib list  */
	       int i, k, slen;
	       char *s, *s2;
	       tended struct descrip Str;
	       tended struct descrip L;
	       /*------- tended struct b_list *hp; */

	       /* create empty list  */
	       if ((BlkLoc(L)=alclist(0, MinListSlots)) == NULL) fail;
	       L.dword=D_List;
              /* ------ L.vword.bptr=(union block *) hp; */

	       /* forming the list */
	       k = GetVListSize(Ptr);
	       if (strstr(attrib,"name") && (!strstr(attrib,"address"))){
		  for(i=0; i<= k; ++i){
		     s = FetchName(Ptr,i);
		     if (s != NULL) {
			slen = strlen(s);
			Protect(s2 = alcstr(s, slen), runerr(0));
			MakeStr(s2,slen,&Str);
			c_put(&L, &Str);
			}
		     }
		  }
	       else {
		  if (strstr(attrib,"address") && (!strstr(attrib,"name"))) {
		     for(i=0; i<= k; ++i){
			s = FetchAddress(Ptr,i);
			if (s != NULL) {
			   slen = strlen(s);
			   Protect(s2 = alcstr(s, slen), runerr(0));
			   MakeStr(s2,slen,&Str);
			   c_put(&L, &Str);
			   }
			}
		     }
		  else
		     for(i=0; i<= k; ++i) {
			s = FetchListener(Ptr,i);
			if (s != NULL) {
			   slen = strlen(s);
			   Protect(s2 = alcstr(s, slen), runerr(0));
			   MakeStr(s2,slen,&Str);
			   c_put(&L, &Str);
			   }
			}/* end for */
		  } /* end else */
	       return L;
	       }
	    else { /* forming the attrib string   */
	       char tmpstr[MaxCvtLen],*str;
	       int i, k = GetVListSize(Ptr), len=0;
	       tmpstr[0] = '\0';
	       for (i=0; i<= k; ++i) {
		  str = FetchListener(Ptr, i);
		  if (str != NULL) {
		     strcat(tmpstr, str);
		     strcat(tmpstr, ",");
		     }
		  }
	       len = strlen(tmpstr)-1;
	       tmpstr[len] = '\0';
	       slen = strlen(tmpstr);
	       Protect(s2 = alcstr(tmpstr, slen), runerr(0));
	       MakeStr(tmpstr, slen, &Str);
	       return Str;
	       }
	    return C_integer 1;
	    }
#endif                          /* HAVE_VOICE  */
	 return C_integer 1;
	 }
      }
end

#else				/* HAVE_VOICE  || Audio */
MissingFuncV(VAttrib)
#endif				/* HAVE_VOICE  || Audio */
