#unicon-program ovld.icn

#usage: ovld &> ovld.out; diff ovld.std ovld.out
#for automated tests, grep -v "varies"
#to check a new ovld.std,
# after modifying ovld.icn _only_: ovld 5 > ovld.5; ovld > ovld.0; wdiff -3 ovld.5 ovld.0

global m
record X(x)

#============================= main =========================

procedure main(argl)
&trace:=-1
&random:=0
if not(&features == "operator overloading" ) then 
	stop ("requires operator overloading")
y:=Op(5)
fails:=" fails"

every x:=y|y.x do {
m:=&null
x:=+argl[1] # ovld 5 -> 2 runs w same x 
xl:=(type(x)=="Op__state" ,x)|[x]
write(type(x))
xc:=(type(x)=="Op__state" ,x)|(create x)
writes ("!",y.x," is "); every writes( !x,", ")
write()
every writes ("~",y.x, " is ", image( ~x),", ")
write(m)
every writes ("\"56\"?=",y.x, " is ", image( "56"? =x),", ")
write(m)
writes ("?",y.x," is "); every writes(?(|x)\10,", ")
write()
every writes ("+",y.x," is ",+x,", ")
write()
every writes ("-",y.x," is ",-x,", ")
write(m)
every writes (y.x,"||\"a\" is ",x||"a", ",")
write()
every writes (y.x,"--5 is ",image(x--5),", ")
write()
 every i:=5|"5" do writeimg(y.x,"===",i, x===i|fails) # need wr{}
every writes (y.x,"===",image(i:=5|"5"),(" is "||image(x===i)|fails)\1,", ")
write()
every writes (y.x,"** ",i:=5|6," is ",image(x**i),", ")
write()
writes ("[",y.x,"]|||[5] is ", image(xl|||[5])," = [",); every writes (!(xl|||[5]),", ")
write("]")

every writes (y.x,"==\"5\" is ",image(x=="5"),", ")
write()
every writes (y.x,">> \"4\" is ",image(x>>"4"),", ")
write()
every writes (y.x,"<<= \"5\" is ",image(x<<="5"),", ")
write()
every writes (y.x,"<< \"6\" is ",image(x<<"6"),", ")
write()
every writes (y.x,"~== \"4\" is ",image(x~=="4"),", ")
write()
every writes (y.x,"- 5 is ",x-5,", ")
write()
every writes (y.x,"% ",i:=5|6," is ",x%i,", ")
write()
every writes (y.x,"* 5 is ",x*5,", ")
write()
every writes (y.x,"~=== \"5\" is ",image(x~==="5"),", ")
write()
every writes (y.x,"= \"5\" is ",image(x="5"),", ")
write()
every writes (y.x,">= \"5\" is ",image(x>="5"),", ")
write()
every writes (y.x,"> \"4\" is ",image(x>"4"),", ")
write()
every writes (y.x,"<= \"5\" is ",image(x<="5"),", ")
write()
every writes (y.x,"< \"6\" is ",image(x<"6"),", ")
write()
every writes (y.x,"~= \"6\" is ",image(x~="6"),", ")
write()
every writes (y.x,"+\"5\" is ",image(x+"5"),", ")
write()
every writes (y.x,"^\"5\" is ",image(x^"5"),", ")
write(m)
# ^ is it calling refresh or powr? 
#every writes ("^",y.x," is ",image(^xc),"=",@xc,", ")
# ^ no op overload for @. TODO. so we can return a list of  all member coexpr's results
every writes ("^",y.x," is ",image(^xc),", ")
write(m)
every writes (y.x,"[1:2] is ",image(x[1:2]),", ")
write()
every writes ("*",y.x," is ",image(*xl,", "),",")
write()
every writes (y.x,"[1] is ",image(x[1]),", ")
write()
writes (y.x," to 15 by 2 is "); every writes(x to 15 by 2,", ")
write()
write ( image(x), " done.")
collect()
write ("the rest varies:")
every write (&collections, " (varies )")
}

end # main 

# ================================== class Op ====================================

class Op (x)
# method !() 
method __bang__()
suspend !x
end
method __random__()
suspend ?x
end
method __neg__()
m:="neg"
suspend  -x
end
method __compl__()
m:="compl"
suspend ~x
end
method __tabmat__()
m:="tabmat"
suspend =x
end
# ^ unicon: this is NOT used? 
method __number__()
m:="number"
suspend +x
end
method __cat__(y)
suspend  x||y
end
method __diff__(y)
suspend  x--y
end
method __div__(y)
suspend x/y
end
method __eqv__(y)
suspend x===y
end
method __inter__(y)
suspend x**y
end
method __lcat__(y)
suspend [x]|||y
end
method __lexeq__(y)
suspend x==y
end
method __lexge__(y)
suspend x>=y
end
method __lexgt__(y)
suspend x>>y
end
method __lexle__(y)
suspend x<<=y
end
method __lexlt__(y)
suspend x<<y
end
method __lexne__(y)
suspend x~==y
end
method __minus__(y)
suspend x-y
end
method __mod__(y)
suspend x%y
end
method __mult__(y)
suspend x*y
end
method __neqv__(y)
suspend x~===y
end
method __numeq__(y)
suspend x=y
end
method __numge__(y)
suspend x>=y
end
method __numgt__(y)
suspend x>y
end
method __numle__(y)
suspend x<=y
end
method __numlt__(y)
suspend x<y
end
method __numne__(y)
suspend x~=y
end
method __add__(y)
suspend x+y
end
method __powr__(y)
m:="powr"
suspend x^y
end
method __refresh__()
m:="refresh"
suspend ^create x
# ^ this is faking; one may want to return self for some uses.
end
method __sect__(y,z)
suspend x[y:z]
end
method __size__()
# suspend *self # recurses forever. 
# ^ FIXME: how do we find our own size? 
suspend *x
end
method __subsc__(y)
suspend x[y]
end
method __toby__(y,z)
suspend x to y by z
# ^ TODO: test w null z
end
method __union__(y)
suspend x++y
end

end # class Op

#============================== procedures ========================
 
# every i:=5|"5" do writeimg(y.x,"===",i, x===i|fails) # need wr{}
procedure writeimg ( x,s,i,r)
# TODO
end
