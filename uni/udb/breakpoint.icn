#
# breakpoint.icn: handle UDB's breakpoint-related tasks
# Author:         Ziad Al-Sharif, zsharif@gmail.com
# Contributor:    Gigi Young
#

$include "evdefs.icn"
$include "defaults.icn"

#
# For every file that has a breakpoint
# we will create a new breakPt in a list inside a table.
#
record breakPt(
   id,    # a unique identification number
   fname, # The file name that has the breakpoint
   line,  # The exact line number where the breakpoint is
   state, # an integer code with (ENABLED | DISABLED | DELETED)
   code,  # a copy of the actual source code of that line
   coexp  # instance of class Coexp, holds the value of the coexp that the
          # breakpoint is applied to, value is &null if applied to all coexps
   )

class BreakPoint(
   DState,       # (Alias) object of type State class
   breakPoints,  # A table maps files to their list of breakpoints
   count,        # An integer counts the total number of breakpoints
   msg           # a string with latest message from this class
   )

#
# Check the Monitored file for a breakpoint
#
method checkBreakpoint()
   local  cur_file, cur_line, L, bp, id, bpTable
   cur_file := keyword("file", MONITORED)
   if member(breakPoints, cur_file) then {
      cur_line := keyword("line", MONITORED)
      L := breakPoints[cur_file]
      every bp := !L do {
         if cur_line = bp.line & bp.state = ENABLED &
            id := isBreakExist(cur_file,cur_line) &
            (/bp.coexp | bp.coexp.id == DState.coState.curr.id)
         then {
            DState.State := PAUSE
            # this delete will help "next" and "step" operate well
            # jut remove the the breakMask set from the valueMask
            # table temporarly until the continue command comes on
            delete(DState.valueMask,E_Line)
            bpTable := constructBpMsg(bp, 1) # 1 -> shows source code. add a flag?
            DState.Write(bpTable)
            return
         }
      }
   }
end

#
# returns a string name of the state of the brekpoint
#
method getBreakState(state)

   if state = ENABLED then
      return "enabled"
   else if state = DISABLED then
      return "disabled"
   else if state = DELETED then
      return "deleted"
   else
      return "unknown state"
end

#
# Construct a breakpoint message.
#
method constructBpMsg(bp, verbose)
   local breakpoint := "", coexp := "", src_code := ""
   local bpTable := table()

   if /bp then return "" # null breakpoint?

   breakpoint ||:= "\n   Breakpoint #"|| bp.id ||
                   " (" || getBreakState(bp.state) || ") at " ||
                   bp.fname || ":" || bp.line
   bpTable["id"] := bp.id
   bpTable["state"] := getBreakState(bp.state)
   bpTable["source"] := bp.fname
   bpTable["line"] := bp.line
   bpTable["type"] := "breakpoint"

   if \verbose then {
      src_code ||:= "\n     " || bp.line || ": " || bp.code
      bpTable["code"] := bp.code
   }

   if \bp.coexp then {
      coexp ||:= " coexp " || bp.coexp.id
      bpTable["coexp"] := bp.coexp.id
   }

   bpTable["consoleMsg"] := breakpoint || coexp || src_code
   return bpTable
end

#
# prints out a list of the existing breakpoints used by cmdBreak
#
method printBreakInfo(cmd)
   local x, L, bp, name
   local resultTable := table("cmd", cmd, "breakpoints", list())

   if type(cmd) == "list" then name := cmd[3]
   msg := ""
   if /name then {
      every x := key(breakPoints) do {
         L := breakPoints[x]
         every bp := !L do {
            bpTable := constructBpMsg(bp)
            msg ||:= bpTable["consoleMsg"]
            push(resultTable["breakpoints"], bpTable)
         }
      }
   }
   else {
      if integer(name) then {
         every x := key(breakPoints) do {
            L := breakPoints[x]
            every bp := !L do {
               if name = bp.id then {
                  bpTable := constructBpMsg(bp)
                  msg ||:= bpTable["consoleMsg"]
                  push(resultTable["breakpoints"], bpTable)
                  break break
               }
            }
            msg||:="\n   Breakpoint #"||name||" is not available."
            push(resultTable["breakpoints"], bpTable)
              }
           }
      else {
         if not find(".icn",name) then name ||:= ".icn"
         if DState.srcFile.isSrcFile(name) then {
            if L:=breakPoints[name] & type(L) == "list" then {
               every bp := !L do {
                  bpTable := constructBpMsg(bp)
                  msg ||:= bpTable["consoleMsg"]
                  push(resultTable["breakpoints"], bpTable)
               }
            }
            else {
               msg := "\n   No breakpoints available in "||name
               setResultTable(resultTable, "No breakpoints available in " || name, "__true__")
            }
         }
         else {
            msg := "\n   Source file \""||name||"\" is not in the binary !!!"
            setResultTable(resultTable, "Source file " ||name|| " not in binary", "__false__")
            resultTable["reason"] := "failed"
         }
      }
   }
   setResultTable(resultTable, &null, &null, msg)
   if *msg = 0 then {
      msg := "\n   No breakpoints available."
      setResultTable(resultTable, "No breakpoints available", "__true__", msg)
   }
   DState.Write(resultTable)
end

#
# check to see whether a breakpoint is pre-exist or not
#
method isBreakExist(fname, line, breakpoint)
   local L, bp, coexp
   local resultTable := table("cmd", cmd)

   if member(breakPoints, fname) then {
      L := breakPoints[fname]
      every bp := !L do {
         if bp.line = line & bp.state ~= DELETED then {

            # only when trying to add a breakpoint - check if coexp of
            # added breakpoint differs from current breakpoint
            if \breakpoint then {
               coexp := breakpoint.coexp
               # coexps differ
               if (\coexp & (/bp.coexp | bp.coexp.id ~= coexp.id)) |
                  (/coexp & \bp.coexp) then {
                  # ask if breakpoint should be replaced
                  msg := constructBpMsg(bp)["consoleMsg"] || " already exists. "
                  msg ||:= "\n   Do you really want to replace it (Y/n)?: "
                  setResultTable(resultTable, &null, &null, msg)
                  resultTable["requireResponse"] := "__true__"
                  DState.Writes(resultTable)
                  if map(DState.stateRead()) == ("y" | "yes" | "") then {
                     # replace breakpoint id
                     breakpoint.id := bp.id
                     count -:= 1
                     # delete breakpoint
                     deleteBreakPoint(fname,line)
                     msg :="\n   Previous breakpoint has been replaced."
                     fail
                     }
                  }
               # same coexp -> same breakpoint, append to message
               else {
                  msg := "\n   The breakpoint already exists._
                          \n   Type \"break\" to see all breakpoints"
                  }
               }
            # same breakpoint, return id
            return bp.id
            }
         }
      }
   fail
end

#
# used to add a new breakpoint into the
# breakPoints table and the breakMask set
#
method addBreakPoint(fname, bp)
   if member(breakPoints,fname) then
      put(breakPoints[fname], bp)
   else
      breakPoints[fname] := [bp]

   insert(DState.breakMask,bp.line)
end

#
# used it clear breakpoints, is used by cmdClear()
#
method deleteBreakPoint(fname, line)
   local L, i
   L := breakPoints[fname]
   every i := 1 to *L do {
      if L[i].line = line then
         delete(L,i)
      }
   if *L = 0 then
      delete(breakPoints, fname)

   delete(DState.breakMask,line)
end

method parse_colon_arg(arg)
   local arg_list, num_colon, s
   local resultTable := table()

   arg_list := []
   num_colon := 0
   s := ""

   # parse cmd[2] for word args, :, and ::
   arg ? {
      # splits words and colons up to last colon
      while c := move(1) do {
         # word arg
         if c ~== ":" then s ||:= c
         # colon arg
         else {
            num_colon +:= 1
            while c := (move(1) == ":") do {
               num_colon +:= 1
               if num_colon > 2 then {
                  DState.State := ERROR
                  msg   :="\n   \""||DState.cmdHistory[1]||
                              "\" is not a known command"||
                           "\n   Try \"help\" or \"help break\" for assistance."

                  setResultTable(resultTable, DState.cmdHistory[1]||" is not a known command", "__false__", msg)
                      DState.Write(resultTable)
                  fail
               }
            }
            # append word argument
            put(arg_list,s)
            s := ""
             # append colon argument
            every j := 1 to num_colon do  s ||:= ":"
            put(arg_list,s)
            num_colon := 0
            s := ""
            }
         }
         # append the last word arg (after last colon)
         put(arg_list,s)
      }
   return arg_list
end



#
# Sets Breakpoints on line numbers or procedure names
# [b linenum], [b ProcName], [b file linenum]
#
method cmdBreak(cmd)
   local code, line, fname, cname, pkgname, arg, break_point, i
   local coexp, num_colon, arg_list
   local resultTable := table("cmd", cmd, "type", "setBreakpoint")
   msg := ""
   if not (DState.State = (LOAD | PAUSE)) then {
      DState.State := ERROR
      msg := "\n   No Program is Loaded_
              \n   Type \"help\" for assistance"
      setResultTable(resultTable, "No program loaded", &null, msg)
      resultTable["verified"] := "__false__"
      resultTable["reason"] := "failed"

      DState.Write(resultTable)
      }
   DState.State := SKIP

   # if cmd is only "break"; will print all of the preset breakpoints info
   if *cmd = 1 then {
      printBreakInfo()
      return
      }

   # [breakcmd] [coexp N] - get co-expression if this syntax is used
   if *cmd >= 4 & cmd[-2] == "coexp" then {
      if /(coexp := DState.coState.get_coexp(cmd[-1])) then {
         DState.State := ERROR
         msg := "\n   "||cmd[-2]||" "||cmd[-1]||" does not exist."||
                "\n   Use command \"coexp\" to view activated co-expressions."
         setResultTable(resultTable, "coexp error??", "__false__", msg)
         DState.Write(resultTable)
         fail
         }
      until pull(cmd) == "coexp" # pull [coexp N] off list
      }

   # "break line" or "break procedure/method"
   if *cmd = 2 then {

      # parse cmd[2] for word args, :, and ::
      if not (arg_list := parse_colon_arg(cmd[2])) then fail

      # break line | break proc/method
      if *arg_list = 1 then {
         arg := cmd[2]

         # arg is a proc/method, get file and lineno
         if not (line := integer(arg)) then {
            if (temp := DState.srcFile.findProcMethod(arg)) then {
            #if (temp := DState.srcFile.findProc(arg)) then {
               fname := temp[1]
               line := temp[2]
               }
            else {
               DState.State := ERROR
               msg := "\n   Could not find procedure \""||arg||"\""
                      "\n   Please try again"
               setResultTable(resultTable, "Could not find procedure " ||arg, "__false__", msg)
               DState.Write(resultTable)
               fail
               }
            }
         # in the case of 'break line' and no filename
         if /fname then {
            if DState.State = PAUSE then {
               fname := keyword("file",MONITORED)
               }
            else
            fname := DState.srcFile.procMainFile
            }
         }
      # break file:line
      else if *arg_list = 3 & arg_list[2] == ":" then {
         fname := arg_list[1]
         arg := arg_list[3]

         if temp := integer(arg) then line := temp
         else {
            msg := "\n   Expected \""||arg||"\" to be a line number." ||
                   "\n   Please try again."
            setResultTable(resultTable, "Expected " ||arg|| " to be a line number", "__false__", msg)
            }
         }
      # break class::method | break package::procedure
      else if *arg_list = 3 & arg_list[2] == "::" then {

         pkgname := cname := arg_list[1]
         arg := arg_list[3]

         if temp := (DState.srcFile.findPkgProc(pkgname, arg) |
                     DState.srcFile.findClassMethod(cname, arg)) then {
            fname := temp[1]
            line := temp[2]
            }
         else {
            msg := "\n   Could not find \""||arg_list[1]||"::"||arg||
                   "\".\n   Please try again."
            setResultTable(resultTable, "Could not find "||arg_list[1]||"::"||arg, "__false__", msg)
            DState.Write(resultTable)
            fail
            }
         }
      # break package::class::method
      else if *arg_list = 5 & arg_list[2] == "::" & arg_list[4] == "::" then {

         pkgname := arg_list[1]
         cname := arg_list[3]
         arg := arg_list[5]

         if temp := DState.srcFile.findPkgClassMethod(pkgname, cname, arg) then {
            fname := temp[1]
            line := temp[2]
         }
         else {
            msg := "\n   Could not find \""||pkgname||"::"||arg||"::"||arg||
                   "\".\n   Please try again."
            setResultTable(resultTable, "Could not find "||pkgname||"::"||arg||"::"||arg, "__false__", msg)
            DState.Write(resultTable)
            fail
         }
      }
      # invalid syntax
      else {
         DState.State := ERROR
         msg   :="\n   \""||DState.cmdHistory[1]||"\" is not a known command"
         msg ||:="\n   Try \"help\" or \"help break\" for assistance."
         setResultTable(resultTable, DState.cmdHistory[1]|| " is not a known command", "__false__", msg)
         DState.Write(resultTable)
         return
         }
      }
   else if *cmd = 3 then { # break file line
      fname := cmd[2]
      arg   := cmd[3]

      if temp := integer(arg) then line := temp
      }
   else {
      DState.State := ERROR
      msg   :="\n   \""||DState.cmdHistory[1]||"\" is not a known command"
      msg ||:="\n   Try \"help\" or \"help break\" for assistance."
      setResultTable(resultTable, DState.cmdHistory[1]|| " is not a known command", "__false__", msg)
      DState.Write(resultTable)
      return
      }

   if \fname then
      if not find(".icn",fname) then fname ||:= ".icn"

   #debug("trying to set breakpoint at '",fname,":",line,"'")
   # create breakpoint
   if code := DState.srcFile.getSrcLine(fname, line) then
      break_point := breakPt(count +:= 1, fname, line, ENABLED, code, coexp)

   # record breakPt(fname, linenum, code) only if it doesn't exist already
   if \break_point & \break_point.line then {
      line := break_point.line
      if not isBreakExist(fname, line, break_point) then {
         addBreakPoint(fname, break_point)
         bpTable := constructBpMsg(break_point)
         msg ||:= bpTable["consoleMsg"]
         resultTable["breakpoint"] := bpTable
         setResultTable(resultTable, &null, "__true__")
      }
      else {
         setResultTable(resultTable, "Breakpoint already exists", "__false__")
      }
      setResultTable(resultTable, &null, &null, msg)
      DState.Write(resultTable)
      return
      }
   else {
      msg   :="\n   \""||DState.cmdHistory[1]||"\" is not a known command"
      msg ||:="\n   Try \"help\" or \"help break\" for assistance."
      setResultTable(resultTable, DState.cmdHistory[1]|| " is not a known command", "__false__", msg)
      DState.Write(resultTable)
   }
end

#
# clear all breakpoints
#
method clearAllBreakpoints()
    local x, size := 0
    local resultTable := table("type", "clearAllBreakpoints")

    size := *breakPoints
    if size > 0 then {
       DState.breakMask := set()
       every x := key(breakPoints) do
          delete(breakPoints, x)
       msg := "\n   All breakpoints are cleared; ("||size||" total)."
       setResultTable(resultTable, &null, "__true__")
       resultTable["size"] := size
       count := 0
       }
    else {
       msg := "\n   No breakpoints are available to be cleared."
       setResultTable(resultTable, "No breakpoints available", "__true__")
      }

    setResultTable(resultTable, &null, &null, msg)
    DState.Write(resultTable)
    return
end

#
# It clears pre-set breakpoints
#
method cmdClear(cmd)
   local line, fname, arg, id, i, size:=0, foundBreakpoint
   local resultTable := table("cmd", cmd, "type", "clearBreakpoint")

   # clears all of the preset breakpoints
   # 'clear break'
   if *cmd = 2 then {
      clearAllBreakpoints()
      return
      }
   # 'clear break line' | 'clear break procedure'
   if *cmd = 3 then {
      arg := cmd[3]

      # arg is a proc/method, get file and lineno
      if not (line := integer(arg)) then {
         if (temp := DState.srcFile.findProc(arg)) then {
            fname := temp[1]
            line := temp[2]
            }
         else {
            DState.State := ERROR
            msg := "\n   Could not find procedure \""||arg||"\""
                   "\n   Please try again"
            setResultTable(resultTable, "Could not find procedure "||arg, "__false__", msg)
            DState.Write(resultTable)
            fail
            }
         }

      # in the case of 'break line' and no filename
      if /fname then {
         if DState.State = PAUSE then {
            fname := keyword("file",MONITORED)
            }
         else
         fname := DState.srcFile.procMainFile
         }
      }
   # 'break file line' | 'break file all'
   else if *cmd = 4 then {
      if DState.srcFile.isSrcFile(cmd[3]) | DState.srcFile.isSrcFile(cmd[3] || ".icn") then
         fname := cmd[3]
      else {
         DState.State := ERROR
         msg := "\n   Could not find file \""||cmd[3]||"\""
                "\n   Please try again"
         setResultTable(resultTable, "Could not find file "||cmd[3], "__false__", msg)
         DState.Write(resultTable)
         fail
      }
      if integer(cmd[4]) then
         line := arg := cmd[4]
      else if not match(map(cmd[4]), "all") then {
         DState.State := ERROR
         msg   :="\n   \""||DState.cmdHistory[1]||"\" is not a known command"
         msg ||:="\n   Try \"help\" or \"help break\" for assistance."
         setResultTable(resultTable, DState.cmdHistory[1]|| " is not a known command", "__false__", msg)
         DState.Write(resultTable)
         return
      }
   }
   else {
      DState.State := ERROR
      msg   :="\n   \""||DState.cmdHistory[1]||"\" is not a known command"
      msg ||:="\n   Try \"help\" or \"help break\" for assistance."
      setResultTable(resultTable, DState.cmdHistory[1]|| " is not a known command", "__false__", msg)
      DState.Write(resultTable)
      return
   }

   if \fname then {
      if not find(".icn", fname) then
         fname ||:= ".icn"
      }

   if \line then {
      attemptBreakpointDelete(resultTable, fname, line, 1)
   }
   else {
      every i := 1 to *DState.srcFile.fileText[fname] do {
         if attemptBreakpointDelete(resultTable, fname, i) then
            foundBreakpoint := 1
      }
      if /foundBreakpoint then {
         msg :="\n   No breakpoints found in file: "||fname||"."
         setResultTable(resultTable, "No breakpoints found in file: "||fname||".", "__false__")
         resultTable["reason"] := "failed"
         setResultTable(resultTable, &null, &null, msg)
         DState.Write(resultTable)
      }
   }
end

method attemptBreakpointDelete(resultTable, fname, line, displayNotFound)
   if (id := isBreakExist(fname, line)) then {
      deleteBreakPoint(fname, line)
      msg  :="\n   Deleted breakpoint #"||id||" at : file "||fname||
             ", line "||line ||"."
      msg||:="\n   Source code:"||DState.srcFile.getSrcLine(fname, line)
      setResultTable(resultTable, "Deleted breakpoint #"||id|| " at : file "||fname||", line "||line, "__true__")
      resultTable["breakpoint"] := [
         "id": id;
         "line": line
      ]
      setResultTable(resultTable, &null, &null, msg)
      DState.Write(resultTable)
      return
   }
   else if \displayNotFound then {
      msg :="\n   No breakpoint at : file "||fname||", line "||line ||"."
      msg||:="\n   Source code: "||DState.srcFile.getSrcLine(fname, line)
      setResultTable(resultTable, "No breakpoint at : file "||fname||", line "||line, "__false__")
      resultTable["reason"] := "failed"
      setResultTable(resultTable, &null, &null, msg)
      DState.Write(resultTable)
   }
   fail
end

#
# It deletes pre-set breakpoints
#
method cmdDelete(cmd)
   local id, x, L, i, j:=0
   local resultTable := table("cmd", cmd)

   if not cmd[3] then {
      every x := key(breakPoints) do {
         L := breakPoints[x]
         every bp := !L do {
            if bp.state ~= DELETED then {
               bp.state := DELETED
               j +:= 1
            }
         }
      }
      if j > 0 then {
         msg := "\n   All breakpoints are deleted; ("||j||" in total)."
         setResultTable(resultTable, "All breakpoints are deleted; ("||j||" in total)", "__true__")
      }
      else {
         msg := "\n   No breakpoints are available to be deleted."
         setResultTable(resultTable, "No breakpoint are available to be deleted", "__false__")
      }
      setResultTable(resultTable, &null, &null, msg)
      DState.Write(resultTable)
      return
   }
   else if id := integer(cmd[3]) then {
      every x := key(breakPoints) do {
         L := breakPoints[x]
         every bp := !L do {
            if bp.id = id then
               if bp.state ~= DELETED then {
                  bp.state := DELETED
                  msg := "\n   Breakpoint #"||id||" is deleted."
                  setResultTable(resultTable, "Breakpoint #"||id||" is deleted", "__true__", msg)
                  DState.Write(resultTable)
                  return
               }
               else {
                  msg := "\n   Breakpoint #"||id||" is already deleted."
                  setResultTable(resultTable, "Breakpoint #"||id||" is already deleted", "__false__", msg)
                  DState.Write(resultTable)
                  fail
               }
         }
      }
   msg := "\n   Breakpoint #"||id||" is not available."
   setResultTable(resultTable, "Breakpoint #"||id||" is not available", "__false__", msg)
   DState.Write(resultTable)
   fail
   }
   else {
      msg:="\n   Undefined Command: \""||DState.cmdHistory[1]||"\""||
           "\n   Try \"help\" for assistance."
      setResultTable(resultTable, "Undefined Command: "||DState.cmdHistory[1], "__false__", msg)
      DState.Write(resultTable)
      fail
   }
end

#
# It deletes pre-set breakpoints
#
method cmdEnable(cmd)
   local id, x, L, i, j:=0
   local resultTable := table()

   # Enables all the preset breakpoints
   # enable break
   if not cmd[3] then {
      every x := key(breakPoints) do {
         L := breakPoints[x]
         every bp := !L do {
            if bp.state = DISABLED then {
               bp.state := ENABLED
               j +:= 1
            }
         }
      }
      if j > 0 then {
         msg := "\n   All breakpoints are enabled; ("||j||" total)."
         setResultTable(resultTable, "All breakpoints are enabled; ("||j||" total)", "__true__")
      }
      else {
         msg := "\n   No disabled breakpoints are available to be enabled."
         setResultTable(resultTable, "No disabled breakpoints are available to be enabled", "__false__")
      }
      setResultTable(resultTable, &null, &null, msg)
      DState.Write(resultTable)
      return
   }
   else if id := integer(cmd[3]) then {
      every x := key(breakPoints) do {
         L := breakPoints[x]
         every bp := !L do {
            if bp.id = id then
               if bp.state = DISABLED then {
                  bp.state := ENABLED
                  msg := "\n   Breakpoint #"||id||" is enabled."
                  setResultTable(resultTable, "Breakpoint #"||id||" is enabled", "__true__", msg)
                  DState.Write(resultTable)
                  return
               }
               else {
                  if bp.state = ENABLED then {
                     msg:="\n   Breakpoint #"||id||" is already enabled."
                     setResultTable(resultTable, "Breakpoint #"||id||" is already enabled")
                  }
                  else {
                     msg:="\n   Breakpoint #"||id||" is deleted; it cannot be enabled."
                     setResultTable(resultTable, "Breakpoint #"||id||" is deleted; it cannot be enabled")
                  }
                  setResultTable(resultTable, &null, "__false__", msg)
                  DState.Write(resultTable)
                  fail
               }
            }
         }
      msg := "\n   Breakpoint #"||id||" is not available."
      setResultTable(resultTable, "Breakpoint #"||id||" is not available", "__false__", msg)
      DState.Write(resultTable)
      fail
      }
   else {
      msg:="\n   Undefined Command: \""||DState.cmdHistory[1]||"\""||
           "\n   Try \"help\" for assistance."
      setResultTable(resultTable, "Undefined Command: "||DState.cmdHistory[1], "__false__", msg)
      DState.Write(resultTable)
      fail
      }
end

#
# It deletes pre-set breakpoints
#
method cmdDisable(cmd)
   local id, x, L, i, j := 0

   if not cmd[3] then {
      every x := key(breakPoints) do {
         L := breakPoints[x]
         every bp := !L do
            if bp.state := ENABLED then {
               bp.state := DISABLED
               j +:= 1
            }
         }
      if j > 0 then {
         msg := "\n   All breakpoints are disabled; ("||j||" total)."
         setResultTable(resultTable, "All breakpoints are disabled; ("||j||" total)", "__true__")
      }
      else {
         msg := "\n   No enabled breakpoints are available to be disabled."
         setResultTable(resultTable, "No enabled breakpoint are available to be disabled", "__false__")
      }
      setResultTable(resultTable, &null, &null, msg)
      DState.Write(resultTable)
      return
   }
   else if id := integer(cmd[3]) then {
      every x := key(breakPoints) do {
         L := breakPoints[x]
         every bp := !L do {
            if bp.id = id then {
               if bp.state = ENABLED then {
                  bp.state := DISABLED
                  msg := "\n   Breakpoint #"||id||" is disabled."
                  setResultTable(resultTable, "Breakpoint #"||id||" is disabled", "__true__", msg)
                  DState.Write(resultTable)
                  return
               }
               else {
                  if bp.state = DISABLED then {
                     msg:="\n   Breakpoint #"||id||" is already disabled."
                     setResultTable(resultTable, "Breakpoint #"||id||" is already disabled")
                  }
                  else {
                     msg:="\n   Breakpoint #"||id||" is deleted; it cannot be disabled."
                     setResultTable(resultTable, "Breakpoint #"||id||" is deleted; it cannot be disabled")
                  }
                  setResultTable(resultTable, &null, "__false__", msg)
                  DState.Write(resultTable)
                  fail
               }
            }
         }
      }
      msg := "\n   Breakpoint #"||id||" is not available."
      setResultTable(resultTable, &null, "__false__", msg)
      DState.Write(resultTable)
      fail
   }
   else {
      msg:="\n   Undefined Command: \""||DState.cmdHistory[1]||"\""||
           "\n   Try \"help\" for assistance."
      setResultTable(resultTable, "Undefined Command: "||cmdHistory[1], "__false__", msg)
      DState.Write(resultTable)
      fail
   }
end

method resetBreakpoints()
    local x, size := 0

    size := *breakPoints
    if size > 0 then {
       DState.breakMask := set()
       every x := key(breakPoints) do
          delete(breakPoints, x)
       count := 0
       }
    return
end

method setResultTable(resTable, message, success, consoleMsg)
   if \message then resTable["message"] := message
   if \success then resTable["success"] := success
   if \consoleMsg then resTable["consoleMsg"] := consoleMsg
end

#
# Initialization
#
initially()
   breakPoints := table(0)
   count := 0
   msg :="\n   "
end
