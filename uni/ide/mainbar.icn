#
# File:        mainbar.icn
#
# Subject:    Main System Menubar
#
# Description: Class ProjectMenubar is where the overall main
# menubar GUI and its functionality are implemented and added into
# the dialog. It contains a call to all of the ide commands; such as
# new/existing files/projects editing and creation.
#

import gui
$include "guih.icn"

link io, font_dlg

global gotoln, projectCreated, projectOpened

#
# Class Mainbar manages an IDE toolbar, a dialog-like collection of components
# that reside on the main application dialog.  It was separated out to
# facilitate code sharing between the IDEs of UI (the Unicon IDE) and CVE, the
# collaborative virtual environment hosted at cve.sf.net.
#
class Mainbar(
   uniconProject, open_Project, openUProj,
   menu_1, exit_menu_item, classbrowser_100, classbrowser_50,
   classbrowser_normal, classbrowser_submenu, close_file, compile_only,
   compile_options, copy, cut,
   gotoline, insert_class, insert_menu, insert_method, insert_proc,
   ivib, make_exe, match_parenthesis,
   menu_10, menu_11, menu_12, menu_2, menu_6, menu_7, menu_9,
   menu_net, menu_separator_1, msgs_100, msgs_50,
   msgs_normal, msgs_submenu, new_file, online_courses,
   open_file, hide_toolbar, paste, print_file, replace,
   run_arguments, run_program, save_file, saveas_file,
   select_all, users_guide_menu, command_reference_menu,
   about_menu, text_menu_item_3, text_menu_item_4,undo,
   view_window_all, view_window_files, view_window_filesclassbrowser,
   view_window_filesmsgs, window_submenu,menu_bar_1, projectname,
   projecttype, make_compile_unicon, runProject, makeClean,
   makeCleanAll, menu_separator, menu_separator2, connect_menu,
   disconnect_menu, menu_act, pswd_menu, avt_menu, face_menu, reg_menu,
   users_guide_file, language_ref, fileOpened,
   icon_ref, unicon_ref, graphics_ref, icon_prog_library, languages_faq,
   icon_faq, unicon_faq, modified, saveoptions, redo, new_Project,
   ui_programming_envi, tutorial_overview, ivib_interface_builder,
   cur_ide_win_setup, # the current setup for which windows are being displayed
   cur_ide_tb_status, # the current state of the tool bar
   tb_adj, # tool bar adjust value -4% when the tool bar isn't present
   preferences, replace_dialog, debuggIt, unicon_manpage
   )

   method on_print_file(ev)
      ide.on_print_file(ev)
   end

   method on_new_file(ev)
      ide.on_new_btn(ev)
   end

   method on_open_file(ev)
      ide.on_open_btn(ev)
   end

   method on_close_file(ev)
      ide.on_close_btn(ev)
   end

   method on_save_file(ev)
      ide.on_save_btn(ev)
   end

   method on_saveas_file(ev)
      ide.on_saveas_btn(ev)
   end

   method on_exit(ev)
      local tab_item, modified, decision, i:=1

      if \ide.debugger = 1 then {
         if not close(ide.pty) then {
            write("Possible UDB zombie outbreak")
            } else write("UDB closed")
         }

      every tab_item := !uidlog.FileTabSet.children do {
         if tab_item.label[-1] == "*" then {
            modified := 1
            break
            }
         }
      if /modified then exit(0)
      decision := asksave(,"Exit")

      if decision === "Cancel" then fail
      else if decision === "ExitWithoutSaving" then exit(0)
      else if decision === "Save" then {
         while i <= *uidlog.FileTabSet.children do {
            if \decision == "Cancel" then fail
            tab_item := uidlog.FileTabSet.children[i]
            if not (tab_item.label == ("scratch" | "scratch*")) then
               decision := ide.handle_closefile(, tab_item)
            else i +:= 1
            }
         if ide.CurrentTabItem().label == "scratch*" then {
            decision := asksave("scratch")
            if decision == "Save" then ide.on_save_btn(, ide.CurrentTabItem())
            else if decision == "Cancel" then fail
            }
         }
      else {
         every tab_item := !uidlog.FileTabSet.children do
            if tab_item.label[-1] == "*" then ide.on_save_btn(, tab_item)
         }
      exit(0)
   end

   method on_replace(ev)
      replace_dialog := qu_replace()
      replace_dialog.show_modeless()
   end

   method on_goto_line(ev)
      ide.on_goto_line(ev)
   end

   method on_match_parenthesis(ev)
      local file_contents := "", FileBuffer, mparens
      FileBuffer := ide.CurrentEditBox().get_contents()
      every file_contents ||:= !FileBuffer
      mparens := MatchParen()
      mparens.test(file_contents)
   end

   #
   # Insert Code
   #
   method on_insert_proc(ev)
      ide.on_procedure_btn(ev)
   end

   method on_insert_class(ev)
      ide.on_class_btn(ev)
   end

   method on_insert_method(ev)
      ide.on_method_btn(ev)
   end

   #
   # Compile Code
   #
   method on_make_exe(ev)
      if \ (ide.CurrentEditBox().contents_changed()) then
         ide.save()
      uidlog.MsgBox.set_contents([""])
      ide.complink()
   end

   method on_compile_only(ev)
      if \ (ide.CurrentEditBox().contents_changed()) then
         ide.save()
      ide.compile()
   end

   method on_compile_options(ev)
      local oldwindow := &window
      dialogFor := "compile"
      /targs := ""
      # Confusing historical semantics of functions like TextDialog().
      # Do they open relative (e.g. centered) to an existing main &window?
      # Or do they just modify &window such that it needs saved/restored?
      &window := &null
      if TextDialog("Enter compiler options: ",,targs,60) == "Okay" then
	 targs := dialog_value[1]
      &window := oldwindow
      # having obtained some compile options, where do they go? Project object?
   end

   #
   # Run Code
   #
   method on_run_program(ev)
      if \ (ide.CurrentEditBox().contents_changed()) then
         ide.save()
      ide.run()
   end

   method on_run_arguments(ev)
      local oldwindow := &window
      dialogFor := "run"
      /xargs := ""
      # Confusing historical semantics of functions like TextDialog().
      # Do they open relative (e.g. centered) to an existing main &window?
      # Or do they just modify &window such that it needs saved/restored?
      &window := &null
      if TextDialog("Enter command line arguments: ",,xargs,60) == "Okay" then
	 xargs := dialog_value[1]
      &window := oldwindow
      # having obtained some run arguments, where do they go? Project object?
   end

   #
   # Delegate BufferTextList functionality
   #
   method on_copy(ev)
      ide.CurrentEditBox().handle_copy(ev)
   end

   method on_cut(ev)
      ide.CurrentEditBox().handle_cut(ev)
   end

   method on_paste(ev)
      ide.CurrentEditBox().handle_paste(ev)
   end

   method on_undo(ev)
      ide.CurrentEditBox().handle_undo()
   end

   method on_redo(ev)
      ide.CurrentEditBox().handle_redo()
   end

   method on_select_all(ev)
      ide.CurrentEditBox().handle_select_all()
   end

   method on_debuggIt(ev)
      on_msgs_50(ev)
      ide.debuggIt()
   end

   #
   # Project Code
   #

   method on_open_uniconProject(ev)
      local pname
      projectname := ide.handle_openfile(ev)
      projectOpened := "TRUE"

      pname := file_name(\projectname)
      projecttype := "Unicon"

      uidlog.tab_item_1.set_label("Messages: (Project Mode)")
      uidlog.DevTabSet.set_which_one(uidlog.tab_item_1)
      uidlog.tab_item_1.init()
      uidlog.DevTabSet.resize()
      make_compile_unicon.set_label("Make Unicon")
   end

   method on_new_UniconProject(ev)
      local newUPro, pname

      projectname := ide.ProjectSave()

      if \projectname then {
	 pname := file_name(projectname)
	 filedirectory := projectname[1:(*projectname - *pname)]

	 newUPro := UProject(pname,filedirectory)

	 newUPro.show_modal()
	 }
      projecttype := "Unicon"
      projectCreated := "TRUE"
      uidlog.tab_item_1.set_label("Messages: (Project Mode)")
      uidlog.DevTabSet.set_which_one(uidlog.tab_item_1)
      uidlog.tab_item_1.init()
      uidlog.DevTabSet.resize()
      make_compile_unicon.set_label("Make Unicon")
   end

   #
   # Method on_make_compile_Project; it allows making
   # or compiling the Unicon projects
   #
   method on_make_compile_Project()
      local console, pname, pname2
      lst := []
      pname := ide.CurrentTabItem().label
      pname2 := pname[1:*pname-4]

$ifdef _UNIX
      console := "konsole --vt_sz 70x18 "
$else # implies Windows for now
      console := "cmd "
$endif

      if \projecttype == "Unicon" then {
	 chdir(filedirectory)
	 ide.system("make deps")
	 ide.system("make -f " || pname2 || "_uprjMakefile > " ||
		    wiconlog || " 2>&1", lst, 1)
	 ide.showanyerror(wiconlog, lst)
	 }
      fileCompiled := "TRUE"
   end

   method on_project_check()
      local sav
      sav := &window
      &window := &null
      Notice("Project Path Unknown")
      &window := sav
   end

   method on_open_Project(ev)
      ide.handle_openfile(ev)
      projectOpened := "TRUE"
   end

   method on_make_clean()
      local pname, pname2
      lst := []
      pname := ide.CurrentTabItem().label
      pname2 := pname[1:*pname-4]

      if \ (projectCreated | projectOpened) == "TRUE" then {
	 if \projecttype == "Unicon" then {
	    chdir(filedirectory)
	    ide.system("make clean -f " || pname2 || "_uprjMakefile > " ||
		   wiconlog || " 2>&1", lst, 1)
	    }
	 ide.showanyerror(wiconlog, lst)
	 }
      else on_project_check()
   end

   method on_make_clean_all()
      local pname, pname2
      lst :=[]
      pname := ide.CurrentTabItem().label
      pname2 := pname[1:*pname-4]

      if \projectCreated == "TRUE" then {
	 if \projecttype == "Unicon" then {
	    chdir(filedirectory)
	    ide.system("make clean -f "||pname2||"_uprjMakefile"||
	       " > "||wiconlog||" 2>&1",lst,1)
	    }
	 ide.showanyerror(wiconlog, lst)
	 }
      else on_project_check()
   end

   method on_run_project()
      local console, cmd, pname, pname2
      lst := []
      pname := ide.CurrentTabItem().label
      pname2 := pname[1:*pname-4] || ".exe"

$ifdef _UNIX
      console := "konsole --vt_sz 70x18 "
$else # implies Windows for now
      console := "cmd "
$endif
      if \projecttype == "Unicon" then { #run unicon projects
	 chdir(filedirectory)
$ifdef _UNIX
	 # path search, see if xterm exists on path, use it
	 if pathfind("xterm", getenv("PATH")) then {
	    console :="xterm -hold -e "
	    ide.system(console || " ./UProject")
	    }
	 else #just run without "console || ..."
	    ide.system(pname2)
$else
	 ide.system(console || " ./UProject")
$endif
	 }
   end

   #
   # Help Menu Code
   #
   method on_ui_programming_envi(ev)
      handle_help("doc/utr/utr12.html",
		  "http://unicon.sourceforge.net/utr/utr12.html")
   end

   method on_tutorial_overview(ev)
      handle_help("doc/icon/ipd266.htm",
		  "http://www.cs.arizona.edu/icon/docs/ipd266.htm")
   end

   method on_icon_ref()
      handle_help("doc/icon/ipd266.htm",
		  "http://www.cs.arizona.edu/icon/refernce/ref.htm")
   end

   method on_unicon_ref()
      handle_help("doc/unicon/utr8.html",
		  "http://unicon.sourceforge.net/utr/utr8.html")
   end

   method on_graphics_ref()
      handle_help("doc/icon/ipd281.htm",
		  "http://www.cs.arizona.edu/icon/docs/ipd281.htm")
   end

   method on_graphics3D_ref()
      handle_help("doc/utr/utr9.html",
		  "http://unicon.org/utr/utr9.html")
   end

   method on_icon_prog_library()
      handle_help("doc/icon/ipd283.htm",
		  "http://www.cs.arizona.edu/icon/docs/ipd283.htm")
   end

   method on_ivib_interface_builder()
      handle_help("doc/utr/utr6.html",
		  "http://unicon.org/utr/utr6.html")
   end

   method on_icon_faq()
      handle_help("doc/icon/faq.htm",
		  "http://www.cs.arizona.edu/icon/faq.htm")
   end

   method on_unicon_faq()
      handle_help("doc/unicon/faq.html",
		  "http://unicon.sourceforge.net/faq.html")
   end

   method on_unicon_manpage()
      handle_help("doc/unicon/utr11.html",
		  "http://unicon.org/utr/utr11.html")
   end
      
   #
   # Launch online help, if we are online.
   #
   method handle_help(filename, URL)
      local URL2 := "", f, sysline, nonot, fout, fout2, foutname, foutname2
      local line, p, s

      if /browser then {
	 uidlog.MsgBox.set_contents([
	    "Sorry, you must configure a browser in order for help to work."])
	 fail
	 }

$ifdef _UNIX
      if not match("online", is_online()) then {
	 # use local copy since UI thinks we are offline
	 if \docpath then {
	    URL := "file://" || \docpath || filename
	    }
	 else URL := "file://" || filename
	 }

      if find("netscape"|"firefox", \browser) then {
	 if /browserversion then {
	    if p := open(\browser || " -version", "p") then {
	       s := read(p)
	       close(p)
	       s ? {
		  tab(upto(&digits))
		  browserversion := real(tab(many(&digits)))
		  }
	       }
	    }
	 if \browserversion <36 then
	    URL2 := " -remote 'openURL(" || URL || ")'"
	 else URL2 := " " || URL
	 }
      else if browser=="open" then {
	 URL2 := " -a Safari " || URL
	 }
      else URL2 := " " || URL

      foutname := tempname("ui", ".err")
      foutname2 := tempname("ui", ".err2")
      fout := open(foutname,"w")
      fout2 := open(foutname2,"w")

      sysline := \browser || " " || URL2
      uidlog.MsgBox.set_contents(["launching " || sysline])
      proc("system",0)(sysline, , fout, fout2, "nowait")
      delay(1000)
      close(\fout)
      close(\fout2)

      if find("netscape"|"firefox", \browser) then {
         if f := open("cat " ||
		      (if \fout then foutname else "") ||
		      " "||
		      (if \fout2 then foutname2 else ""),"p") then {
            line := ""
            while line ||:= read(f)
            map(line) ? {
               if tab(find(nonot:=("no"|"not")) + *nonot) & tab(many(' ')) &
		  ="running" then {
               #   write(&errout, \browser, " not running, reverting to URL")
		  if \fout then remove(foutname)
		  if \fout2 then remove(foutname2)
		  fout := fout2 := &null
		  fout := open(foutname,"w")
                  fout2 := open(foutname2,"w")
                  proc("system",0)(\browser||" "||URL, , fout, fout2, "nowait")
		  close(\fout)
		  close(\fout2)
		  if \fout then remove(foutname)
		  if \fout2 then remove(foutname2)
                  }
               else {
               #   write(&errout, \browser, " was running, so we are good")
                  }
	       }
            close(f)
            }
         }
$else
      if \docpath then {
	 URL := "file://" || map(\docpath || filename,"/",PATHSEP)
	 }
      uidlog.MsgBox.set_contents([
	 "launching " || browser || " " || URL])
      proc("system",0)(\browser || " " || URL) # || " &")
      #s := \browser[2:-1] || " " || URL
      #proc("system",0)(s,,,,1)
$endif
   end

   method on_about(ev)
      static d
      initial { d := about() }
      d.show_modal()
   end

   #
   # View Setup Code
   #
   method on_view_window_all(ev)
      local pos_y, size_y
      pos_y := 8+tb_adj||"%"
      size_y := 71-tb_adj||"%"
      cur_ide_win_setup := "view_window_all"
      uidlog.DevTabSet.set_pos("0", "79%")
      uidlog.DevTabSet.set_size("100%", "21%")
      uidlog.FileTabSet.set_pos("15%", pos_y)
      uidlog.FileTabSet.set_size("85%", size_y)
      uidlog.ClassTabSet.set_pos("0", pos_y)
      uidlog.ClassTabSet.set_size("15%", size_y)
      uidlog.MsgBox.set_pos("2", "2")
      uidlog.MsgBox.set_size("100%-4", "100%-4")
      uidlog.EditBox.set_pos("2", "2")
      uidlog.EditBox.set_size("100%-4", "100%-4")
      uidlog.FileBrowser.set_pos("2", "2")
      uidlog.FileBrowser.set_size("100%-4", "100%-4")
      uidlog.DevTabSet.resize()
      uidlog.FileTabSet.resize()
      uidlog.ClassTabSet.resize()
      uidlog.pnlToolbar.resize()
   end

   method on_view_window_files(ev)
      local pos_y, size_y
      pos_y := 8+tb_adj||"%"
      size_y := 92-tb_adj||"%"
      cur_ide_win_setup := "view_window_files"
      uidlog.DevTabSet.set_pos("0", "110%")
      uidlog.DevTabSet.set_size("0", "0")
      uidlog.FileTabSet.set_pos("0", pos_y)
      uidlog.FileTabSet.set_size("100%", size_y)
      uidlog.ClassTabSet.set_pos("0", "110%")
      uidlog.EditBox.set_pos("2", "2")
      uidlog.EditBox.set_size("100%-4", "100%-4")
      uidlog.DevTabSet.resize()
      uidlog.FileTabSet.resize()
      uidlog.ClassTabSet.resize()
      uidlog.pnlToolbar.resize()
   end

   method on_view_window_filesmsgs(ev)
      local pos_y, size_y
      pos_y := 8+tb_adj||"%"
      size_y := 71-tb_adj||"%"
      cur_ide_win_setup := "view_window_filesmsgs"
      uidlog.DevTabSet.set_pos("0", "79%")
      uidlog.DevTabSet.set_size("100%", "21%")
      uidlog.FileTabSet.set_pos("0", pos_y)
      uidlog.FileTabSet.set_size("100%", size_y)
      uidlog.ClassTabSet.set_pos("0", "110%")
      uidlog.MsgBox.set_pos("2", "2")
      uidlog.MsgBox.set_size("100%-4", "100%-4")
      uidlog.EditBox.set_pos("2", "2")
      uidlog.EditBox.set_size("100%-4", "100%-4")
      uidlog.DevTabSet.resize()
      uidlog.FileTabSet.resize()
      uidlog.ClassTabSet.resize()
      uidlog.pnlToolbar.resize()
   end

   method on_view_window_filesclassbrowser(ev)
      local pos_y, size_y
      pos_y := 8+tb_adj||"%"
      size_y := 92-tb_adj||"%"
      cur_ide_win_setup := "view_window_filesclassbrowser"
      uidlog.DevTabSet.set_pos("0", "110%")
      uidlog.DevTabSet.set_size("0", "0")
      uidlog.FileTabSet.set_pos("15%", pos_y)
      uidlog.FileTabSet.set_size("85%", size_y)
      uidlog.ClassTabSet.set_pos("0", pos_y)
      uidlog.ClassTabSet.set_size("15%", size_y)
      uidlog.EditBox.set_pos("2", "2")
      uidlog.EditBox.set_size("100%-4", "100%-4")
      uidlog.DevTabSet.resize()
      uidlog.FileTabSet.resize()
      uidlog.ClassTabSet.resize()
      uidlog.pnlToolbar.resize()
   end

   method update_view_window(ev)
      case cur_ide_win_setup of {
	 "view_window_all" : on_view_window_all(ev)
	 "view_window_files" : on_view_window_files(ev)
	 "view_window_filesmsgs" : on_view_window_filesmsgs(ev)
	 "view_window_filesclassbrowser" : on_view_window_filesclassbrowser(ev)
	 default : write("ERROR")
	 }
   end

   method on_hide_toolbar(ev)
      if hide_toolbar.get_label() == "Hide Toolbar" then {
	 cur_ide_tb_status := "hide"
	 hide_toolbar.set_label("Show Toolbar")
	 uidlog.pnlToolbar.set_pos("0", "110%")
	 tb_adj := -4
	 }
      else {
	 cur_ide_tb_status := "show"
	 hide_toolbar.set_label("Hide Toolbar")
	 uidlog.pnlToolbar.set_pos("0","4.5%")
	 tb_adj := 0
	 }
      update_view_window(ev)
   end

   method on_msgs_100(ev)
      uidlog.FileTabSet.set_pos("150", "50")
      uidlog.FileTabSet.set_size("100%-150", "100%-260")
      uidlog.ClassTabSet.set_pos("0", "50")
      uidlog.ClassTabSet.set_size("150", "100%-260")
      uidlog.DevTabSet.set_pos("0", "100%-210")
      uidlog.DevTabSet.set_size("100%", "210")
      uidlog.EditBox.set_pos("2", "2")
      uidlog.EditBox.set_size("100%-4", "100%-4")
      uidlog.MsgBox.set_pos("2", "2")
      uidlog.MsgBox.set_size("100%-4", "100%-4")
      uidlog.FileBrowser.set_pos("2", "2")
      uidlog.FileBrowser.set_size("100%-4", "100%-4")
      uidlog.FileTabSet.resize()
      uidlog.ClassTabSet.resize()
#      uidlog.DevTabSet.resize()
      uidlog.pnlToolbar.resize()
   end

   method on_msgs_50(ev)
      uidlog.FileTabSet.set_pos("150", "50")
      uidlog.FileTabSet.set_size("100%-150", "100%-210")
      uidlog.ClassTabSet.set_pos("0", "50")
      uidlog.ClassTabSet.set_size("150", "100%-210")
      uidlog.DevTabSet.set_pos("0", "100%-160")
      uidlog.DevTabSet.set_size("100%", "160")
      uidlog.EditBox.set_pos("2", "2")
      uidlog.EditBox.set_size("100%-4", "100%-4")
      uidlog.MsgBox.set_pos("2", "2")
      uidlog.MsgBox.set_size("100%-4", "100%-4")
      uidlog.FileBrowser.set_pos("2", "2")
      uidlog.FileBrowser.set_size("100%-4", "100%-4")
      uidlog.FileTabSet.resize()
      uidlog.ClassTabSet.resize()
#      uidlog.DevTabSet.resize()
      uidlog.pnlToolbar.resize()
   end

   method on_msgs_normal(ev)
      update_view_window(ev)
   end

   method on_classbrowser_100(ev)
      uidlog.FileTabSet.set_pos("250", "50")
      uidlog.FileTabSet.set_size("100%-260", "100%-160")
      uidlog.ClassTabSet.set_pos("0", "50")
      uidlog.ClassTabSet.set_size("250", "100%-160")
#      uidlog.DevTabSet.set_pos("0", "100%-110")
#      uidlog.DevTabSet.set_size("100%", "110")
      uidlog.EditBox.set_pos("2", "2")
      uidlog.EditBox.set_size("100%-4", "100%-4")
      uidlog.MsgBox.set_pos("2", "2")
      uidlog.MsgBox.set_size("100%-4", "100%-4")
      uidlog.FileBrowser.set_pos("2", "2")
      uidlog.FileBrowser.set_size("100%-4", "100%-4")

      uidlog.FileTabSet.resize()
      uidlog.ClassTabSet.resize()
#      uidlog.DevTabSet.resize()
      uidlog.pnlToolbar.resize()
   end

   method on_classbrowser_50(ev)
      uidlog.FileTabSet.set_pos("200", "50")
      uidlog.FileTabSet.set_size("100%-210", "100%-160")
      uidlog.ClassTabSet.set_pos("0", "50")
      uidlog.ClassTabSet.set_size("200", "100%-160")
#      uidlog.DevTabSet.set_pos("0", "100%-110")
#      uidlog.DevTabSet.set_size("100%", "110")
      uidlog.EditBox.set_pos("2", "2")
      uidlog.EditBox.set_size("100%-4", "100%-4")
      uidlog.MsgBox.set_pos("2", "2")
      uidlog.MsgBox.set_size("100%-4", "100%-4")
      uidlog.FileBrowser.set_pos("2", "2")
      uidlog.FileBrowser.set_size("100%-4", "100%-4")

      uidlog.FileTabSet.resize()
      uidlog.ClassTabSet.resize()
#      uidlog.DevTabSet.resize()
      uidlog.pnlToolbar.resize()
   end

   method on_classbrowser_normal(ev)
      update_view_window(ev)
   end

   #
   # Config Code
   #
   method set_font(fname, fcolor)
      local tab_item, buff_editable, type, size, style, l, i:=1,
	 prefs := uidlog.ui_Preferences
      /fontname := "mono,16"
      if not (/fname := fontname) then fontname := fname
      fontname ? {
	 type := tab(find(","))
	 tab(upto(&digits))
	 size := integer(tab(many(&digits)))
	 =","
	 style := tab(0)
	 }
      if size > 36 | type == "" then {
	 if size > 36 then size := "36"
	 if type == "" then type := "mono"
	 fontname := type||","||size
	 fontname ||:= \style
	 }
      uidlog.MsgBox.set_attribs("font=" || fontname)

      if \prefs.sample_box then {
	 l := prefs.sample_box.attribs
	 while i <= *l do {
	    if match("font=", l[i]) then
	       delete(l, i)
	    else
	       i +:= 1
	    }
	 prefs.sample_box.set_attribs("font=" || fontname)
	 i := 1
	 }

      every tab_item := !uidlog.FileTabSet.children do
	 every buff_editable := !tab_item.children do {
	    l := buff_editable.attribs
	    while i <= *l do {
	       if match("font=", l[i]) then
		  delete(l, i)
	       else
		  i +:= 1
	    }
	    buff_editable.set_attribs("font="||fontname)
	 }
      uidlog.init()
      uidlog.resize()
      uidlog.display()
   end

   method on_font()
      local f
      f := fontdialog(fontname)
      fontname := \f
      set_font()
   end

   method on_preferences()
      local tab_item, buff_editable, l, i:=1, ceb:=ide.CurrentEditBox()
      local prefs := uidlog.ui_Preferences

      prefs.show_modal()

      every tab_item := !uidlog.FileTabSet.children do
	 every buff_editable := !tab_item.children do {
	    l := buff_editable.attribs
	    while i <= *l do {
	       if match("bg=", l[i]) then
	          delete(l, i)
	       else
	          i +:= 1
	    }
	    buff_editable.set_attribs("bg="||prefs.val_background_color)
	    WAttrib(\ (buff_editable.cbwin), "bg="||prefs.val_background_color)
	    WAttrib(\ (buff_editable.view.cbwin),
	            "bg="||prefs.val_background_color)
	 }
      ceb.display()
   end

$ifdef _UNIX
$define PS "/"
$define FILE ".uirc"
$else
$define PS "\\"
$define FILE "_uirc"
$endif
   method save_config()
      local f, pos_x, pos_y, prefs := uidlog.ui_Preferences
      WAttrib("pos") ? {
	 pos_x := tab(find(","))
	 =","
	 pos_y := tab(many('-' ++ &digits))
	 }
      pos_x := integer(pos_x)
      pos_y := integer(pos_y)
      if /pos_x | pos_x < 0 then pos_x := 0
      if /pos_y | pos_y < 0 then pos_y := 0
      win_position := pos_x || "," || pos_y
      width := WAttrib("width")
      height := WAttrib("height")
      if f := open(getenv("HOME"|"HOMEDIR"|"LOCALAPPDATA")||PS||FILE,"w") then {
	 write(f,  "position=",win_position, "\n",
	       "width=",width, "\n",
	       "height=",height,"\n",
	       "window_setup=", cur_ide_win_setup, "\n",
	       "toolbar_status=", cur_ide_tb_status, "\n",
	       "msglines=",msglines,"\n",
	       "font=",fontname, "\n",
	       "linebreak=",linebreak, "\n",
	       "val_background_color=", prefs.val_background_color, "\n",
	       "linenumber_highlight_color=", prefs.linenumber_highlight_color, "\n",
	       "default_text_color=", prefs.default_text_color, "\n",
	       "cursor_highlight_color=", prefs.cursor_highlight_color, "\n",
	       "cursor_text_color=", prefs.cursor_text_color, "\n",
	       "syntax_text_color=", prefs.syntax_text_color, "\n",
	       "glob_text_color=", prefs.glob_text_color, "\n",
	       "procedure_text_color=", prefs.procedure_text_color, "\n",
	       "quote_text_color=", prefs.quote_text_color, "\n",
	       "comment_text_color=", prefs.comment_text_color, "\n",
	       "linenumber_text_color=", prefs.linenumber_text_color, "\n",
	       "text_highlight_color=", prefs.text_highlight_color, "\n",
	       "error_text_color=", prefs.error_text_color, "\n",
	       "parentheses_match=", prefs.paren_check_box_state, "\n",
	       "syntax_highlighting=", prefs.syntax_check_box_state, "\n"
	       )
	 close(f)
	 }
      else
	 uidlog.MsgBox.set_contents(["couldn't save settings"])
   end

   method load_config()
      local f, prefs := uidlog.ui_Preferences, line
      if f := open(getenv("HOME"|"HOMEDIR"|"LOCALAPPDATA")||PS||FILE,"r") then {
	 while line := read(f) do {
	    line ? {
	       if ="position" then {
		  tab(upto(&digits))
		  win_position := tab(many(&digits ++ ','))
		  }
	       else if ="height" then {
		  tab(upto(&digits))
		  height := integer(tab(many(&digits)))
		  }
	       else if ="width" then {
		  tab(upto(&digits))
		  width := integer(tab(many(&digits)))
		  }
	       else if ="window_setup" then {
		  tab(many('= \t'))
		  cur_ide_win_setup := tab(0)
		  }
	       else if ="toolbar_status" then {
		  tab(many('= \t'))
		  cur_ide_tb_status := tab(0)
		  }
	       else if ="msglines" then {
		  tab(upto(&digits))
		  msglines := integer(tab(many(&digits)))
		  }
	       else if ="font" then {
		  tab(many('= \t'))
		  fontname := tab(0)
		  }
	       else if ="linebreak" then {
		  tab(many('= \t'))
		  linebreak := tab(0)
		  }
	       else if ="val_background_color" then {
		  tab(many('= \t'))
		  prefs.val_background_color := tab(0)
		  }
	       else if ="linenumber_highlight_color" then {
		  tab(many('= \t'))
		  prefs.linenumber_highlight_color := tab(0)
		  }
	       else if ="default_text_color=" then {
		  tab(many('= \t'))
		  prefs.default_text_color := tab(0)
		  }
	       else if ="cursor_highlight_color" then {
		  tab(many('= \t'))
		  prefs.cursor_highlight_color := tab(0)
		  }
	       else if ="cursor_text_color" then {
		  tab(many('= \t'))
		  prefs.cursor_text_color := tab(0)
		  }
	       else if ="syntax_text_color" then {
		  tab(many('= \t'))
		  prefs.syntax_text_color := tab(0)
		  }
	       else if ="glob_text_color" then {
		  tab(many('= \t'))
		  prefs.glob_text_color := tab(0)
		  }
	       else if ="procedure_text_color" then {
		  tab(many('= \t'))
		  prefs.procedure_text_color := tab(0)
		  }
	       else if ="quote_text_color" then {
		  tab(many('= \t'))
		  prefs.quote_text_color := tab(0)
		  }
	       else if ="comment_text_color" then {
		  tab(many('= \t'))
		  prefs.comment_text_color := tab(0)
		  }
	       else if ="linenumber_text_color" then {
		  tab(many('= \t'))
		  prefs.linenumber_text_color := tab(0)
		  }
	       else if ="text_highlight_color" then {
		  tab(many('= \t'))
		  prefs.text_highlight_color := tab(0)
		  }
	       else if ="error_text_color" then {
		  tab(many('= \t'))
		  prefs.error_text_color := tab(0)
		  }
	       else if ="parentheses_match" then {
		  tab(many('= \t'))
		  prefs.paren_check_box_state := tab(0)
		  }
	       else if ="syntax_highlighting" then {
		  tab(many('= \t'))
		  prefs.syntax_check_box_state := tab(0)
		  }
	       }
	    }
	 close(f)
	 }
      else
	 return "couldn't load saved settings"
   end

   #
   # IVIB
   #
   method on_ivib(ev)
      ide.on_ivib(ev)
   end

   #
   # IDE Main Menu Bar Method: Adds a simple menubar into the IDE tab.
   #
   method Menubar()
   local graphics2D_ref, graphics3D_ref, new_UniconProject, font
      menu_bar_1 := MenuBar()
      menu_bar_1.set_pos("0", "0")
      menu_bar_1.set_size("100%", "4.5%")
      menu_bar_1.set_attribs("bg=very light whitish gray", "font=mono,bold,16", "resize=on")
      menu_1 := Menu()
      menu_1.set_label("File")
      new_file := TextMenuItem()
      new_file.set_label("New")
      new_file.connect(self, "on_new_file", ACTION_EVENT)
      new_file.set_img_left("16,c1,~~~~~~~~~~~~~~~~~~>>>>>>>>>~~~~~~~>6666666>>~~~~~~>6666666>`>~~~~~>6666666>>>>~~~~>6666666666>~~~~>6666666666>~~~~>6666666666>~~~~>6666666666>~~~~>6666666666>~~~~>6666666666>~~~~>6666666666>~~~~>6666666666>~~~~>6666666666>~~~~>>>>>>>>>>>>~~~~~~~~~~~~~~~~~~")
      menu_1.add(new_file)
      open_file := TextMenuItem()
      open_file.set_label("Open")
      open_file.connect(self, "on_open_file", ACTION_EVENT)
      open_file.set_img_left("16,c1,~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~>>>~~~~~~~~~~~~>~~~>~>~~~~~~~~~~~~~~>>~~>>>~~~~~~~~>>>~>`6`>>>>>>>~~~~~>6`6`6`6`6>~~~~~>`6`6`6`6`>~~~~~>6`6`>>>>>>>>>>>>`6`><<<<<<<<<>~>6`><<<<<<<<<>~~>`><<<<<<<<<>~~~>><<<<<<<<<>~~~~>>>>>>>>>>>~~~~~~~~~~~~~~~~~~~~~")
      menu_1.add(open_file)
      close_file := TextMenuItem()
      close_file.set_label("Close")
      close_file.connect(self, "on_close_file", ACTION_EVENT)
      close_file.set_img_left("16,c1,~~~~~~~~~~~~~~~~~~>>>>>>>>>~~~~~~AA6666666>>~A~~~AAAA66666>AA~~~~~AAAA6666AA>>~~~~>6AAA66AA66>~~~~>66AAAAA666>~~~~>666AAA6666>~~~~>66AAAAA666>~~~~>6AAA66AA66>~~~~>AAA6666AA6>~~~~AAA666666A6>~~~~AAA6666666A>~~~~>A666666666>~~~~>>>>>>>>>>>A~~~~~~~~~~~~~~~~~~")
      menu_1.add(close_file)
      print_file := TextMenuItem()
      print_file.set_label("Print")
      print_file.connect(self, "on_print_file", ACTION_EVENT)
      print_file.set_img_left("16,c1,666<111111111<66666<122222221<66666<255555552<66666<2<<<<<<<2<66666<133333<<2<66666<133333<<2<66666<255555552<66666<255555552<66666<133333<52<66<<<22555555522<<12333<<<<<<<333212<<<2222222<<<212<<<<<<<<<<<<<212<<<<<<<<<<<<<2223<<<<<<<<<<432<<2222222222222<")
      menu_1.add(print_file)
      save_file := TextMenuItem()
      save_file.set_label("Save")
      save_file.connect(self, "on_save_file", ACTION_EVENT)
      save_file.set_img_left("16,c1,~~~~~~~~~~~~~~~~~>>>>>>>>>>>>>>~~>`>66666666>6>~~>`>66666666>>>~~>`>66666666>`>~~>`>66666666>`>~~>`>66666666>`>~~>`>66666666>`>~~>``>>>>>>>>``>~~>````````````>~~>```>>>>>>>``>~~>``>>>>>>66>`>~~>``>>>>>>66>`>~~>``>>>>>>66>`>~~~>>>>>>>>>>>>>~~~~~~~~~~~~~~~~~")
      menu_1.add(save_file)
      saveas_file := TextMenuItem()
      saveas_file.set_label("Save As")
      saveas_file.connect(self, "on_saveas_file", ACTION_EVENT)
      saveas_file.set_img_left("16,c1,~~~~~~~~~~~~~~~~~>>>>>>>>~~~~~~~~>666666>>~~~~~~~>666666>>>~~~~~~>66666666>~~~~~~>666>>>>>>>>>>~~>666>`>6666>6>~~>666>`>6666>>>~~>666>`>6666>`>~~>666>``>>>>``>~~>666>````````>~~>666>``>>>>``>~~>>>>>`>>>>6>`>~~~~~~>`>>>>6>`>~~~~~~~>>>>>>>>>~~~~~~~~~~~~~~~~~")
      menu_1.add(saveas_file)
      ivib := TextMenuItem()
      ivib.set_label("Ivib")
      ivib.connect(self, "on_ivib", ACTION_EVENT)
      menu_1.add(ivib)
      exit_menu_item := TextMenuItem()
      exit_menu_item.set_label("Exit")
      exit_menu_item.connect(self, "on_exit", ACTION_EVENT)
      menu_1.add(exit_menu_item)
      menu_bar_1.add(menu_1)
      menu_6 := Menu()
      menu_6.set_label("View")
      window_submenu := Menu()
      window_submenu.set_label("Window")
      view_window_all := TextMenuItem()
      view_window_all.set_label("All")
      view_window_all.connect(self, "on_view_window_all", ACTION_EVENT)
      view_window_all.set_img_left("16,c1,~~~~~~~~~~~~~~~~~>>>>>>>>>>>>>>~~><<<<<<<<<<<<>~~>>>>>>>>>>>>>>~~>66>`````````>~~>66>`````````>~~>66>`````````>~~>66>`````````>~~>66>`````````>~~>66>`````````>~~>66>`````````>~~>>>>>>>>>>>>>>~~>666666666666>~~>666666666666>~~>>>>>>>>>>>>>>~~~~~~~~~~~~~~~~~")
      window_submenu.add(view_window_all)
      view_window_files := TextMenuItem()
      view_window_files.set_label("Files")
      view_window_files.connect(self, "on_view_window_files", ACTION_EVENT)
      view_window_files.set_img_left("16,c1,~~~~~~~~~~~~~~~~~>>>>>>>>>>>>>>~~><<<<<<<<<<<<>~~>>>>>>>>>>>>>>~~>````````````>~~>````````````>~~>````````````>~~>````````````>~~>````````````>~~>````````````>~~>````````````>~~>````````````>~~>````````````>~~>````````````>~~>>>>>>>>>>>>>>~~~~~~~~~~~~~~~~~")
      window_submenu.add(view_window_files)
      view_window_filesmsgs := TextMenuItem()
      view_window_filesmsgs.set_label("Files/Messages")
      view_window_filesmsgs.connect(self, "on_view_window_filesmsgs", ACTION_EVENT)
      view_window_filesmsgs.set_img_left("16,c1,~~~~~~~~~~~~~~~~~>>>>>>>>>>>>>>~~><<<<<<<<<<<<>~~>>>>>>>>>>>>>>~~>````````````>~~>````````````>~~>````````````>~~>````````````>~~>````````````>~~>````````````>~~>````````````>~~>>>>>>>>>>>>>>~~>666666666666>~~>666666666666>~~>>>>>>>>>>>>>>~~~~~~~~~~~~~~~~~")
      window_submenu.add(view_window_filesmsgs)
      view_window_filesclassbrowser := TextMenuItem()
      view_window_filesclassbrowser.set_label("Files/Class Browser")
      view_window_filesclassbrowser.connect(self, "on_view_window_filesclassbrowser", ACTION_EVENT)
      view_window_filesclassbrowser.set_img_left("16,c1,~~~~~~~~~~~~~~~~~>>>>>>>>>>>>>>~~><<<<<<<<<<<<>~~>>>>>>>>>>>>>>~~>66>`````````>~~>66>`````````>~~>66>`````````>~~>66>`````````>~~>66>`````````>~~>66>`````````>~~>66>`````````>~~>66>`````````>~~>66>`````````>~~>66>`````````>~~>>>>>>>>>>>>>>~~~~~~~~~~~~~~~~~")
      window_submenu.add(view_window_filesclassbrowser)
      menu_6.add(window_submenu)
      hide_toolbar := TextMenuItem()
      if cur_ide_tb_status == "show" then
         hide_toolbar.set_label("Show Toolbar")
      else
         hide_toolbar.set_label("Hide Toolbar")
      hide_toolbar.connect(self, "on_hide_toolbar", ACTION_EVENT)
      menu_6.add(hide_toolbar)
      msgs_submenu := Menu()
      msgs_submenu.set_label("Messages")
      msgs_normal := TextMenuItem()
      msgs_normal.set_label("normal")
      msgs_normal.connect(self, "on_msgs_normal", ACTION_EVENT)
      msgs_submenu.add(msgs_normal)
      msgs_50 := TextMenuItem()
      msgs_50.set_label("+50")
      msgs_50.connect(self, "on_msgs_50", ACTION_EVENT)
      msgs_submenu.add(msgs_50)
      msgs_100 := TextMenuItem()
      msgs_100.set_label("+100")
      msgs_100.connect(self, "on_msgs_100", ACTION_EVENT)
      msgs_submenu.add(msgs_100)
      menu_6.add(msgs_submenu)
      classbrowser_submenu := Menu()
      classbrowser_submenu.set_label("Class Browser")
      classbrowser_normal := TextMenuItem()
      classbrowser_normal.set_label("normal")
      classbrowser_normal.connect(self, "on_classbrowser_normal", ACTION_EVENT)
      classbrowser_submenu.add(classbrowser_normal)
      classbrowser_50 := TextMenuItem()
      classbrowser_50.set_label("+50")
      classbrowser_50.connect(self, "on_classbrowser_50", ACTION_EVENT)
      classbrowser_submenu.add(classbrowser_50)
      classbrowser_100 := TextMenuItem()
      classbrowser_100.set_label("+100")
      classbrowser_100.connect(self, "on_classbrowser_100", ACTION_EVENT)
      classbrowser_submenu.add(classbrowser_100)
      menu_6.add(classbrowser_submenu)
      menu_bar_1.add(menu_6)
      menu_7 := Menu()
      menu_7.set_label("Config")
      font := TextMenuItem()
      font.set_label("Font")
      font.connect(self, "on_font", ACTION_EVENT)
      menu_7.add(font)
      preferences := TextMenuItem()
      preferences.set_label("Preferences")
      preferences.connect(self, "on_preferences", ACTION_EVENT)
      menu_7.add(preferences)
      saveoptions := TextMenuItem()
      saveoptions.set_label("Save options")
      saveoptions.connect(self, "save_config", ACTION_EVENT)
      menu_7.add(saveoptions)
      menu_bar_1.add(menu_7)
      menu_11 := Menu()
      menu_11.set_label("Edit")
      undo := TextMenuItem()
      undo.set_label("Undo")
      undo.connect(self, "on_undo", ACTION_EVENT)
      undo.set_img_left("16,c1,~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~>>>>>~~~~~~~~~~>>>>>>>~~~~~~~~>>>~~~>>>~~~~~~>>>~~~~~>>>~~~~~>>~~~~~~~>>~~~>~>>~>~~~~~>>~~~~>>>>~~~~~~>>~~~~~>>~~~~~~>>>~~~~~~~~~~~~>>>~~~~~~~~~>>>>>>~~~~~~~~~~>>>>>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
      menu_11.add(undo)
      redo := TextMenuItem()
      redo.set_label("redo")
      redo.connect(self, "on_redo", ACTION_EVENT)
      redo.set_img_left("16,c1,~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~>>>>>~~~~~~~~~~>>>>>>>~~~~~~~~>>>~~~>>>~~~~~~>>>~~~~~>>>~~~~~>>~~~~~~~>>~~~~~>>~~~~~>~>>~>~~~>>~~~~~~>>>>~~~~>>>~~~~~~>>~~~~~~>>>~~~~~~~~~~~~~~>>>>>>~~~~~~~~~~~~>>>>>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
      menu_11.add(redo)
      menu_separator_1 := MenuSeparator()
      menu_separator_1.set_is_shaded()
      menu_11.add(menu_separator_1)
      cut := TextMenuItem()
      cut.set_label("Cut")
      cut.connect(self, "on_cut", ACTION_EVENT)
      cut.set_img_left("16,c1,~~~~v~~~~~v~~~~~~~~~v~~~~~v~~~~~~~~~~v~~~v~~~~~~~~~~~v~~~v~~~~~~~~~~~v~~~v~~~~~~~~~~~~v~v~~~~~~~~~~~~~v~v~~~~~~~~~~~~~~I~~~~~~~~~~~~~~VVV~~~~~~~~~~~~~V~VVV~~~~~~~~~VVV~V~~V~~~~~~~V~~V~V~~V~~~~~~~V~~V~V~~V~~~~~~~V~~V~~VV~~~~~~~~~VV~~~~~~~~~~~~~~~~~~~~~~~~~~")
      menu_11.add(cut)
      copy := TextMenuItem()
      copy.set_label("Copy")
      copy.connect(self, "on_copy", ACTION_EVENT)
      copy.set_img_left("16,c1,~~~~~~~~~~~~~~~~vvvvvv~~~~~~~~~~v6666vv~~~~~~~~~v6<<6v6v~~~~~~~~v6666v>>>>>>~~~~v6<<<6>6666>>~~~v66666>6``6>6>~~v6<<<<>6666>>>>~v66666>6```666>~v6<<<<>6666666>~v66666>6`````6>~vvvvvv>6666666>~~~~~~~>6`````6>~~~~~~~>6666666>~~~~~~~>>>>>>>>>~~~~~~~~~~~~~~~~~")
      menu_11.add(copy)
      paste := TextMenuItem()
      paste.set_label("Paste")
      paste.connect(self, "on_paste", ACTION_EVENT)
      paste.set_img_left("18,c1,~~~~~~~~~~~~~~~~~~~~~~~~~~~~>>>>>>~~~~~~~~~~~~>4565>~~~~~~~~~~~>>>>>>>>~~~~~~~~~>56566665>~~~~~~~~>55555654>~~~~~>>>>55555655>~~~~>566G05555654>~~~>>>>4650555655>~~~>4440J6G455654>~~~>5505045>55655>~~~>4>60>>6>55654>~~~~>60>5>5455655>~~~>60>65>>555654>~~>60~>>>>5555655>~4>0~~~~>44444444>>>~~~~~~~>>>>>>>>~ii<i<<~~~~~~~~~~~~")
      menu_11.add(paste)
      select_all := TextMenuItem()
      select_all.set_label("Select All")
      select_all.connect(self, "on_select_all", ACTION_EVENT)
      menu_11.add(select_all)

      replace := TextMenuItem()
      replace.set_label("Find & Replace")
      replace.connect(self, "on_replace", ACTION_EVENT)
      menu_11.add(replace)
      gotoline := TextMenuItem()
      gotoline.set_label("Go To Line ...")
      gotoline.connect(self, "on_goto_line", ACTION_EVENT)
      menu_11.add(gotoline)
      match_parenthesis := TextMenuItem()
      match_parenthesis.set_label("Match Parenthesis")
      match_parenthesis.connect(self, "on_match_parenthesis", ACTION_EVENT)
      menu_11.add(match_parenthesis)
      menu_bar_1.add(menu_11)
      insert_menu := Menu()
      insert_menu.set_label("Insert")
      insert_proc := TextMenuItem()
      insert_proc.set_label("Procedure")
      insert_proc.connect(self, "on_insert_proc", ACTION_EVENT)
      insert_proc.set_img_left("16,c1,~~wwww~~~~~~~~~~~wjjjjw~~~~~~~~~~wjjjjw~~~~~~~~~~wjjjjw~~~~~~~~~~wjjjjw~~~~~~~~~~~wwwwssss~~~~~~~~~~~s++++s~~~~~~~~~~s++++s~~~~~~~~~~s++++s~~~~~~~~~~s++++s~~~~~~~~~~~ssssnnnn~~~~~~~~~~~naaaan~~~~~~~~~~naaaan~~~~~~~~~~naaaan~~~~~~~~~~naaaan~~~~~~~~~~~nnnn~~")
      insert_menu.add(insert_proc)
      insert_class := TextMenuItem()
      insert_class.set_label("Class")
      insert_class.connect(self, "on_insert_class", ACTION_EVENT)
      insert_class.set_img_left("16,c1,~~~~~~~~~~~~~~~~~~wwwww~~~~~yy~~~wjjjjjw~~~yLLy~~wjjjjjw~~~yLLy~~wjjjsssss~~yy~~~wjjsFFS++s~~~~~~wjjsFFS++s~~~~~~~wwsSS+nnnnn~~~~~~~s++nAANaan~~~qq~s++nAANaan~~qDDq~ssnNNaaan~~qDDq~~~naaaaan~~~qq~uu~naaaaan~~~~~uHHu~nnnnn~~~~~~uHHu~~~~~~~~~~~~~uu~~~~~~~~~~")
      insert_menu.add(insert_class)
      insert_method := TextMenuItem()
      insert_method.set_label("Method")
      insert_method.connect(self, "on_insert_method", ACTION_EVENT)
      insert_method.set_img_left("16,c1,~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~yy~~~~~~~~~~~~~yLLy~~~~~~~~~~~~yLLy~~~~~~~~~~~~~yy~~~~~qq~~~~~~~~~~~~~qDDq~~~~~~~~~~~~qDDq~~~~~~~~~~~~~qq~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~uu~~~~~~~~~~~~~uHHu~~~~~~~~~~~~uHHu~~~~~~~~~~~~~uu~~~~~~~~~~~~~~~~~~~~~~~~")
      insert_menu.add(insert_method)
      menu_bar_1.add(insert_menu)
      menu_9 := Menu()
      menu_9.set_label("Compile")
      make_exe := TextMenuItem()
      make_exe.set_label("Make executable")
      make_exe.connect(self, "on_make_exe", ACTION_EVENT)
      make_exe.set_img_left("18,c1,~~~~~~~~~~~~~~~~~~~3333333333333333~~3444444444444430~~34JJJJJJJJJJJJ30~~34JJJJJJ60606030~~3433333333333330~~3466666666666630~~3466666666666630~~3460060606006630~~3460660606066630~~3460066066006630~~3460660606066630~~3460060606006630~~3466666666666630~~3466666666666630~~3333333333333330~~0000000000000000~~~~~~~~~~~~~~~~~~~")
      menu_9.add(make_exe)
      compile_only := TextMenuItem()
      compile_only.set_label("Compile only")
      compile_only.connect(self, "on_compile_only", ACTION_EVENT)
      menu_9.add(compile_only)
      compile_options := TextMenuItem()
      compile_options.set_label("Compile options")
      compile_options.connect(self, "on_compile_options", ACTION_EVENT)
      menu_9.add(compile_options)
      menu_bar_1.add(menu_9)
      menu_10 := Menu()
      menu_10.set_label("Run")
      run_program := TextMenuItem()
      run_program.set_label("Run program")
      run_program.connect(self, "on_run_program", ACTION_EVENT)
      run_program.set_img_left("18,c1,~~~~~~~~~~~~~~~~~~~3333333333333333~SS444444444444430~S+SJJJJJJJJJJJJ30~S++SJJJJJ60606030~S+*+S333333333330~S+**+S66666666630~S+***+S6666666630~S+****+S666666630~SF*G*G*FS66666630~S+G*G*G+S66666630~SF*G*GFS666666630~SFGGGFS6666666630~SFGGFS66666666630~SFGFS666666666630~SFFS3333333333330~SFS00000000000000~SS~~~~~~~~~~~~~~~~")
      menu_10.add(run_program)
      run_arguments := TextMenuItem()
      run_arguments.set_label("Run arguments")
      run_arguments.connect(self, "on_run_arguments", ACTION_EVENT)
      menu_10.add(run_arguments)
      debuggIt := TextMenuItem()
      debuggIt.set_label("Debug program")
      debuggIt.connect(self, "on_debuggIt", ACTION_EVENT)
      menu_10.add(debuggIt)   
      menu_bar_1.add(menu_10)
      menu_12 := Menu()
      menu_12.set_label("Project")
      open_Project := Menu()
      open_Project.set_label("Open")
      openUProj := TextMenuItem()
      openUProj.set_label("Unicon Project")
      openUProj.connect(self, "on_open_uniconProject", ACTION_EVENT)
      open_Project.add(openUProj)
      menu_12.add(open_Project)
      new_Project := Menu()
      new_Project.set_label("New")
      menu_12.add(new_Project)
      new_UniconProject := TextMenuItem()
      new_UniconProject.set_label("Unicon Project")
      new_UniconProject.connect(self, "on_new_UniconProject", ACTION_EVENT)
      new_Project.add(new_UniconProject)
      menu_separator := MenuSeparator()
      menu_separator.set_is_shaded()
      menu_12.add(menu_separator)
      make_compile_unicon := TextMenuItem()
      make_compile_unicon.set_label("Compile Project")
      make_compile_unicon.connect(self, "on_make_compile_Project", ACTION_EVENT)
      menu_12.add(make_compile_unicon)
      makeClean := TextMenuItem()
      makeClean.set_label("Make Clean")
      makeClean.connect(self, "on_make_clean", ACTION_EVENT)
      menu_12.add(makeClean)
      makeCleanAll := TextMenuItem()
      makeCleanAll.set_label("Make Clean All")
      makeCleanAll.connect(self, "on_make_clean_all", ACTION_EVENT)
      menu_12.add(makeCleanAll)
      menu_separator2 := MenuSeparator()
      menu_separator2.set_is_shaded()
      menu_12.add(menu_separator2)
      runProject := TextMenuItem()
      runProject.set_label("Run Project")
      runProject.connect(self, "on_run_project", ACTION_EVENT)
      menu_12.add(runProject)
      menu_bar_1.add(menu_12)
      menu_2 := Menu()
      menu_2.set_label("Help")
      ui_programming_envi := TextMenuItem()
      ui_programming_envi.set_label("UI Programming Environment")
      ui_programming_envi.connect(self, "on_ui_programming_envi", ACTION_EVENT)
      menu_2.add(ui_programming_envi)
      tutorial_overview := TextMenuItem()
      tutorial_overview.set_label("Tutorial Overview")
      tutorial_overview.connect(self, "on_tutorial_overview", ACTION_EVENT)
      menu_2.add(tutorial_overview)
   unicon_manpage := TextMenuItem()
   unicon_manpage.set_label("Unicon Man Page")
   unicon_manpage.connect(self, "on_unicon_manpage", ACTION_EVENT)
   menu_2.add(unicon_manpage)
      language_ref := Menu()
      language_ref.set_label("Language References")
      icon_ref := TextMenuItem()
      icon_ref.set_label("Icon")
      icon_ref.connect(self, "on_icon_ref", ACTION_EVENT)
      language_ref.add(icon_ref)
      unicon_ref := TextMenuItem()
      unicon_ref.set_label("Unicon")
      unicon_ref.connect(self, "on_unicon_ref", ACTION_EVENT)
      language_ref.add(unicon_ref)
      menu_2.add(language_ref)
      graphics_ref := Menu()
      graphics_ref.set_label("Graphics References")
      graphics2D_ref := TextMenuItem()
      graphics2D_ref.set_label("2D Graphics Facilities")
      graphics2D_ref.connect(self, "on_graphics_ref", ACTION_EVENT)
      graphics_ref.add(graphics2D_ref)
      graphics3D_ref := TextMenuItem()
      graphics3D_ref.set_label("3D Graphics Facilities")
      graphics3D_ref.connect(self, "on_graphics3D_ref", ACTION_EVENT)
      graphics_ref.add(graphics3D_ref)
      menu_2.add(graphics_ref)
      icon_prog_library := TextMenuItem()
      icon_prog_library.set_label("Icon Program Library")
      icon_prog_library.connect(self, "on_icon_prog_library", ACTION_EVENT)
      menu_2.add(icon_prog_library)
      ivib_interface_builder := TextMenuItem()
      ivib_interface_builder.set_label("IVIB Interface Builder")
      ivib_interface_builder.connect(self, "on_ivib_interface_builder", ACTION_EVENT)
      menu_2.add(ivib_interface_builder)
      languages_faq := Menu()
      languages_faq.set_label("Frequently Asked Questions")
      icon_faq := TextMenuItem()
      icon_faq.set_label("Icon")
      icon_faq.connect(self, "on_icon_faq", ACTION_EVENT)
      languages_faq.add(icon_faq)
      unicon_faq := TextMenuItem()
      unicon_faq.set_label("Unicon")
      unicon_faq.connect(self, "on_unicon_faq", ACTION_EVENT)
      languages_faq.add(unicon_faq)
      menu_2.add(languages_faq)
      about_menu:= TextMenuItem()
      about_menu.set_label("About")
      about_menu.connect(self, "on_about", ACTION_EVENT)
      menu_2.add(about_menu)
      menu_bar_1.add(menu_2)

      uidlog.add(menu_bar_1)
      #menu_bar_1.init()
      #menu_bar_1.resize()
   end

initially(newUniconProject)
   uniconProject  := newUniconProject
   projectCreated := "FALSE"
   fileOpened     := "FALSE"
   users_guide_file := 0
   if /cur_ide_win_setup then cur_ide_win_setup := "view_window_all"
   if /cur_ide_tb_status then cur_ide_tb_status := "show"
end
