#
# $Id: groupsetdialog.icn,v 1.2 2006-07-09 23:43:13 rparlett Exp $
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import gui
import lang
$include "guih.icn"

############################################################################
#
# Dialog box for configuring GroupSet
#
class GroupSetDialog : CommonDialog(
   c,                       #         
   okay,                    #            
   cancel,                  #              
   apply,                   #             
   struct,                  #              
   os,                      #          
   os_on,                   #             
   os_off,                  #              
   var_category0,           # Checkboxes for variable category
   var_category1,           #  
   var_category_cbg,        #
   col_name,                #                
   col_class_name,          #
   col_import_name,         #
   okay_result              #
   )

   method get_okay_result()
      return self.okay_result
   end

   method on_struct()
      local i, new
      if i := struct.get_selections()[1] then {
         new := c.boxes[i]
         apply.clear_is_shaded()
         os.set_which_one(os_on)
         col_name.set_contents(new.name)
         col_class_name.set_contents(new.class_name)
         col_import_name.set_contents(new.import_name)
         if \new.class_variable then
            var_category_cbg.set_which_one(var_category0)
         else
            var_category_cbg.set_which_one(var_category1)
      } else {
         apply.set_is_shaded()
         os.set_which_one(os_off)
      }
   end

   method on_apply()
      local r
      r := c.boxes[struct.get_selections()[1]]
      r.name := col_name.get_contents()
      r.class_name := col_class_name.get_contents()
      r.import_name := col_import_name.get_contents()
      r.class_variable := case var_category_cbg.get_which_one() of {
         var_category0 : 1
         var_category1 : &null
      }
      struct.set_contents(c.string_rep())
      struct.clear_selections()
      apply.set_is_shaded()
      os.set_which_one(os_off)
   end

   method on_cancel()
      c.parent_Canvas.parent_dialog.use_extra_undo()
      self.dispose()
   end

   method on_okay()
      self.okay_result := 1
      self.dispose()
   end

   initially
      local label, b, l

      self.CommonDialog.initially()

      lang::get_class_name(c) ? {
         ="Canvas"
         label := tab(find("Set")) || " Setup"
      }

      self.set_attribs("size=605,390", "label=" || label)

      b := Border()
      b.set_pos("50%", 25)
      b.set_size("100%-50", "100%-85")
      b.set_align("c", "t")
      l := Label()
      l.set_label(label)
      b.set_title(l)
      self.add(b)

      c.parent_Canvas.parent_dialog.save_extra_undo()
      struct := TextList()
      struct.connect(self, "on_struct", SELECTION_CHANGED_EVENT)
      struct.set_size(175, "100%-50")
      struct.set_pos(25, 25)
      struct.set_select_one()
      struct.set_contents(c.string_rep())
      b.add(struct)

      apply := TextButton()
      apply.connect(self, "on_apply", ACTION_EVENT)
      apply.set_label("Apply")
      apply.set_pos(225, 25)
      apply.set_is_shaded()
      b.add(apply)

      os := OverlaySet()
      os.set_pos(225, 60)
      os.set_size("100%-250", "100%-85")
      b.add(os)

      os_off := OverlayItem()
      os.add(os_off)

      os_on := OverlayItem() 
      os.add(os_on)

      b := Border()
      b.set_pos(0, 0)
      b.set_size("100%", "100%")
      l := Label()
      l.set_label("Edit")
      b.set_title(l)
      os_on.add(b)

      l := Label()
      l.set_label("Name")
      l.set_pos(30, "40")
      l.set_align("l", "c")
      b.add(l)

      col_name := TextField()
      col_name.set_size(140)
      col_name.set_pos(110, "40")
      col_name.set_align("l", "c")
      b.add(col_name)

      l := Label()
      l.set_label("Class Name")
      l.set_pos(30, "80")
      l.set_align("l", "c")
      b.add(l)

      col_class_name := TextField()
      col_class_name.set_size(140)
      col_class_name.set_pos(110, "80")
      col_class_name.set_align("l", "c")
      b.add(col_class_name)

      l := Label()
      l.set_label("Import")
      l.set_pos(30, "120")
      l.set_align("l", "c")
      b.add(l)

      self.col_import_name := TextField()
      self.col_import_name.set_size(140)
      self.col_import_name.set_pos("110", "120")
      self.col_import_name.set_align("l", "c")
      b.add(self.col_import_name)

      var_category_cbg := CheckBoxGroup()

      var_category0 := CheckBox()
      var_category0.set_label("Class variable")
      var_category0.set_pos("30", "160")
      var_category0.set_align("l", "c")
      var_category_cbg.add(var_category0)
      b.add(var_category0)

      var_category1 := CheckBox()
      var_category1.set_label("Local variable")
      var_category1.set_pos("150", "160")
      var_category1.set_align("l", "c")
      var_category_cbg.add(var_category1)
      b.add(var_category1)

      okay := TextButton()
      okay.connect(self, "on_okay", ACTION_EVENT)
      okay.set_pos("33%", "100%-30")
      okay.set_align("c", "c")
      okay.set_label("Okay")
      self.add(okay)

      cancel := TextButton()
      cancel.connect(self, "on_cancel", ACTION_EVENT)
      cancel.set_pos("66%", "100%-30")
      cancel.set_align("c", "c")
      cancel.set_label("Cancel")
      self.add(cancel)
end
