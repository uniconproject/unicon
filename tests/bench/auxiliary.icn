############################################################################
#
#	File:     auxiliary.icn
#
#	Subject:  Auxiliary procedures for Unicon benchmark run-* scripts 
#
#	Author:   Shea Newton
#
#	Date:     January 3, 2014
#
############################################################################

link "printf"
link "binary-trees"
link "chameneos-redux"
link "fannkuch"
link "fasta"
link "k-nucleotide"
link "mandelbrot"
link "meteor-contest"
link "n-body"
link "pidigits"
link "regex-dna"
link "reverse-complement"
link "spectral-norm"
link "thread-ring"
link "concord"
link "deal"
link "ipxref"
link "queens"
link "rsg"

procedure write_ratios(rTable)
   write()
   every k := key(rTable) do {
      printf("- concurrent %s represents a %2.2rx speedup\n",  k, rTable[k])  
      }
   write()
end

procedure list_to_num(L)
    if *string(L[3][1:-3]) < 3 then dec := "0" || string(L[3][1:-3])
    r := real(L[2,1]*60 + L[2,2]*60 + L[2,3] || "." || if \dec then dec else L[3][1:-3])
    return r
end

procedure tabulate_ratios(rT)
   ratio := rT[1] / rT[2]
   return real(integer(ratio*1000))/1000
end

procedure CpuToHrMinSec(ms:0)
   s := m := h := 0
   if *ms > 3 then 
      s := ms[1:-3] & ms := ms[-3:0]
   if s > 59 then
      m := s / 60
   if m > 59 then 
      h := m / 60
   return [h, m % 60, s % 60, ms]
end

procedure WallToHrMinSec(s:0)
   m := h := 0
   if s > 59 then
      m := s / 60 
   if m > 59 then 
      h := m / 60
   return [h, m % 60, s % 60]
end

procedure writetime(L1, L2, wallusec, c:0)
   if L2[1]>0 then
      printf("   %02d:%02d:%d.%03d\n", L2[1], L2[2], L2[3], wallusec/1000)
   else {
      if L2[2]>0 then
         printf("       %02d:%d.%03d\n", L2[2], L2[3], wallusec/1000)
      else
         printf("          %d.%03d\n", L2[3], wallusec/1000)
      }
end

procedure writestime(L1, L2, wallusec, c:0)
   if L2[1]>0 then 
      printf("   %02d:%02d:%d.%03d", L2[1], L2[2], L2[3], wallusec/1000)
   else {
      if L2[2]>0 then
         printf("       %02d:%d.%03d", L2[2], L2[3], wallusec/1000)
      else
         printf("          %d.%03d", L2[3], wallusec/1000)
      }
end

procedure calc_cputime(s:0)

 return CpuToHrMinSec(s)

end

procedure calctimes(cpustart, cpufinish, wallstart, wallfinish)
   cputime := cpufinish - cpustart
   wallsec := wallfinish.sec - wallstart.sec
   wallusec := wallfinish.usec - wallstart.usec
   if wallusec[1] == "-" then {
      wallsec -:= 1
      wallusec +:= 1000000
      }
   C := CpuToHrMinSec(cputime)
   W := WallToHrMinSec(wallsec)
   return [C, W, wallusec]
end


procedure gettimes(proc, arg)
   wallstart := gettimeofday()
   cpustart := &time
   proc([arg])
   cpufinish := &time
   wallfinish := gettimeofday()
   return [cpustart, cpufinish, wallstart, wallfinish]
end

procedure getavgtimes(proc, arg)
   local L := [], wallu := 0, wall := 0, cpu := 0
   every 1 to 3 do {
      collect()
      wallstart := gettimeofday()
      cpustart := &time
      proc([arg])
      cpufinish := &time
      wallfinish := gettimeofday()
      put(L, calcseconds(cpustart, cpufinish, wallstart, wallfinish))
   }      
   every i := !L do {
      cpu +:= i[1]
      wall +:= i[2]
      wallu +:= i[3]
   }
   C := CpuToHrMinSec(cpu/3)
   W := WallToHrMinSec(wall/3)
   return [C, W, wallu/3]
end

procedure calcseconds(cpustart, cpufinish, wallstart, wallfinish)
   cputime := cpufinish - cpustart
   wallsec := wallfinish.sec - wallstart.sec
   wallusec := wallfinish.usec - wallstart.usec
   if wallusec[1] == "-" then {
      wallsec -:= 1
      wallusec +:= 1000000
      }
   return [cputime, wallsec, wallusec]
end

procedure write_error(msg)
   if msg = 1 then
      write("N/A. Threaded Benchmark.")      
   if msg = 2 then {
      write("N/A. Threaded Benchmark.")
      write("\nConcurrency Not Enabled. \nEnable _
             concurrency to run threaded benchmarks.\n")
      }
   if msg = 3 then {
      write("\nConcurrency not enabled. _
 	     Enable concurrency to run threaded benchmarks.")
      }
end

procedure write_header(c:0)
   if verify_concurrent() then{
      if c ~= 0 then {
         write()
         write(left("Word Size",10)," ",left("Main Memory",12), " ",
               left("C Compiler",11)," ",left("clock",8), " ", left("OS",12))
         write(left(get_WordSize(),10)," ", left(get_Memory(),12), " ",
               left(get_C_compiler(),11)," ",left(get_clockspeed(),8), " ", left(get_OS(),12))
         write()
         write(left("CPU",32))
         write(left(get_CPU(), 60))
         write()
         write("                                        Elapsed time h:m:s        |Concurrent |")
         write("benchmark                           |Sequential|   |Concurrent|   |Performance|")
         }
      else {
         write()
         write(left("OS",12)," ",left("Word Size",12)," ",left("Main Memory",12))
         write(left(get_OS(),12)," ",left(get_WordSize(),12)," ",
               left(get_Memory(),12))
         write()
         write(left("C Compiler",12)," ",left("CPU",32)," ",left("clock",12))
         write(left(get_C_compiler(),12)," ",left(get_CPU(),32)," ",
               left(get_clockspeed(),12))
         write()
         write("benchmark                 Elapsed time h:m:s")
         }
      }
   else {
      write(left("Word Size",10)," ",left("Main Memory",12), " ",
            left("C Compiler",11)," ",left("clock",8), " ", left("OS",12))
      write(left(get_WordSize(),10)," ", left(get_Memory(),12), " ",
            left(get_C_compiler(),11)," ",left(get_clockspeed(),8), " ", left(get_OS(),12))
      write()
      write(left("CPU",32))
      write(left(get_CPU(), 60))
      write()
      
      write("benchmark                      Elapsed time h:m:s")
      }
end

procedure verify_concurrent()
   if &features == "concurrent threads" then
      return 1
end

procedure get_Memory()
   if match("Physical memory", x := &features) then {
      j := real(x[17:-5])/1073741824
      if j < 1 then return ((integer(j*1000) || " MB"))
      else return real(integer(j*1000))/1000 || " GB"
      }
   else return "unknown"
end

procedure get_OS()
   x := &features
   if x == "MS Windows NT" then return "MS Windows"
   return x
end

procedure get_WordSize()
   if match("Arch ", x := &features) then return x[-2:0] || " bit"
   else return "unknown"
end

procedure get_C_compiler()
   if match("CCompiler ", x := &features) then return x[11:0]
   else return "unknown"
end
   
procedure get_CPU()
   local f, result := "unknown"
   if &features == ("MS Windows NT"|"Win32") then {
       f := open("wmic cpu get name", "p")
       read(f) # skip the first line which is "Name"
       result := read(f) # read the actual name
       close(f)
       }
   else if &features == "MacOS" then {
       if f := open("sysctl -n machdep.cpu.brand_string", "p") then {
       read(f) ? result := tab(find("CPU"))
       close(f)
       }
   }
   else {
       if f := open("/proc/cpuinfo") then {
	   while line := read(f) do {
	       if match("model name", line) then {
		   result := line[find(":",line)+2:0]
		   break
	       }
	   }
	   close(f)
       }
   }
   if match("CPU cores", x := &features) then
      x := integer(x[11:0])
   return x || "x " || result
end
   
procedure get_clockspeed()
   local f, entry := 0.0, result := "unknown"
   if f := open("/proc/cpuinfo") then {
      while line := read(f) do {
	 # cores may run at different speeds, report the fastest
	 if match("cpu MHz", line) then {
	    entry <:= line[find(":",line)+2:0]
	    }
	 else if match("model name", line) & (i := find("GHz", line)) then {
	    ghz := trim(reverse(line[1:i]))
	    if ghz ?:= tab(many(&digits++'.')) then {
	       mhz := reverse(ghz) * 1000 # comparing against cpu MHz
	       entry <:= mhz
	       }
	    }
	 }
      close(f)
      result := sprintf("%1.1r GHz", ( 0 ~= \entry) / 1000)
   }

   if result == "unknown" then {
      if f:=open( "lscpu","p") then {
	  while line := read(f) do 
	      line ? (="CPU max MHz:" & entry := tab(0))
	  result := sprintf("%1.1r GHz", \entry / 1000.0)
	  close(f)
      }
      else if &features == ("MS Windows NT") then {       
	  if f := open("wmic cpu get maxclockspeed", "p") then {
             read(f) # skip the first line which is "maxclockspeed"
             entry := read(f) # read the actual clock speed
             result := sprintf("%1.1r GHz", \entry / 1000.0)
             close(f)
             }
          }
      else if &features == "MacOS" then {
         if f := open("sysctl -n machdep.cpu.brand_string", "p") then {
            read(f) ? (tab(find("@") + 2) & result := tab(0))
            close(f)
            }
         }
      }
   return result
end
