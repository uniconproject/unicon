#
# defaults.icn: Predefined constants & macros for UDB
# Author:       Ziad Al-Sharif, zsharif@gmail.com
# Contributor:  Gigi Young
#

#
# The debug class variables State & RunCode will have values from those
# State   := (NONE|RUN|QUIT|PAUSE|ERROR|END)
# RunCode := (RUN|CONTINUE|STEP|PSTEP|NEXT|ERROR)
#
$define NONE            0  # No State value, No Program loaded.
$define QUIT            1  # when the user hits the quit command
$define CONTINUE        2  # when the user hits the continue commands
$define RUN             3  # Program is currentlly running
$define STEP            4  # step: step.
$define PSTEP           5  # pstep: pattern step.
$define NEXT            6  # next: next.
$define PAUSE           7  # pause: after a break, watch, step, next, or error
$define ERROR           8  # error: Console Command Error
$define END             9  # end: end of program execution
$define LOAD            10  # for loading the tp and initializing the debugger

# The defined value can be changed later
$define RELOAD          30  # for loading in middle of a debug session

$define RERUN           11 # for the re-running (restarting) state
$define SKIP            12 # to skip some actions
$define TRACE           13 # to get the value of the assigned variable
$define WATCH           14 # make sure that step & next are working after watch
$define LIST            15 # to be used with the RunCode and cmdList()

$define ENABLED         16 # to indicate that an external monitor is enabled
$define DISABLED        17 # to indicate that an external monitor is disabled
$define DELETED         18 # to indicate that feature (breakpoint) is deleted

$define WASSIGN         19 # Watch a variable every time gets assigned
$define WVALUE          20 # Watch a variable every time it changes its value
$define WTYPE           21 # Watch a variable every time it changes its type
$define WREAD           22 # Watch a variable every time is read 
$define WSCAN           23 # Watch both of &subject and &pos
$define WANY            24 # all of the above type of watches

$define SIGNAL          25 # receiving a signal such as ^C


#
# Temporal Assertions Operands Type
#
$define LITERAL         101
$define VARIABLE        102
$define AGENT           103

$define TRUE            200
$define FALSE           300
$define NOTVALID        400

#
# The three basic kinds of temporal assertions
#
$define PAST_TIME_ASSERT    1000
$define FUTURE_TIME_ASSERT  1001
$define ALL_TIME_ASSERT     1002

#
# Four kinds of actions can be taken when an assertion is evaluated to TRUE
# The default case is to HIDE_WHEN_TRUE
#
$define STOP_WHEN_TRUE      2000
$define PAUSE_WHEN_TRUE     2001
$define HIDE_WHEN_TRUE      2002
$define SHOW_WHEN_TRUE      2003

#
# The UDB PROMPT shape!!!
#
$define PROMPT "(udb) "


#
# The UDB Version
#
$define VERSION "   UDB Version 2.3, April 15, 2024."

#
# Set of all the letters and all digits
#
$define CHARACTER   &letters++&digits++cset('_')

#
# Set of all valid characters in a name (variable, procedure, ..)
#
$define ValidChar   &letters++&digits++cset('_')

#
# Set of all valid programming symbols
#
$define ValidSymbol CHARACTER ++ cset(",<>?~`!@$#^&*-_:=+|[]\'./;(){} \t\^m\"")

#
# Set of all valid white spaces
#
$define WhiteSpace  cset(' \t\n\^m')

#
# the set of operators that can be used in a command line
#
$define OPERATOR    set("=",":=","<","<=",">",">=","*","!","?","~=","!=","~==","!==", "||","&&", "==>", "=>", "-->", "->")
$define SEPARATOR   set(",",":","::")
$define OPCHAR      cset('*!?:=<>~|&^,') 
$define TOKEN       &letters ++ &digits ++ cset('\'\\/.\_n+-\"')
$define BRACKETS    cset('[]')
$define PARENTHESES cset('()')
$define BRACES      cset('{}')
        
$ifdef _UNIX
   $define PS  "/"
$else
   $define PS  "\\"
$endif

# CJ - this Monitored macro is a bad idea. Review.
#$define Monitored &eventsource
$define MONITORED &eventsource
