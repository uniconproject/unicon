# Merr2 token samples
Identifier = x
StrLit = "s"
LStrLit = "s"L
FltConst = 1.5
DblConst = 100000
LDblConst = 10000l
CharConst = 'c'
LCharConst = 'c'L
IntConst = 1
UIntConst = 1u
LIntConst = 1l
ULIntConst = 1ul
Arrow = ->
Incr = ++
Decr = --
LShft = <<
RShft = >>
Leq = <=
Geq = >=
TokEqual = ==
Neq = !=
And = &&
Or = ||
MultAsgn = *=
DivAsgn = /=
ModAsgn = %=
PlusAsgn = +=
MinusAsgn = -=
LShftAsgn = <<=
RShftAsgn = >>=
AndAsgn = &=
XorAsgn = ^=
OrAsgn = |=
Sizeof = sizeof
Intersect = **
OpSym = **
Typedef = typedef
Extern = extern
Static = static
Auto = auto
TokRegister = register
Tended = tended
TokChar = char
TokShort = short
Int = int
TokLong = long
Signed = signed
Unsigned = unsigned
Float = float
Double = double
Const = const
Volatile = volatile
Void = void
Struct = struct
Union = union
TokEnum = enum
Ellipsis = ...
Case = case
Default = default
If = if
Else = else
Switch = switch
While = while
Do = do
For = for
Goto = goto
Continue = continue
Break = break
Return = return
Runerr = runerr
Is = is
Cnv = cnv
Def = def
Exact = exact
Empty_type = empty_type
IconType = table
Component = str_var
Variable = variable
Any_value = any_value
Named_var = named_var		
Struct_var = struct_var		
C_Integer = C_integer
Arith_case = arith_case
C_Double = C_Double
C_String = C_String
Tmp_string = tmp_string
Tmp_cset = tmp_cset
Body = body
End = end
TokFunction = function
Keyword = keyword
Operator = operator
Underef = underef
Declare = declare
Suspend = suspend
Fail = fail
Inline = inline
Abstract = abstract
Store = store
TokType = type
New = new
All_fields = all_fields
Then = then
Type_case = type_case
Of = of
Len_case = len_case
Constant = constant
Errorfail = errorfail
mod = %	
ref = &	
lparen = (	
rparen = )	
mult = *	
plus = +	
comma = ,		
minus = -	
dot = .	
div = /	
lbrac = {	
or = |	
rbrac = }	
tilde = ~	
lsbrac = [	
rsbrac = ]	
xor = ^	
colon = :	
semicolon= ;	
lt = <	
eq = =	
gt = >	
question = ?	
bang = !	
at = @	
slashslash = \\
%%
"s"L
::: global declaration expected
1.5
::: global declaration expected
x x
::: global declaration expected
enum "s"
::: bad enumeration type
** "s"
::: global declaration expected
char "s"
::: bad declaration list
typedef struct "s"
::: illegal structure declaration
x [	 "s"L
::: illegal array declaration
x [	 ->
::: illegal array declaration
char struct "s"
::: bad structure declaration
x (	 "s"
::: bad function prototype
enum x {	 "s"
::: bad enumeration
x (	 x x
::: syntax error
x [	 ++ "s"L
::: syntax error
x [	 ++ ->
::: syntax error
x (	 typedef "s"
::: syntax error
x (	 )	 x
::: syntax error
x (	 struct "s"
::: syntax error
typedef typedef struct "s"
::: syntax error
enum {	 x x
::: syntax error
typedef x =	 "s"L
::: syntax error
typedef x =	 ->
::: syntax error
enum x struct "s"
::: syntax error
x [	 x ++ x
::: syntax error
enum {	 x =	 ->
::: syntax error
typedef struct x struct "s"
::: syntax error
typedef x ,		 exact x
::: syntax error
x (	 typedef ** "s"
::: syntax error
x (	 typedef [	 ->
::: syntax error
x (	 )	 struct "s"
::: syntax error
typedef struct x {	 x
::: syntax error
x (	 typedef x x
::: syntax error
x (	 )	 {	 ->
::: syntax error
typedef struct {	 const struct "s"
::: syntax error
typedef x ,		 exact =	 x
::: syntax error
typedef struct {	 char x x
::: syntax error
typedef struct {	 const x x
::: syntax error
x (	 )	 {	 return ->
::: syntax error
x (	 typedef typedef struct "s"
::: syntax error
typedef struct {	 char struct "s"
::: syntax error
typedef struct {	 char x [	 ->
::: syntax error
typedef struct {	 const x :	 ->
::: syntax error
x (	 typedef ** (	 x x
::: syntax error
typedef struct {	 char x ;	 x
::: syntax error
typedef struct {	 char x :	 ->
::: syntax error
x (	 typedef ** (	 struct "s"
::: syntax error
x (	 )	 {	 return ;	 C_integer x
::: syntax error
x (	 )	 {	 return ;	 ++ "s"L
::: syntax error
x (	 )	 {	 return ;	 ++ ->
::: syntax error
typedef struct {	 char x [	 ++ ->
::: syntax error
x (	 typedef ** ** (	 [	 ]	 x
::: syntax error
x (	 typedef ** ** (	 )	 (	 x
::: syntax error
x (	 typedef ** ** (	 )	 [	 ->
::: syntax error
x (	 typedef ** ** (	 )	 [	 ++ ->
::: syntax error
typedef struct {	 char x [	 ]	 [	 ++ ->
::: syntax error
x (	 typedef ** ** (	 )	 (	 struct "s"
::: syntax error
typedef x [	 ]	 [	 ]	 (	 )	 char exact x
::: syntax error
typedef x [	 ]	 [	 ]	 (	 )	 char ;	 x
::: syntax error
typedef x [	 ]	 [	 ]	 (	 )	 char exact =	 ->
::: syntax error
