class MatchParen(stack, matching, closing_paren, opening_paren)

   method leftMatch(c)
      case (c) of {
         "("|")" : return "("
         "["|"]" : return "["
         "{"|"}" : return "{"
	 }
   end

   method add_char(c, cur_pos, i) 
      local n, m := leftMatch(c)
      
      if \m & \cur_pos then {
         if m == c then   # c is some kind of left parenthesis
            push(stack, [m,i]) # push a Character version, m and its position
         else {
            if (not (n := pop(stack))) | (n[1] ~== m) then {
               if \n & member(opening_paren, n[1]) then {
                  matching := "false"
                  return n[2]
               }
               else
                  return matching := "false"
            }
            if n[1] == m then
               return n[2]
         }
      }
      
      else if \m then {
         if m == c then   # c is some kind of left parenthesis
            push(stack, m)     # push a Character version, m
         else {
            if (not (n := pop(stack))) | (n ~=== m) then {
	       return matching := "false"
	       }
         }
      }
   end
   
   method add_string(s, cur_pos)
      local i, match_paren_pos
      every i := 1 to *s do {
         match_paren_pos := add_char(s[i], cur_pos, i)
         if match_paren_pos ===  "false" then return
      }
      return match_paren_pos
   end

   method test(s, cur_pos)
      local match_paren_pos
      
      stack := []
      matching := "true"

      #if \cur_pos then
      #   if not member(closing_paren, s[cur_pos-1:cur_pos]) then return
            
      match_paren_pos:=add_string(s, cur_pos)

      if \cur_pos & \match_paren_pos then
         return match_paren_pos

      if matching == "true" & *stack=0 then
         uidlog.MsgBox.set_contents(["Parentheses matching: Good"])
      else
         uidlog.MsgBox.set_contents(["Parentheses matching: Bad"])
   end

initially
   matching := "true"
   closing_paren := ')]}'
   opening_paren := '([{'
   stack := []
end
