### This file created by IYACC 1.0
### Please send bug reports to raypereda@hotmail.com
#define YYPREFIX "yy"
#line 150 "unigram.y"

procedure Keyword(x1,x2)
   static keywords
   initial {
      keywords := set(["allocated","clock","collections","column","current",
                       "date","now","dateline","digits","e","error",
                       "errornumber","errortext","errorvalue","errout","fail",
                       "eventcode","eventsource","eventvalue","features",
                       "file","host","input","lcase","letters","level",
                       "line","main","null","output","phi","pi","pick","pos",
                       "progname","random","regions","source","storage",
                       "subject","time","trace","dump","ucase","version",
                       "errno","window","col","row","x","y","interval",
                       "control","shift","meta","lpress","mpress","rpress",
                       "lrelease","mrelease","rrelease","ldrag","mdrag",
                       "rdrag","resize","ascii","cset"])
      }

   # verify that x2 is a valid keyword
   if not member(keywords, x2.s) then
      yyerror("&" || x2.s ||" is not a valid keyword!")

   return node("keyword",x1,x2)
end

global set_of_all_fields, dummyrecno
procedure Field(x1,x2,x3)
initial { set_of_all_fields := set(); dummyrecno := 1 }

   if \iconc then {
      if type(x3) == "token" then {
         insert(set_of_all_fields, x3.s)
#        write(&errout, "field ", image(x3.s))
         }
      }

   return node("field",x1,x2,x3)
end

procedure Clone1stToken(n)
   case type(n) of {
      "token": return copy(n)
      "treenode": {
         return Clone1stToken(!n.children)
         }
      }
end

global outline, outcol, outfilename,package_level_syms,package_level_class_syms

procedure Progend(x1)

   if *\parsingErrors > 0 then {
      every pe := !parsingErrors do {
         write(&errout, pe.errorMessage)
         }
      istop(*\parsingErrors || " error" ||
            (if *\parsingErrors > 1 then "s" else ""))
      }

   if /x1 then istop("error: empty file")

   package_level_syms := set()
   package_level_class_syms := set()
   set_package_level_syms(x1)
   scopecheck_superclass_decs(x1)

   outline := 1
   outcol := 1
   #
   # export specifications for each class
   #
   native := set()
   every cl := classes.foreach_t() do {
      cl.WriteSpec()
      insert(native, cl)
      }
   #
   # import class specifications, transitively
   #
   repeat {
      added := 0
      every super := ((classes.foreach_t()).foreachsuper() | !imports) do {
         if /classes.lookup(super) then {
            added := 1
            readspec(super)
            cl := classes.lookup(super)
            if /cl then halt("can't inherit class '",super,"'")
            iwrite("  inherits ", super, " from ", cl.linkfile)
            writelink(cl.dir, cl.linkfile)
            }
       }
    if added = 0 then break
  }
  #
  # Compute the transitive closure of the superclass graph. Then
  # resolve inheritance for each class, and use it to apply scoping rules.
  #
  every (classes.foreach_t()).transitive_closure()
  every (classes.foreach_t()).resolve()

  scopecheck_bodies(x1)

   if \thePackage then {
      every thePackage.insertsym(!package_level_syms)
      }

  if \iconc then  {
     iconc_prep_parse_tree(&null, x1)
     }

  #
  # generate output
  #
#  iwrite("Generating code:")
   yyprint(x1)
   write(yyout)

$ifndef NoPatternIntegration
   # generate invocable declarations for identifiers in unevaluated exprs
   if (*\list_of_invocables)>0 then {
      writes(yyout, "invocable ")
      every temp := list_of_invocables[i := 1 to *list_of_invocables] do {
         writes(yyout, image(temp))
         if i < *list_of_invocables then writes(yyout, ",")
         }
      write(yyout)
      }
$endif                                  # NoPatternIntegration

   if \iconc & (type(set_of_all_fields) == "set") &
        (*set_of_all_fields > 0) then {
        arandomfield := !set_of_all_fields
      writes(yyout, "record __dummyrecord",dummyrecno,"(",arandomfield)
      delete(set_of_all_fields, arandomfield)
      every writes(yyout, ",", !set_of_all_fields)
      write(yyout, ")")
      dummyrecno +:= 1
      set_of_all_fields := set()
      }
end
#line 146 "unigram.icn"
$define IDENT 257
$define INTLIT 258
$define REALLIT 259
$define STRINGLIT 260
$define CSETLIT 261
$define EOFX 262
$define BREAK 263
$define BY 264
$define CASE 265
$define CLASS 266
$define CREATE 267
$define CRITICAL 268
$define DEFAULT 269
$define DO 270
$define ELSE 271
$define END 272
$define EVERY 273
$define FAIL 274
$define GLOBAL 275
$define IF 276
$define IMPORT 277
$define iconINITIAL 278
$define INITIALLY 279
$define INVOCABLE 280
$define LINK 281
$define LOCAL 282
$define METHOD 283
$define NEXT 284
$define NOT 285
$define OF 286
$define PACKAGE 287
$define PROCEDURE 288
$define RECORD 289
$define REPEAT 290
$define RETURN 291
$define STATIC 292
$define SUSPEND 293
$define THEN 294
$define THREAD 295
$define TO 296
$define UNTIL 297
$define WHILE 298
$define BANG 299
$define MOD 300
$define AUGMOD 301
$define AND 302
$define AUGAND 303
$define STAR 304
$define AUGSTAR 305
$define INTER 306
$define AUGINTER 307
$define PLUS 308
$define AUGPLUS 309
$define UNION 310
$define AUGUNION 311
$define MINUS 312
$define AUGMINUS 313
$define DIFF 314
$define AUGDIFF 315
$define DOT 316
$define SLASH 317
$define AUGSLASH 318
$define ASSIGN 319
$define SWAP 320
$define NMLT 321
$define AUGNMLT 322
$define REVASSIGN 323
$define REVSWAP 324
$define SLT 325
$define AUGSLT 326
$define SLE 327
$define AUGSLE 328
$define NMLE 329
$define AUGNMLE 330
$define NMEQ 331
$define AUGNMEQ 332
$define SEQ 333
$define AUGSEQ 334
$define EQUIV 335
$define AUGEQUIV 336
$define NMGT 337
$define AUGNMGT 338
$define NMGE 339
$define AUGNMGE 340
$define SGT 341
$define AUGSGT 342
$define SGE 343
$define AUGSGE 344
$define QMARK 345
$define AUGQMARK 346
$define AT 347
$define AUGAT 348
$define BACKSLASH 349
$define CARET 350
$define AUGCARET 351
$define BAR 352
$define CONCAT 353
$define AUGCONCAT 354
$define LCONCAT 355
$define AUGLCONCAT 356
$define TILDE 357
$define NMNE 358
$define AUGNMNE 359
$define SNE 360
$define AUGSNE 361
$define NEQUIV 362
$define AUGNEQUIV 363
$define LPAREN 364
$define RPAREN 365
$define PCOLON 366
$define COMMA 367
$define MCOLON 368
$define COLON 369
$define COLONCOLON 370
$define SEMICOL 371
$define LBRACK 372
$define RBRACK 373
$define LBRACE 374
$define RBRACE 375
$define DOLLAR 376
$define ABSTRACT 377
$define PMATCH 378
$define PAND 379
$define POR 380
$define PUNEVAL 381
$define PASSNONMATCH 382
$define PIMDASSN 383
$define PSETCUR 384
$define SND 385
$define SNDBK 386
$define RCV 387
$define RCVBK 388
$define YYERRCODE 256
procedure init()
  yylhs := [                                        -1,
    0,    1,    1,    2,    2,    2,    2,    2,    2,    2,
    2,   11,   11,   11,   16,   16,   10,   17,   20,   20,
   20,   22,   22,   19,   19,   19,   19,    9,   24,   24,
   25,   25,   25,    7,    8,    6,   28,   28,   27,   27,
   26,   26,    5,    3,   30,   30,    4,   23,   23,   31,
   32,   15,   15,   15,   21,   21,   21,   29,   29,   35,
   35,   35,   35,   37,   37,   37,   37,   33,   33,   34,
   34,   38,   38,   38,   38,   38,   38,   38,   38,   39,
   41,   41,   41,   18,   18,   12,   12,   12,   13,   13,
   14,   14,   43,   43,   42,   42,   44,   44,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   45,   45,   46,   46,   46,   46,   47,   47,   47,
   48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
   48,   48,   48,   48,   48,   49,   49,   49,   50,   50,
   50,   50,   50,   50,   50,   51,   51,   51,   51,   51,
   52,   52,   52,   54,   54,   54,   54,   53,   53,   53,
   53,   53,   53,   53,   53,   55,   55,   55,   55,   55,
   55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
   55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
   55,   55,   55,   55,   55,   56,   58,   56,   56,   56,
   56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
   56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
   56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
   56,   56,   56,   56,   56,   63,   63,   64,   64,   65,
   65,   66,   60,   60,   60,   60,   61,   61,   62,   69,
   69,   71,   71,   67,   67,   70,   70,   40,   40,   40,
   40,   57,   57,   72,   72,   73,   73,   74,   74,   74,
   74,   74,   75,   75,   75,   75,   75,   75,   75,   75,
   75,   75,   75,   75,   75,   76,   76,   76,   77,   77,
   77,   77,   77,   77,   59,   78,   78,   78,   68,   68,
    0,    4,   42,
  ]
  yylen := [                            2,
    2,    0,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    0,    5,    8,    0,    1,    7,    6,    0,    3,
    3,    3,    2,    0,    2,    2,    2,    2,    1,    3,
    1,    1,    3,    2,    2,    2,    1,    3,    1,    3,
    1,    1,    2,    5,    0,    1,    6,    6,    2,    5,
    5,    0,    1,    3,    0,    1,    3,    1,    3,    1,
    3,    3,    5,    1,    3,    3,    5,    1,    3,    1,
    3,    1,    3,    3,    5,    4,    6,    4,    6,    2,
    0,    1,    1,    0,    4,    0,    4,    4,    0,    3,
    0,    3,    0,    1,    1,    3,    1,    3,    1,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    1,    3,    1,    3,    5,    3,    1,    3,    3,
    1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    1,    3,    3,    1,    3,
    3,    3,    3,    3,    3,    1,    3,    3,    3,    3,
    1,    1,    3,    2,    2,    2,    2,    1,    3,    3,
    3,    3,    3,    3,    3,    1,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    1,    0,    4,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    2,    2,    4,    1,    1,    2,    3,    3,    3,
    3,    5,    4,    3,    4,    4,    6,    6,    8,    8,
    3,    1,    3,    2,    2,    2,    4,    2,    4,    2,
    4,    2,    1,    2,    2,    4,    4,    6,    6,    1,
    3,    3,    3,    1,    3,    1,    3,    1,    1,    1,
    1,    1,    0,    1,    3,    1,    2,    1,    2,    2,
    2,    4,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    3,    3,    4,    2,    1,    3,    2,    1,    1,
    1,    1,    2,    2,    6,    1,    1,    1,    1,    3,
    3,    4,    1,
  ]
  yydefred := [                         0,
    2,    0,    0,    0,    1,    0,    0,    0,    0,    0,
    0,    0,    0,    3,    4,    5,    6,    7,    8,    9,
   10,   11,    0,    0,  321,    0,   58,    0,   41,   42,
   39,    0,   31,    0,    0,   29,   37,    0,   34,    0,
    0,   16,   84,    0,   86,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  323,    0,  278,  279,  280,
  281,    0,    0,    0,    0,    0,  263,    0,  236,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  217,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  231,    0,    0,    0,    0,
    0,    0,  252,   97,  216,    0,    0,    0,    0,    0,
  134,    0,    0,    0,    0,  166,    0,  172,  178,    0,
  219,  220,  221,  222,  223,  224,  225,  226,    0,    0,
    0,    0,   59,   40,   33,   30,   38,    0,    0,    0,
   68,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  237,    0,    0,    0,    0,    0,  192,    0,
  264,    0,  265,    0,    0,    0,  197,  255,  254,  200,
  203,  199,  211,  205,  198,  196,  201,    0,  206,  208,
  210,  212,  187,  214,  202,  193,  194,  195,  204,  207,
  209,  213,  274,    0,   23,    0,    0,    0,    0,    0,
  270,    0,    0,  215,  188,  189,  190,  191,  322,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   20,   21,   82,   83,    0,    0,   70,    0,
    0,   50,    0,    0,   44,    0,    0,    0,   49,   27,
   26,    0,   25,   86,   22,    0,    0,    0,    0,    0,
    0,    0,  293,  297,  298,  299,  300,  294,  295,  296,
  301,    0,    0,    0,    0,  282,    0,    0,  288,  238,
    0,    0,    0,    0,  241,    0,  240,    0,  239,    0,
   92,   98,  113,  130,  110,  111,  108,  107,  109,  106,
  112,  101,  100,  120,  103,  102,  127,  126,  119,  115,
  123,  116,  118,  117,  125,  124,  129,  131,  114,  104,
  105,  121,  128,  122,    0,    0,  137,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  140,    0,
    0,    0,  139,    0,    0,    0,    0,    0,    0,    0,
    0,  170,  167,  168,  169,  185,  180,  179,  173,  181,
  182,  183,  184,  251,  253,    0,    0,    0,  244,  276,
    0,    0,    0,    0,    0,    0,    0,    0,   18,    0,
    0,   80,    0,    0,    0,   74,   69,   54,    0,    0,
   85,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  305,    0,  309,  310,  311,  312,    0,    0,
    0,  306,  218,    0,  289,  290,  291,    0,  287,  275,
    0,    0,    0,    0,  271,  320,    0,  246,  317,  318,
  316,    0,  243,    0,  245,    0,    0,    0,   90,   87,
    0,    0,   88,   47,   71,   57,    0,   76,   78,   61,
    0,    0,    0,   86,   17,    0,    0,    0,  302,  313,
  314,    0,    0,  303,  308,  285,    0,  242,  136,    0,
  277,    0,    0,    0,    0,   65,    0,    0,    0,   75,
    0,   51,    0,    0,    0,  269,    0,  304,  307,  292,
  315,    0,    0,  248,  247,    0,   77,   79,   63,    0,
    0,   48,    0,    0,   67,   86,   13,  250,  249,    0,
    0,   14,
  ]
  yydgoto := [                          2,
    3,   14,  157,   16,  158,   18,   19,   20,   21,   22,
  464,  139,  302,  112,  149,   43,   23,   55,  159,   47,
  307,  113,  160,   35,   36,   31,   32,   38,   28,  153,
   24,  161,  150,  308,  317,  114,  447,  151,  309,  115,
  310,  116,  203,  118,  119,  120,  121,  122,  123,  124,
  125,  126,  127,  128,  129,  130,  345,  188,  131,  132,
  133,  134,  135,  136,  137,  138,  204,  213,  210,  441,
  211,  346,  347,  348,  349,  481,  482,  502,
  ]
  yysindex := [                      -210,
    0,    0,  394,  527,    0, -178,  -87,  -11,   40,  -11,
  -11,  -47,  -37,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -136, -246,    0, -107,    0,  -82,    0,    0,
    0,  -55,    0,  -29,  -35,    0,    0,   16,    0,  -12,
    7,    0,    0,  744,    0, -209,   37,  155,  -11,  183,
   40,  -11,  194,  -87,    4,    0,   87,    0,    0,    0,
    0,  744,  744,  744,  876,  744,    0,  744,    0,  876,
  744,  744,  744,  744,  744,  744,  876, -218,  876,  876,
  876,  876,  876,  876,  876,  876,    0,  876,  876,  876,
  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
  876,  744,  207,  212,  744,    0,  876,  876,  876,  876,
  876,  204,    0,    0,    0,  196,  137,  170, 8007, -162,
    0, 6631, -172, -132,   17,    0,   68,    0,    0,   13,
    0,    0,    0,    0,    0,    0,    0,    0,  -52,   22,
 -107, -254,    0,    0,    0,    0,    0,  148,  156,  -39,
    0,  -82,  158,  262,  268,  247,  -50,  -50, -136,  -50,
  161,  279,    0,  -94,  196, -328, -240, -250,    0,  196,
    0, -239,    0,  196, -230, -227,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   78,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -156,    0,  169,  744,  -89, -291,   38,
    0,  171,  164,    0,    0,    0,    0,    0,    0,  876,
  744,  876,  876,  876,  876,  876,  876,  876,  876,  876,
  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
  876,  876,  876, -224,  744,  744,  478, -220,  744,  262,
  283,  744,    0,    0,    0,    0,  176,   33,    0,  194,
 -128,    0,  194,  173,    0,  225, -148,  184,    0,    0,
    0,  270,    0,    0,    0,  177,  744,  744,  744,  744,
  744,  744,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   78,   78,  -68,  213,    0,  200,   14,    0,    0,
  744,  744,  -86,  744,    0,  611,    0,  744,    0,  170,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, -162,  289,    0, -172, -172, -172,
 -172, -172, -172, -172, -172, -172, -172, -172,    0, -172,
 -172, -172,    0, -132, -132,   17,   17,   17,   17,   17,
   17,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  100, -285,  -78,    0,    0,
 -322, -293,  190, -130,   31,  236,   52,  284,    0, -254,
  185,    0,  191,  306,  193,    0,    0,    0,  876,  311,
    0,  194, -119,  299,  -52,  611,  196,  196, -236,  196,
  196,  196,    0,  208,    0,    0,    0,    0,  167,  -53,
 -189,    0,    0,   78,    0,    0,    0,  317,    0,    0,
  196,  205,  196,  -89,    0,    0,  876,    0,    0,    0,
    0,  744,    0,  744,    0, -219,  744,  744,    0,    0,
  876,  320,    0,    0,    0,    0,  -73,    0,    0,    0,
  261,  214,  194,    0,    0,  744,   63,  744,    0,    0,
    0, -137,  -53,    0,    0,    0,  210,    0,    0, -131,
    0,  219,  223,  122,  125,    0,  269,  332,  217,    0,
  876,    0,  226,  -52,  322,    0,  196,    0,    0,    0,
    0,  744,  744,    0,    0,  876,    0,    0,    0,  221,
  744,    0,  126,  134,    0,    0,    0,    0,    0,  -52,
  744,    0,
  ]
  yyrindex := [                       660,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  154,    0,    0,  231,    0,   81,    0,    0,
    0,  793,    0,  133,  925,    0,    0, 8094,    0,    0,
    0,    0,    0, -207,    0,    0,    0,    0,    0,    0,
    0,    0,  242,  244, -245,    0,  995,    0,    0,    0,
    0, 6869,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 6869, 6869,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  139,    0,  -42,   64,    0,    0, 6986, 7103, 7220,
 7337,    0,    0,    0,    0, 1115,    0, 1235, 6632, 2555,
    0, 6512, 2675, 6155, 5195,    0, 6752,    0,    0, 6035,
    0,    0,    0,    0,    0,    0,    0,    0,  345,  231,
  231, -241,    0,    0,    0,    0,    0, -150,    0,  246,
    0,  249,    0,    0,    0,    0, -245, -245,  -15, -245,
    0,    0,    0,    0, 1355,    0, 2795,    0,    0, 1475,
    0, 2915,    0, 1595, 3035, 3155,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  278,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   23,    0,    0,
    0,  241,    0,    0,    0,    0,    0,    0,    0,    0,
 -207,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 7454,
 7571, 7688, 7805,    0,  139,  -42,  253,    0,    0,    0,
    0, -207,    0,    0,    0,    0,    0,  257,    0,    0,
    0,    0,    0,    0,    0,  -51,  154,    0,    0,    0,
    0,  351,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  259,    0,    0,    0,  -61,  -46,    0,    0,
 -316,    0,    0,    0,    0,    0,    0,   64,    0, 1715,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 3275, 7919,    0, 3395, 3515, 3635,
 3755, 3875, 3995, 4115, 4235, 4355, 4475, 4595,    0, 4715,
 4835, 4955,    0, 6274, 6393, 5315, 5435, 5555, 5675, 5795,
 5915,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   23,    0,    0,    0,
    0,    0,    0,    0,    0,   92,    0,    0,    0,  368,
    0,    0, -111,    0,    0,    0,    0,    0,    0,    0,
    0,  242,    0,    0,  345,    0, 1835, 1955, 5075, 2075,
 2195, 2315,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    9,    0,   57,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -174,    0,    0,  139,  139,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   26,    0,  242,    0,    0, -207,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  107,    0,    0,    0,
    0,    0,    0,  345,    0,    0, 2435,    0,    0,    0,
    0,  139,  139,    0,    0,    0,    0,    0,    0,    0,
 -207,    0,    0,    0,    0,    0,    0,    0,    0,  345,
 -207,    0,
  ]
  yygindex := [                         0,
  625,    0,  480,    0,  491,    0,    0,    0,    0,    0,
    0, -317, -418, -216, -438, -144,    0,    0,  -80,  372,
    0,  581,    0,    0,  577,   15,    0,    0,  578,    0,
    0,  475,    0,    0,  333, -135,    0,   44,  187, -303,
    0,  -62,  -44,  414,  574,  386, -237,    0, 8128,  260,
  168,   90,    0,    0,   58,    0,  302,    0,    0,    0,
    0,    0,    0,    0,    0,    0, -101,  288,  182,    0,
  294, -321,  304,    0,    0,  174, -459,    0,
  ]
$define YYTABLESIZE 8400
  yytable := [                        117,
  164,  165,  209,  167,  361,  168,  465,  456,  170,   44,
  172,  174,  175,  176,  322,   81,  220,  163,  396,  397,
  473,  535,  506,  522,   37,   39,   24,  171,  173,  328,
  330,  409,  434,   24,  528,  413,  442,  542,  178,  331,
  327,  208,  332,  329,  504,    1,  526,  140,   93,  255,
   93,  220,  505,  305,  435,  179,   93,  306,  443,  543,
  212,  220,  220,  144,   91,  220,  147,  475,  476,  477,
  507,  220,  535,  559,  220,  351,  320,  321,   26,  323,
  499,  355,  500,  501,  553,  448,  362,  363,  364,  365,
  366,  367,  368,  369,  370,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,  381,  382,  383,  384,  385,
  386,  387,  388,  389,  390,  391,  392,  393,  394,  475,
  476,  477,  533,   55,   45,   24,  478,  169,  453,   58,
   59,   60,   61,  256,  177,  571,  180,  181,  182,  183,
  184,  185,  186,  187,  353,  189,  190,  191,  192,  193,
  194,  195,  196,  197,  198,  199,  200,  201,  202,  479,
  103,  581,  536,   93,  214,  215,  216,  217,  218,   27,
  220,  220,  461,  454,  533,  276,  117,  277,  478,  278,
  274,  279,  275,  534,   58,   59,   60,   61,  475,  476,
  477,  326,   93,  436,  438,  284,  284,  284,  284,  284,
   93,  284,  284,  475,  476,  477,  554,  220,  350,   40,
  351,  479,  220,  550,   72,  220,   72,  257,  460,   41,
   60,   72,   42,   60,    7,  299,  284,   60,  548,  300,
   60,   60,  155,  437,   42,  558,  444,   60,   13,  301,
  509,  561,  284,  455,  523,   29,  284,  478,   30,  280,
  281,  524,  440,   73,  284,   73,   15,  117,  580,  539,
   73,   46,  478,   15,  467,  468,  469,  470,  471,  472,
  333,  334,  335,  336,  337,  284,  338,  339,    7,  354,
  479,  480,  492,  284,   48,  154,  155,  284,  351,  491,
  286,  493,   13,  494,  503,  479,   33,   62,  549,   34,
   62,  340,  284,  284,   62,  286,  490,   62,   62,  555,
  284,   49,  284,  212,   62,   60,  282,  485,  286,   60,
  283,  486,  284,  520,   93,   60,  156,  313,  294,  341,
   93,   51,  314,  285,  333,  334,  335,  336,  337,   50,
  338,  339,   43,  426,  427,  428,   43,  430,  431,  432,
  433,   53,   43,  452,  577,   43,  457,   43,  487,   43,
   43,   43,  342,   43,  582,  340,  286,   43,   43,   43,
   54,  422,  423,  424,  425,  546,  295,  343,  429,  272,
  156,  272,   52,  272,  296,  344,  297,  488,  298,   94,
   46,  162,   62,  341,   32,   94,   62,  460,   32,  450,
  142,  510,   62,  494,  451,  544,  545,   32,  356,   32,
  357,  143,   32,   32,  287,  569,  288,  289,  512,   32,
   32,   32,  513,  530,  531,   15,  342,  273,   15,  273,
  575,  273,   15,  356,   93,   15,   15,  556,   93,  540,
  145,  343,   15,  416,  417,  418,  419,  420,  421,  344,
  148,   43,  290,  291,  292,  293,  162,   43,   64,  541,
  573,  574,   64,  205,  498,  557,  351,   56,   57,   58,
   59,   60,   61,   66,   62,  219,   63,   66,   64,   65,
  206,  117,   15,   15,   66,   67,  564,   68,  351,  565,
  578,  351,  351,   17,   17,   69,   70,  220,  579,   32,
  351,   71,   72,   93,   73,   93,   74,  221,   75,   76,
   77,  303,  304,   78,  222,   79,  311,   80,  316,   81,
  312,   82,  315,   83,  318,   84,  117,   85,   86,  155,
   15,  324,   87,  414,  415,  325,  117,  352,  359,  446,
  449,  358,   88,  459,   89,  458,   90,  462,  463,  483,
  466,  484,  497,  508,  511,  514,   91,  516,   92,  517,
   93,   94,  518,   95,   96,  519,   97,  521,   98,   99,
  525,  100,  529,  101,  537,  102,  547,  538,  552,  551,
  207,  103,  562,  104,  560,  105,  563,  566,  567,  568,
  570,  576,  106,  572,   19,  107,  108,  109,  110,  111,
   89,   89,   89,   89,   89,   89,   52,   89,   45,   89,
   53,   89,   89,   46,  283,  319,   89,   89,   89,   93,
   89,   56,   12,  283,   81,    4,  141,  146,   89,   89,
  319,  152,  445,  360,   89,   89,  515,   89,  166,   89,
  395,   89,   89,   89,  474,  496,   89,  527,   89,  495,
   89,  489,   89,  532,   89,    5,   89,    0,   89,    6,
   89,   89,    0,    0,    0,   89,    0,    0,    7,    0,
    8,    0,    0,    9,   10,   89,    0,   89,    0,   89,
   11,   12,   13,    0,    0,    0,    0,    0,    0,   89,
    0,   89,    0,   89,   89,    0,   89,   89,    0,   89,
    0,   89,   89,    0,   89,    0,   89,    0,   89,    0,
    0,    0,    0,    0,   89,   89,   89,    0,   89,    0,
    0,    0,    0,    0,    0,   89,    0,    0,   89,   89,
   89,   89,   89,   56,   57,   58,   59,   60,   61,    0,
   62,    0,   63,    0,   64,   65,    0,    0,    0,    0,
   66,   67,    0,   68,    0,    0,    0,    0,    0,    0,
    0,   69,   70,    0,    0,    0,    0,   71,   72,    0,
   73,    0,   74,    0,   75,   76,   77,    0,    0,   78,
    0,   79,    0,   80,    0,   81,    0,   82,   25,   83,
    0,   84,    6,   85,   86,    0,    0,    0,   87,    0,
    0,    7,    0,    8,    0,    0,    9,   10,   88,    0,
   89,    0,   90,   11,   12,   13,    0,    0,    0,    0,
    0,    0,   91,    0,   92,    0,   93,   94,    0,   95,
   96,    0,   97,    0,   98,   99,    0,  100,    0,  101,
    0,  102,    0,    0,    0,    0,    0,  103,    0,  104,
    0,  105,  439,    0,    0,    0,    0,    0,  106,    0,
    0,  107,  108,  109,  110,  111,   56,   57,   58,   59,
   60,   61,    0,   62,    0,   63,    0,   64,   65,  206,
    0,    0,    0,   66,   67,    0,   68,    0,    0,    0,
    0,    0,    0,    0,   69,   70,    0,    0,    0,    0,
   71,   72,    0,   73,    0,   74,    0,   75,   76,   77,
    0,    0,   78,    0,   79,    0,   80,    0,   81,    0,
   82,    2,   83,    0,   84,    2,   85,   86,    0,    0,
    0,   87,    0,    0,    2,    0,    2,    0,    0,    2,
    2,   88,    0,   89,    0,   90,    2,    2,    2,    0,
    0,    0,    0,    0,    0,   91,    0,   92,    0,   93,
   94,    0,   95,   96,    0,   97,    0,   98,   99,    0,
  100,    0,  101,    0,  102,    0,    0,    0,    0,    0,
  103,    0,  104,    0,  105,    0,    0,    0,    0,    0,
    0,  106,    0,    0,  107,  108,  109,  110,  111,   56,
   57,   58,   59,   60,   61,    0,   62,    0,   63,    0,
   64,   65,    0,    0,    0,    0,   66,   67,    0,   68,
    0,    0,    0,    0,    0,    0,    0,   69,   70,    0,
    0,    0,    0,   71,   72,    0,   73,    0,   74,    0,
   75,   76,   77,    0,    0,   78,    0,   79,    0,   80,
    0,   81,    0,   82,   35,   83,    0,   84,   35,   85,
   86,    0,    0,    0,   87,    0,    0,   35,    0,   35,
    0,    0,   35,   35,   88,    0,   89,    0,   90,   35,
   35,   35,    0,    0,    0,    0,    0,    0,   91,    0,
   92,    0,   93,   94,    0,   95,   96,    0,   97,    0,
   98,   99,    0,  100,    0,  101,    0,  102,    0,    0,
    0,    0,    0,  103,    0,  104,    0,  105,    0,    0,
    0,    0,    0,    0,  106,    0,    0,  107,  108,  109,
  110,  111,   57,   58,   59,   60,   61,    0,   62,    0,
   63,    0,   64,   65,    0,    0,    0,    0,   66,   67,
    0,   68,    0,    0,    0,    0,    0,    0,    0,   69,
   70,    0,    0,    0,    0,   71,   72,    0,   73,    0,
   74,    0,   75,   76,   77,    0,    0,   78,    0,   79,
    0,   80,    0,   81,    0,   82,   28,   83,    0,   84,
   28,   85,   86,    0,    0,    0,   87,    0,    0,   28,
    0,   28,    0,    0,   28,   28,   88,    0,   89,    0,
   90,   28,   28,   28,    0,    0,    0,    0,    0,    0,
   91,    0,   92,    0,   93,   94,    0,   95,   96,    0,
   97,    0,   98,   99,    0,  100,    0,  101,    0,  102,
    0,    0,    0,    0,    0,  103,    0,  104,    0,  105,
    0,    0,    0,    0,    0,    0,  106,    0,  235,  107,
  108,  109,  110,  111,  235,  235,  235,    0,    0,  235,
    0,    0,    0,  235,    0,    0,  235,  235,    0,    0,
  235,    0,    0,  235,    0,    0,    0,    0,  235,    0,
  235,    0,    0,  235,  235,  235,  235,  235,  235,  235,
  235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
  235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
  235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
  235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
  235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
  235,    0,  235,  235,  235,  235,  235,  235,  235,  235,
  235,  235,  235,  235,    0,  235,  235,  235,  235,  235,
  235,  235,  235,  235,  235,    0,  235,  235,   94,  235,
  235,  235,  235,    0,   94,   94,   94,    0,    0,   94,
    0,    0,    0,   94,    0,    0,   94,   94,    0,    0,
   94,    0,    0,   94,    0,    0,    0,    0,   94,    0,
   94,    0,    0,   94,   94,   94,    0,   94,   94,   94,
   94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
   94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
   94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
   94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
   94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
   94,    0,   94,   94,   94,   94,   94,   94,   94,   94,
   94,   94,   94,   94,    0,   94,   94,   94,   94,   94,
   94,   94,   94,   94,   94,    0,   94,   94,   95,   94,
   94,   94,   94,    0,   95,   95,   95,    0,    0,   95,
    0,    0,    0,   95,    0,    0,   95,   95,    0,    0,
   95,    0,    0,   95,    0,    0,    0,    0,   95,    0,
   95,    0,    0,   95,   95,   95,   95,   95,   95,   95,
   95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
   95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
   95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
   95,   95,   95,   95,   95,   95,   95,   95,   95,    0,
   95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
   95,    0,   95,   95,   95,   95,   95,   95,   95,   95,
   95,   95,   95,   95,    0,   95,   95,   95,   95,   95,
   95,   95,   95,   95,   95,    0,   95,   95,  232,   95,
   95,   95,   95,    0,  232,  232,  232,    0,    0,  232,
    0,    0,    0,  232,    0,    0,  232,  232,    0,    0,
  232,    0,    0,  232,    0,    0,    0,    0,  232,    0,
  232,    0,    0,  232,  232,  232,    0,  232,  232,  232,
  232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
  232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
  232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
  232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
  232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
  232,    0,  232,  232,  232,  232,  232,  232,  232,  232,
  232,  232,  232,  232,    0,  232,  232,  232,  232,  232,
  232,  232,  232,  232,  232,    0,  232,  232,  262,  232,
  232,  232,  232,    0,  262,  262,  262,    0,    0,  262,
    0,    0,    0,  262,    0,    0,  262,  262,    0,    0,
  262,    0,    0,  262,    0,    0,    0,    0,  262,    0,
  262,    0,    0,  262,  262,  262,    0,  262,  262,  262,
  262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
  262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
  262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
  262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
  262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
  262,    0,  262,  262,  262,  262,  262,  262,  262,  262,
  262,  262,  262,  262,    0,  262,  262,  262,  262,  262,
  262,  262,  262,  262,  262,    0,  262,  262,  233,  262,
  262,  262,  262,    0,  233,  233,  233,    0,    0,  233,
    0,    0,    0,  233,    0,    0,  233,  233,    0,    0,
  233,    0,    0,  233,    0,    0,    0,    0,  233,    0,
  233,    0,    0,  233,  233,  233,    0,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
  233,    0,  233,  233,  233,  233,  233,  233,  233,  233,
  233,  233,  233,  233,    0,  233,  233,  233,  233,  233,
  233,  233,  233,  233,  233,    0,  233,  233,   96,  233,
  233,  233,  233,    0,   96,   96,   96,    0,    0,   96,
    0,    0,    0,   96,    0,    0,   96,   96,    0,    0,
   96,    0,    0,   96,    0,    0,    0,    0,   96,    0,
   96,    0,    0,   96,   96,   96,   96,   96,   96,   96,
   96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
   96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
   96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
   96,   96,   96,   96,   96,   96,   96,   96,   96,    0,
   96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
   96,    0,   96,   96,   96,   96,   96,   96,   96,   96,
   96,   96,   96,   96,    0,   96,   96,   96,   96,   96,
   96,   96,   96,   96,   96,    0,   96,   96,  234,   96,
   96,   96,   96,    0,  234,  234,  234,    0,    0,  234,
    0,    0,    0,  234,    0,    0,  234,  234,    0,    0,
  234,    0,    0,  234,    0,    0,    0,    0,  234,    0,
  234,    0,    0,  234,  234,  234,    0,  234,  234,  234,
  234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
  234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
  234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
  234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
  234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
  234,    0,  234,  234,  234,  234,  234,  234,  234,  234,
  234,  234,  234,  234,    0,  234,  234,  234,  234,  234,
  234,  234,  234,  234,  234,    0,  234,  234,  261,  234,
  234,  234,  234,    0,  261,  261,  261,    0,    0,  261,
    0,    0,    0,  261,    0,    0,  261,  261,    0,    0,
  261,    0,    0,  261,    0,    0,    0,    0,  261,    0,
  261,    0,    0,  261,  261,  261,    0,  261,  261,  261,
  261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
  261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
  261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
  261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
  261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
  261,    0,  261,  261,  261,  261,  261,  261,  261,  261,
  261,  261,  261,  261,    0,  261,  261,  261,  261,  261,
  261,  261,  261,  261,  261,    0,  261,  261,  266,  261,
  261,  261,  261,    0,  266,  266,  266,    0,    0,  266,
    0,    0,    0,  266,    0,    0,  266,  266,    0,    0,
  266,    0,    0,  266,    0,    0,    0,    0,  266,    0,
  266,    0,    0,  266,  266,  266,    0,  266,  266,  266,
  266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
  266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
  266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
  266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
  266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
  266,    0,  266,  266,  266,  266,  266,  266,  266,  266,
  266,  266,  266,  266,    0,  266,  266,  266,  266,  266,
  266,  266,  266,  266,  266,    0,  266,  266,  259,  266,
  266,  266,  266,    0,  259,  259,  259,    0,    0,  259,
    0,    0,    0,  259,    0,    0,  259,  259,    0,    0,
  259,    0,    0,  259,    0,    0,    0,    0,  259,    0,
  259,    0,    0,  259,  259,  259,    0,  259,  259,  259,
  259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
  259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
  259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
  259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
  259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
  259,    0,  259,  259,  259,  259,  259,  259,  259,  259,
  259,  259,  259,  259,    0,  259,  259,  259,  259,  259,
  259,  259,  259,  259,  259,    0,  259,  259,  257,  259,
  259,  259,  259,    0,  257,  257,  257,    0,    0,  257,
    0,    0,    0,  257,    0,    0,  257,  257,    0,    0,
  257,    0,    0,  257,    0,    0,    0,    0,  257,    0,
  257,    0,    0,  257,  257,  257,    0,  257,  257,  257,
  257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
  257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
  257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
  257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
  257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
  257,    0,  257,  257,  257,  257,  257,  257,  257,  257,
  257,  257,  257,  257,    0,  257,  257,  257,  257,  257,
  257,  257,  257,  257,  257,    0,  257,  257,  268,  257,
  257,  257,  257,    0,  268,  268,  268,    0,    0,  268,
    0,    0,    0,  268,    0,    0,  268,  268,    0,    0,
  268,    0,    0,  268,    0,    0,    0,    0,  268,    0,
  268,    0,    0,  268,  268,  268,    0,  268,  268,  268,
  268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
  268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
  268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
  268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
  268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
  268,    0,  268,  268,  268,  268,  268,  268,  268,  268,
  268,  268,  268,  268,    0,  268,  268,  268,  268,  268,
  268,  268,  268,  268,  268,    0,  268,  268,  132,  268,
  268,  268,  268,    0,  132,  132,  132,    0,    0,  132,
    0,    0,    0,  132,    0,    0,  132,  132,    0,    0,
  132,    0,    0,  132,    0,    0,    0,    0,  132,    0,
    0,    0,    0,  132,  132,  132,  132,  132,  132,  132,
  132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
  132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
  132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
  132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
  132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
  132,    0,  132,  132,  132,  132,  132,  132,  132,  132,
  132,  132,  132,  132,    0,  132,  132,  132,  132,  132,
  132,  132,  132,  132,    0,    0,  132,  132,  141,  132,
  132,  132,  132,    0,  141,  141,  141,    0,    0,  141,
    0,    0,    0,  141,    0,    0,  141,  141,    0,    0,
  141,    0,    0,  141,    0,    0,    0,    0,  141,    0,
  141,    0,    0,  141,  141,  141,  141,  141,  141,  141,
  141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
  141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
  141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
  141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
  141,  141,  141,  141,  141,  141,  141,    0,  141,    0,
  141,    0,  141,  141,  141,  141,  141,  141,  141,  141,
  141,  141,  141,  141,    0,  141,  141,  141,  141,  141,
  141,  141,  141,  141,  141,    0,  141,  141,  260,  141,
  141,  141,  141,    0,    0,  260,  260,    0,    0,  260,
    0,    0,    0,  260,    0,    0,  260,  260,    0,    0,
  260,    0,    0,  260,    0,    0,    0,    0,  260,    0,
  260,    0,    0,  260,  260,  260,    0,  260,  260,  260,
  260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
  260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
  260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
  260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
  260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
  260,    0,  260,  260,  260,  260,  260,  260,  260,  260,
  260,  260,  260,  260,    0,  260,  260,  260,  260,  260,
  260,  260,  260,  260,  260,    0,  260,  260,   94,  260,
  260,  260,  260,    0,    0,   94,   94,    0,    0,   94,
    0,    0,    0,   94,    0,    0,   94,   94,    0,    0,
   94,    0,    0,   94,    0,    0,    0,    0,   94,    0,
   94,    0,    0,   94,   94,   94,    0,   94,   94,   94,
   94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
   94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
   94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
   94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
   94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
   94,    0,   94,   94,   94,   94,   94,   94,   94,   94,
   94,   94,   94,   94,    0,   94,   94,   94,   94,   94,
   94,   94,   94,   94,   94,    0,   94,   94,  258,   94,
   94,   94,   94,    0,    0,  258,  258,    0,    0,  258,
    0,    0,    0,  258,    0,    0,  258,  258,    0,    0,
  258,    0,    0,  258,    0,    0,    0,    0,  258,    0,
  258,    0,    0,  258,  258,  258,    0,  258,  258,  258,
  258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
  258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
  258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
  258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
  258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
  258,    0,  258,  258,  258,  258,  258,  258,  258,  258,
  258,  258,  258,  258,    0,  258,  258,  258,  258,  258,
  258,  258,  258,  258,  258,    0,  258,  258,  256,  258,
  258,  258,  258,    0,    0,  256,  256,    0,    0,  256,
    0,    0,    0,  256,    0,    0,  256,  256,    0,    0,
  256,    0,    0,  256,    0,    0,    0,    0,  256,    0,
  256,    0,    0,  256,  256,  256,    0,  256,  256,  256,
  256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
  256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
  256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
  256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
  256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
  256,    0,  256,  256,  256,  256,  256,  256,  256,  256,
  256,  256,  256,  256,    0,  256,  256,  256,  256,  256,
  256,  256,  256,  256,  256,    0,  256,  256,  133,  256,
  256,  256,  256,    0,  133,  133,  133,    0,    0,  133,
    0,    0,    0,  133,    0,    0,  133,  133,    0,    0,
  133,    0,    0,  133,    0,    0,    0,    0,  133,    0,
    0,    0,    0,  133,  133,  133,  133,  133,  133,  133,
  133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
  133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
  133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
  133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
  133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
  133,    0,  133,  133,  133,  133,  133,  133,  133,  133,
  133,  133,  133,  133,    0,  133,  133,  133,  133,  133,
  133,  133,  133,  133,    0,    0,  133,  133,  152,  133,
  133,  133,  133,    0,  152,  152,  152,    0,    0,  152,
    0,    0,    0,  152,    0,    0,  152,  152,    0,    0,
  152,    0,    0,  152,    0,    0,    0,    0,  152,    0,
  152,    0,    0,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,    0,  152,    0,
  152,    0,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,    0,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,    0,  152,  152,  146,  152,
  152,  152,  152,    0,  146,  146,  146,    0,    0,  146,
    0,    0,    0,  146,    0,    0,  146,  146,    0,    0,
  146,    0,    0,  146,    0,    0,    0,    0,  146,    0,
  146,    0,    0,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,    0,  146,    0,
  146,    0,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,    0,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,    0,  146,  146,  145,  146,
  146,  146,  146,    0,  145,  145,  145,    0,    0,  145,
    0,    0,    0,  145,    0,    0,  145,  145,    0,    0,
  145,    0,    0,  145,    0,    0,    0,    0,  145,    0,
  145,    0,    0,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,    0,  145,    0,
  145,    0,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,    0,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,    0,  145,  145,  151,  145,
  145,  145,  145,    0,  151,  151,  151,    0,    0,  151,
    0,    0,    0,  151,    0,    0,  151,  151,    0,    0,
  151,    0,    0,  151,    0,    0,    0,    0,  151,    0,
  151,    0,    0,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,    0,  151,    0,
  151,    0,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,    0,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,    0,  151,  151,  148,  151,
  151,  151,  151,    0,  148,  148,  148,    0,    0,  148,
    0,    0,    0,  148,    0,    0,  148,  148,    0,    0,
  148,    0,    0,  148,    0,    0,    0,    0,  148,    0,
  148,    0,    0,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,    0,  148,    0,
  148,    0,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,    0,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,    0,  148,  148,  142,  148,
  148,  148,  148,    0,  142,  142,  142,    0,    0,  142,
    0,    0,    0,  142,    0,    0,  142,  142,    0,    0,
  142,    0,    0,  142,    0,    0,    0,    0,  142,    0,
  142,    0,    0,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,    0,  142,    0,
  142,    0,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,    0,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,    0,  142,  142,  154,  142,
  142,  142,  142,    0,  154,  154,  154,    0,    0,  154,
    0,    0,    0,  154,    0,    0,  154,  154,    0,    0,
  154,    0,    0,  154,    0,    0,    0,    0,  154,    0,
  154,    0,    0,  154,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  154,  154,    0,  154,    0,
  154,    0,  154,  154,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,    0,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,    0,  154,  154,  150,  154,
  154,  154,  154,    0,  150,  150,  150,    0,    0,  150,
    0,    0,    0,  150,    0,    0,  150,  150,    0,    0,
  150,    0,    0,  150,    0,    0,    0,    0,  150,    0,
  150,    0,    0,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,    0,  150,    0,
  150,    0,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,    0,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,    0,  150,  150,  149,  150,
  150,  150,  150,    0,  149,  149,  149,    0,    0,  149,
    0,    0,    0,  149,    0,    0,  149,  149,    0,    0,
  149,    0,    0,  149,    0,    0,    0,    0,  149,    0,
  149,    0,    0,  149,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,    0,  149,    0,
  149,    0,  149,  149,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,    0,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,    0,  149,  149,  144,  149,
  149,  149,  149,    0,  144,  144,  144,    0,    0,  144,
    0,    0,    0,  144,    0,    0,  144,  144,    0,    0,
  144,    0,    0,  144,    0,    0,    0,    0,  144,    0,
  144,    0,    0,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,    0,  144,    0,
  144,    0,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,    0,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,    0,  144,  144,  143,  144,
  144,  144,  144,    0,  143,  143,  143,    0,    0,  143,
    0,    0,    0,  143,    0,    0,  143,  143,    0,    0,
  143,    0,    0,  143,    0,    0,    0,    0,  143,    0,
  143,    0,    0,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,    0,  143,    0,
  143,    0,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,    0,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,    0,  143,  143,  153,  143,
  143,  143,  143,    0,  153,  153,  153,    0,    0,  153,
    0,    0,    0,  153,    0,    0,  153,  153,    0,    0,
  153,    0,    0,  153,    0,    0,    0,    0,  153,    0,
  153,    0,    0,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,    0,  153,    0,
  153,    0,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,    0,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,    0,  153,  153,  147,  153,
  153,  153,  153,    0,  147,  147,  147,    0,    0,  147,
    0,    0,    0,  147,    0,    0,  147,  147,    0,    0,
  147,    0,    0,  147,    0,    0,    0,    0,  147,    0,
  147,    0,    0,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,    0,  147,    0,
  147,    0,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,    0,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,    0,  147,  147,  155,  147,
  147,  147,  147,    0,  155,  155,  155,    0,    0,  155,
    0,    0,    0,  155,    0,    0,  155,  155,    0,    0,
  155,    0,    0,  155,    0,    0,    0,    0,  155,    0,
  155,    0,    0,  155,  155,  155,  155,  155,  155,  155,
  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
  155,  155,  155,  155,  155,  155,  155,    0,  155,    0,
  155,    0,  155,  155,  155,  155,  155,  155,  155,  155,
  155,  155,  155,  155,    0,  155,  155,  155,  155,  155,
  155,  155,  155,  155,  155,    0,  155,  155,  267,  155,
  155,  155,  155,    0,  267,    0,  267,    0,    0,  267,
    0,    0,    0,  267,    0,    0,  267,  267,    0,    0,
  267,    0,    0,  267,    0,    0,    0,    0,  267,    0,
  267,    0,    0,  267,  267,  267,    0,  267,  267,  267,
  267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
  267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
  267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
  267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
  267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
  267,    0,  267,  267,  267,  267,  267,  267,  267,  267,
  267,  267,  267,  267,    0,  267,  267,  267,  267,  267,
  267,  267,  267,  267,  267,    0,  267,  267,  159,  267,
  267,  267,  267,    0,  159,  159,  159,    0,    0,  159,
    0,    0,    0,  159,    0,    0,  159,  159,    0,    0,
  159,    0,    0,  159,    0,    0,    0,    0,  159,    0,
  159,    0,    0,  159,    0,  159,  159,  159,    0,  159,
    0,  159,  159,  159,  159,  159,  159,  159,  159,  159,
  159,    0,  159,  159,  159,  159,  159,  159,  159,  159,
  159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
  159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
  159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
  159,    0,  159,  159,  159,  159,  159,  159,  159,  159,
  159,  159,  159,  159,    0,  159,  159,  159,  159,  159,
  159,  159,  159,  159,  159,    0,  159,  159,  162,  159,
  159,  159,  159,    0,  162,  162,  162,    0,    0,  162,
    0,    0,    0,  162,    0,    0,  162,  162,    0,    0,
  162,    0,    0,  162,    0,    0,    0,    0,  162,    0,
  162,    0,    0,  162,    0,  162,  162,  162,    0,  162,
    0,  162,  162,  162,  162,  162,  162,  162,  162,  162,
  162,    0,  162,  162,  162,  162,  162,  162,  162,  162,
  162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
  162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
  162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
  162,    0,  162,  162,  162,  162,  162,  162,  162,  162,
  162,  162,  162,  162,    0,  162,  162,  162,  162,  162,
  162,  162,  162,  162,  162,    0,  162,  162,  164,  162,
  162,  162,  162,    0,  164,  164,  164,    0,    0,  164,
    0,    0,    0,  164,    0,    0,  164,  164,    0,    0,
  164,    0,    0,  164,    0,    0,    0,    0,  164,    0,
  164,    0,    0,  164,    0,  164,  164,  164,    0,  164,
    0,  164,  164,  164,  164,  164,  164,  164,  164,  164,
  164,    0,  164,  164,  164,  164,  164,  164,  164,  164,
  164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
  164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
  164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
  164,    0,  164,  164,  164,  164,  164,  164,  164,  164,
  164,  164,  164,  164,    0,  164,  164,  164,  164,  164,
  164,  164,  164,  164,  164,    0,  164,  164,  165,  164,
  164,  164,  164,    0,  165,  165,  165,    0,    0,  165,
    0,    0,    0,  165,    0,    0,  165,  165,    0,    0,
  165,    0,    0,  165,    0,    0,    0,    0,  165,    0,
  165,    0,    0,  165,    0,  165,  165,  165,    0,  165,
    0,  165,  165,  165,  165,  165,  165,  165,  165,  165,
  165,    0,  165,  165,  165,  165,  165,  165,  165,  165,
  165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
  165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
  165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
  165,    0,  165,  165,  165,  165,  165,  165,  165,  165,
  165,  165,  165,  165,    0,  165,  165,  165,  165,  165,
  165,  165,  165,  165,  165,    0,  165,  165,  163,  165,
  165,  165,  165,    0,  163,  163,  163,    0,    0,  163,
    0,    0,    0,  163,    0,    0,  163,  163,    0,    0,
  163,    0,    0,  163,    0,    0,    0,    0,  163,    0,
  163,    0,    0,  163,    0,  163,  163,  163,    0,  163,
    0,  163,  163,  163,  163,  163,  163,  163,  163,  163,
  163,    0,  163,  163,  163,  163,  163,  163,  163,  163,
  163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
  163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
  163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
  163,    0,  163,  163,  163,  163,  163,  163,  163,  163,
  163,  163,  163,  163,    0,  163,  163,  163,  163,  163,
  163,  163,  163,  163,  163,    0,  163,  163,  161,  163,
  163,  163,  163,    0,  161,  161,  161,    0,    0,  161,
    0,    0,    0,  161,    0,    0,  161,  161,    0,    0,
  161,    0,    0,  161,    0,    0,    0,    0,  161,    0,
  161,    0,    0,  161,    0,  161,  161,  161,    0,  161,
    0,  161,  161,  161,  161,  161,  161,  161,  161,  161,
  161,    0,  161,  161,  161,  161,  161,  161,  161,  161,
  161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
  161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
  161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
  161,    0,  161,  161,  161,  161,  161,  161,  161,  161,
  161,  161,  161,  161,    0,  161,  161,  161,  161,  161,
  161,  161,  161,  161,  161,    0,  161,  161,  160,  161,
  161,  161,  161,    0,  160,  160,  160,    0,    0,  160,
    0,    0,    0,  160,    0,    0,  160,  160,    0,    0,
  160,    0,    0,  160,    0,    0,    0,    0,  160,    0,
  160,    0,    0,  160,    0,  160,  160,  160,    0,  160,
    0,  160,  160,  160,  160,  160,  160,  160,  160,  160,
  160,    0,  160,  160,  160,  160,  160,  160,  160,  160,
  160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
  160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
  160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
  160,    0,  160,  160,  160,  160,  160,  160,  160,  160,
  160,  160,  160,  160,    0,  160,  160,  160,  160,  160,
  160,  160,  160,  160,  160,    0,  160,  160,  186,  160,
  160,  160,  160,    0,  186,  186,  186,    0,    0,  186,
    0,    0,    0,  186,    0,    0,  186,  186,    0,    0,
  186,    0,    0,  186,    0,    0,    0,    0,  186,    0,
  186,    0,    0,  186,  186,  186,  186,  186,  186,  186,
  186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
    0,  186,  186,  186,  186,  186,  186,  186,  186,  186,
  186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
  186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
  186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
  186,    0,  186,  186,  186,  186,  186,  186,    0,  186,
  186,  186,  186,  186,    0,  186,    0,  186,    0,  186,
    0,  186,  186,  186,  186,    0,  186,  186,  156,  186,
  186,  186,  186,    0,  156,  156,  156,    0,    0,  156,
    0,    0,    0,  156,    0,    0,  156,  156,    0,    0,
  156,    0,    0,  156,    0,    0,    0,    0,  156,    0,
  156,    0,    0,  156,  156,  156,  156,  156,  156,  156,
  156,  156,    0,  156,    0,  156,    0,  156,    0,  156,
  156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
  156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
  156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
  156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
  156,    0,  156,  156,  156,  156,  156,  156,  156,  156,
  156,  156,  156,  156,    0,  156,  156,  156,  156,  156,
  156,  156,  156,  156,  156,    0,    0,  157,    0,  156,
  156,  156,  156,  157,  157,  157,    0,    0,  157,    0,
    0,    0,  157,    0,    0,  157,  157,    0,    0,  157,
    0,    0,  157,    0,    0,    0,    0,  157,    0,  157,
    0,    0,  157,  157,  157,  157,  157,  157,  157,  157,
  157,    0,  157,    0,  157,    0,  157,    0,  157,  157,
  157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
  157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
  157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
  157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
    0,  157,  157,  157,  157,  157,  157,  157,  157,  157,
  157,  157,  157,    0,  157,  157,  157,  157,  157,  157,
  157,  157,  157,  157,    0,    0,  158,    0,  157,  157,
  157,  157,  158,  158,  158,    0,    0,  158,    0,    0,
    0,  158,    0,    0,  158,  158,    0,    0,  158,    0,
    0,  158,    0,    0,    0,    0,  158,    0,  158,    0,
    0,  158,  158,  158,  158,  158,  158,  158,  158,  158,
    0,  158,    0,  158,    0,  158,    0,  158,  158,  158,
  158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
  158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
  158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
  158,  158,  158,  158,  158,  158,  158,  158,  158,    0,
  158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
  158,  158,    0,  158,  158,  158,  158,  158,  158,  158,
  158,  158,  158,    0,    0,  138,    0,  158,  158,  158,
  158,  138,  138,  138,    0,    0,  138,    0,    0,    0,
  138,    0,    0,  138,  138,    0,    0,  138,    0,    0,
  138,    0,    0,    0,    0,  138,    0,  138,    0,    0,
  138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
  138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
  138,  138,    0,  138,  138,  138,    0,  138,    0,  138,
    0,  138,    0,  138,    0,  138,    0,  138,    0,  138,
    0,  138,    0,  138,    0,  138,  138,  138,  138,  138,
  138,  138,  138,    0,  138,  138,  138,  138,    0,    0,
  138,    0,  138,    0,  138,  138,  138,  138,  138,  138,
  138,    0,  138,  138,  138,  138,  138,  138,  138,  138,
    0,  138,    0,  138,  138,   99,  138,  138,  138,  138,
    0,   99,   99,   99,    0,    0,   99,    0,    0,    0,
   99,    0,    0,   99,   99,    0,    0,   99,    0,    0,
   99,    0,    0,    0,    0,   99,    0,   99,    0,    0,
   99,   99,    0,   99,    0,   99,    0,   99,    0,   99,
    0,   99,    0,   99,    0,   99,    0,   99,   99,    0,
    0,  258,   99,    0,    0,  259,   99,  260,   99,  261,
   99,  262,   99,  263,   99,  264,   99,  265,   99,  266,
   99,  267,   99,  268,   99,    0,   99,    0,   99,    0,
   99,   99,  269,   99,   99,    0,   99,    0,  270,   99,
  271,   99,  272,   99,    0,   99,   99,   99,   99,   99,
   99,    0,   99,   99,   99,   99,   99,   99,   99,  273,
   99,   99,    0,   99,   99,  171,   99,   99,   99,   99,
    0,  171,  171,  171,    0,    0,  171,    0,    0,    0,
  171,    0,    0,  171,  171,    0,    0,  171,    0,    0,
  171,    0,    0,    0,    0,  171,    0,  171,    0,    0,
    0,  171,  171,  171,  171,  171,  171,  171,  171,  171,
  171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
  171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
  171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
  171,  171,  171,  171,  171,  171,  171,  171,    0,  171,
    0,    0,  171,  171,  171,  171,  171,  171,    0,  171,
  171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
  171,    0,  171,  171,  171,  171,  171,  171,  171,  171,
  171,  171,   93,  171,  171,    0,    0,    0,   93,   93,
   93,    0,    0,   93,    0,    0,    0,   93,    0,    0,
   93,   93,    0,    0,   93,    0,    0,   93,    0,    0,
    0,    0,   93,    0,   93,    0,    0,    0,   93,   93,
    0,   93,    0,   93,    0,   93,    0,   93,    0,   93,
    0,   93,    0,   93,    0,    0,   93,   93,   93,    0,
   93,   93,   93,   93,   93,   93,   93,   93,   93,    0,
   93,    0,   93,    0,   93,   93,   93,   93,   93,   93,
   93,   93,   93,    0,   93,    0,   93,    0,    0,   93,
    0,    0,   93,    0,   93,    0,    0,   93,    0,   93,
    0,   93,    0,   93,   93,   93,   93,   93,    0,   93,
    0,   93,    0,   93,   93,   93,   93,   93,   93,  227,
   93,   93,    0,    0,    0,  227,  227,  227,    0,    0,
  227,    0,    0,    0,  227,    0,    0,  227,  227,    0,
    0,  227,    0,    0,  227,    0,    0,    0,    0,  227,
    0,  227,    0,    0,    0,  227,  227,    0,  227,    0,
  227,    0,  227,    0,  227,    0,  227,    0,  227,    0,
  227,    0,    0,  227,  227,  227,    0,  227,  227,  227,
  227,  227,  227,  227,  227,  227,    0,  227,    0,  227,
    0,  227,  227,  227,  227,  227,  227,  227,  227,  227,
    0,  227,    0,  227,    0,    0,  227,    0,    0,  227,
    0,  227,    0,    0,  227,    0,  227,    0,  227,    0,
  227,  227,  227,  227,  227,    0,  227,    0,  227,    0,
  227,  227,  227,  227,  227,  227,  228,  227,  227,    0,
    0,    0,  228,  228,  228,    0,    0,  228,    0,    0,
    0,  228,    0,    0,  228,  228,    0,    0,  228,    0,
    0,  228,    0,    0,    0,    0,  228,    0,  228,    0,
    0,    0,  228,  228,    0,  228,    0,  228,    0,  228,
    0,  228,    0,  228,    0,  228,    0,  228,    0,    0,
  228,  228,  228,    0,  228,  228,  228,  228,  228,  228,
  228,  228,  228,    0,  228,    0,  228,    0,  228,  228,
  228,  228,  228,  228,  228,  228,  228,    0,  228,    0,
  228,    0,    0,  228,    0,    0,  228,    0,  228,    0,
    0,  228,    0,  228,    0,  228,    0,  228,  228,  228,
  228,  228,    0,  228,    0,  228,    0,  228,  228,  228,
  228,  228,  228,  229,  228,  228,    0,    0,    0,  229,
  229,  229,    0,    0,  229,    0,    0,    0,  229,    0,
    0,  229,  229,    0,    0,  229,    0,    0,  229,    0,
    0,    0,    0,  229,    0,  229,    0,    0,    0,  229,
  229,    0,  229,    0,  229,    0,  229,    0,  229,    0,
  229,    0,  229,    0,  229,    0,    0,  229,  229,  229,
    0,  229,  229,  229,  229,  229,  229,  229,  229,  229,
    0,  229,    0,  229,    0,  229,  229,  229,  229,  229,
  229,  229,  229,  229,    0,  229,    0,  229,    0,    0,
  229,    0,    0,  229,    0,  229,    0,    0,  229,    0,
  229,    0,  229,    0,  229,  229,  229,  229,  229,    0,
  229,    0,  229,    0,  229,  229,  229,  229,  229,  229,
  230,  229,  229,    0,    0,    0,  230,  230,  230,    0,
    0,  230,    0,    0,    0,  230,    0,    0,  230,  230,
    0,    0,  230,    0,    0,  230,    0,    0,    0,    0,
  230,    0,  230,    0,    0,    0,  230,  230,    0,  230,
    0,  230,    0,  230,    0,  230,    0,  230,    0,  230,
    0,  230,    0,    0,  230,  230,  230,    0,  230,  230,
  230,  230,  230,  230,  230,  230,  230,    0,  230,    0,
  230,    0,  230,  230,  230,  230,  230,  230,  230,  230,
  230,    0,  230,    0,  230,    0,    0,  230,    0,    0,
  230,    0,  230,    0,    0,  230,    0,  230,    0,  230,
    0,  230,  230,  230,  230,  230,    0,  230,    0,  230,
    0,  230,  230,  230,  230,  230,  230,  174,  230,  230,
    0,    0,    0,  174,  174,  174,    0,    0,  174,    0,
    0,    0,  174,    0,    0,  174,  174,    0,    0,  174,
    0,    0,  174,    0,    0,    0,    0,  174,    0,  174,
    0,    0,    0,  174,  174,    0,  174,    0,  174,    0,
  174,    0,  174,    0,  174,    0,  174,    0,  174,    0,
    0,  174,  174,  174,    0,  174,  174,  174,  174,  174,
  174,  174,  174,  174,    0,  174,    0,  174,    0,  174,
  174,  174,  174,  174,  174,  174,  174,  174,    0,  174,
    0,  174,    0,    0,  174,    0,    0,  174,    0,  174,
    0,    0,  174,    0,  174,    0,  174,    0,  174,  174,
  174,  174,  174,    0,  174,    0,  174,    0,  174,  174,
  174,  174,  174,  174,  175,  174,  174,    0,    0,    0,
  175,  175,  175,    0,    0,  175,    0,    0,    0,  175,
    0,    0,  175,  175,    0,    0,  175,    0,    0,  175,
    0,    0,    0,    0,  175,    0,  175,    0,    0,    0,
  175,  175,    0,  175,    0,  175,    0,  175,    0,  175,
    0,  175,    0,  175,    0,  175,    0,    0,  175,  175,
  175,    0,  175,  175,  175,  175,  175,  175,  175,  175,
  175,    0,  175,    0,  175,    0,  175,  175,  175,  175,
  175,  175,  175,  175,  175,    0,  175,    0,  175,    0,
    0,  175,    0,    0,  175,    0,  175,    0,    0,  175,
    0,  175,    0,  175,    0,  175,  175,  175,  175,  175,
    0,  175,    0,  175,    0,  175,  175,  175,  175,  175,
  175,  176,  175,  175,    0,    0,    0,  176,  176,  176,
    0,    0,  176,    0,    0,    0,  176,    0,    0,  176,
  176,    0,    0,  176,    0,    0,  176,    0,    0,    0,
    0,  176,    0,  176,    0,    0,    0,  176,  176,    0,
  176,    0,  176,    0,  176,    0,  176,    0,  176,    0,
  176,    0,  176,    0,    0,  176,  176,  176,    0,  176,
  176,  176,  176,  176,  176,  176,  176,  176,    0,  176,
    0,  176,    0,  176,  176,  176,  176,  176,  176,  176,
  176,  176,    0,  176,    0,  176,    0,    0,  176,    0,
    0,  176,    0,  176,    0,    0,  176,    0,  176,    0,
  176,    0,  176,  176,  176,  176,  176,    0,  176,    0,
  176,    0,  176,  176,  176,  176,  176,  176,  177,  176,
  176,    0,    0,    0,  177,  177,  177,    0,    0,  177,
    0,    0,    0,  177,    0,    0,  177,  177,    0,    0,
  177,    0,    0,  177,    0,    0,    0,    0,  177,    0,
  177,    0,    0,    0,  177,  177,    0,  177,    0,  177,
    0,  177,    0,  177,    0,  177,    0,  177,    0,  177,
    0,    0,  177,  177,  177,    0,  177,  177,  177,  177,
  177,  177,  177,  177,  177,    0,  177,    0,  177,    0,
  177,  177,  177,  177,  177,  177,  177,  177,  177,    0,
  177,    0,  177,    0,    0,  177,    0,    0,  177,    0,
  177,    0,    0,  177,    0,  177,    0,  177,    0,  177,
  177,  177,  177,  177,    0,  177,    0,  177,    0,  177,
  177,  177,  177,  177,  177,    0,  177,  177,  135,  135,
  135,    0,    0,  135,    0,    0,    0,  135,    0,    0,
  135,  135,    0,    0,  135,    0,    0,  135,    0,    0,
    0,    0,  135,    0,  135,    0,    0,  135,  135,  135,
  135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
  135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
  135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
  135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
  135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
  135,  135,  135,  135,  135,    0,  135,  135,  135,  135,
  135,  135,  135,  135,  135,  135,  135,  135,    0,  135,
  135,  135,  135,  135,  135,  135,  135,  135,  135,    0,
  135,  135,    0,  135,  135,  135,  135,  223,    0,  224,
    0,  225,    0,  226,    0,  227,    0,  228,    0,  229,
    0,  230,    0,    0,  231,  232,  233,    0,  234,  235,
  236,    0,  237,    0,  238,    0,  239,    0,  240,    0,
  241,    0,  242,    0,  243,    0,  244,    0,  245,    0,
  246,    0,  247,    0,  248,   36,    0,  249,    0,   36,
  250,    0,  251,    0,    0,  252,    0,  253,   36,  254,
   36,    0,    0,   36,   36,    0,    0,    0,    0,    0,
   36,   36,   36,    0,  255,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,  408,    0,  410,  411,  412,
  ]
  yycheck := [                         44,
   63,   64,  104,   66,  221,   68,  324,  311,   71,  256,
   73,   74,   75,   76,  159,  257,  302,   62,  256,  257,
  342,  481,  316,  462,   10,   11,  272,   72,   73,  270,
  270,  269,  257,  279,  271,  273,  257,  257,  257,  270,
  369,  104,  270,  294,  367,  256,  465,  257,  365,  378,
  367,  302,  375,  308,  279,  274,  373,  312,  279,  279,
  105,  302,  302,   49,  272,  302,   52,  257,  258,  259,
  364,  302,  532,  533,  302,  367,  157,  158,  257,  160,
  366,  373,  368,  369,  523,  302,  222,  223,  224,  225,
  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,
  246,  247,  248,  249,  250,  251,  252,  253,  254,  257,
  258,  259,  312,  365,  371,  371,  316,   70,  257,  258,
  259,  260,  261,  296,   77,  554,   79,   80,   81,   82,
   83,   84,   85,   86,  207,   88,   89,   90,   91,   92,
   93,   94,   95,   96,   97,   98,   99,  100,  101,  349,
  370,  580,  484,  371,  107,  108,  109,  110,  111,  257,
  302,  302,  317,  302,  312,  308,  221,  310,  316,  312,
  353,  314,  355,  373,  258,  259,  260,  261,  257,  258,
  259,  286,  367,  295,  296,  257,  258,  259,  260,  261,
  375,  263,  264,  257,  258,  259,  524,  302,  365,  257,
  367,  349,  302,  517,  365,  302,  367,  380,  367,  257,
  272,  372,  371,  275,  275,  278,  288,  279,  302,  282,
  282,  283,  283,  296,  371,  373,  299,  289,  289,  292,
  371,  373,  304,  372,  364,  257,  308,  316,  260,  382,
  383,  371,  297,  365,  316,  367,  272,  302,  576,  497,
  372,  369,  316,  279,  327,  328,  329,  330,  331,  332,
  257,  258,  259,  260,  261,  337,  263,  264,  275,  369,
  349,  350,  369,  345,  367,  282,  283,  349,  367,  352,
  337,  354,  289,  356,  373,  349,  257,  272,  372,  260,
  275,  288,  364,  365,  279,  352,  351,  282,  283,  526,
  372,  367,  374,  358,  289,  367,  300,  304,  365,  371,
  304,  308,  306,  459,  367,  377,  377,  367,  316,  316,
  373,  367,  372,  317,  257,  258,  259,  260,  261,  369,
  263,  264,  262,  286,  287,  288,  266,  290,  291,  292,
  293,  364,  272,  310,  571,  275,  313,  277,  345,  279,
  280,  281,  349,  283,  581,  288,  299,  287,  288,  289,
  364,  282,  283,  284,  285,  511,  364,  364,  289,  371,
  377,  373,  367,  375,  372,  372,  374,  374,  376,  367,
  369,  370,  367,  316,  262,  373,  371,  367,  266,  367,
  364,  371,  377,  466,  372,  507,  508,  275,  371,  277,
  373,  257,  280,  281,  347,  551,  349,  350,  367,  287,
  288,  289,  371,  257,  258,  272,  349,  371,  275,  373,
  566,  375,  279,  371,  371,  282,  283,  375,  375,  502,
  258,  364,  289,  276,  277,  278,  279,  280,  281,  372,
  257,  371,  385,  386,  387,  388,  370,  377,  367,  504,
  562,  563,  371,  257,  365,  528,  367,  256,  257,  258,
  259,  260,  261,  367,  263,  272,  265,  371,  267,  268,
  269,  526,    3,    4,  273,  274,  365,  276,  367,  365,
  365,  367,  367,    3,    4,  284,  285,  302,  365,  367,
  367,  290,  291,  365,  293,  367,  295,  371,  297,  298,
  299,  140,  141,  302,  345,  304,  369,  306,  257,  308,
  365,  310,  365,  312,  257,  314,  571,  316,  317,  283,
  377,  371,  321,  274,  275,  257,  581,  369,  375,  257,
  365,  371,  331,  319,  333,  373,  335,  364,  279,  337,
  374,  352,  264,  364,  319,  272,  345,  373,  347,  369,
  349,  350,  257,  352,  353,  373,  355,  257,  357,  358,
  272,  360,  365,  362,  258,  364,  257,  373,  365,  319,
  369,  370,  364,  372,  375,  374,  364,  319,  257,  373,
  365,  371,  381,  272,  364,  384,  385,  386,  387,  388,
  256,  257,  258,  259,  260,  261,  365,  263,  365,  265,
  365,  267,  268,  365,  337,  375,  272,  273,  274,  367,
  276,  365,  272,  365,  257,    1,   46,   51,  284,  285,
  156,   54,  300,  220,  290,  291,  450,  293,   65,  295,
  255,  297,  298,  299,  343,  358,  302,  466,  304,  356,
  306,  348,  308,  480,  310,  262,  312,   -1,  314,  266,
  316,  317,   -1,   -1,   -1,  321,   -1,   -1,  275,   -1,
  277,   -1,   -1,  280,  281,  331,   -1,  333,   -1,  335,
  287,  288,  289,   -1,   -1,   -1,   -1,   -1,   -1,  345,
   -1,  347,   -1,  349,  350,   -1,  352,  353,   -1,  355,
   -1,  357,  358,   -1,  360,   -1,  362,   -1,  364,   -1,
   -1,   -1,   -1,   -1,  370,  371,  372,   -1,  374,   -1,
   -1,   -1,   -1,   -1,   -1,  381,   -1,   -1,  384,  385,
  386,  387,  388,  256,  257,  258,  259,  260,  261,   -1,
  263,   -1,  265,   -1,  267,  268,   -1,   -1,   -1,   -1,
  273,  274,   -1,  276,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  284,  285,   -1,   -1,   -1,   -1,  290,  291,   -1,
  293,   -1,  295,   -1,  297,  298,  299,   -1,   -1,  302,
   -1,  304,   -1,  306,   -1,  308,   -1,  310,  262,  312,
   -1,  314,  266,  316,  317,   -1,   -1,   -1,  321,   -1,
   -1,  275,   -1,  277,   -1,   -1,  280,  281,  331,   -1,
  333,   -1,  335,  287,  288,  289,   -1,   -1,   -1,   -1,
   -1,   -1,  345,   -1,  347,   -1,  349,  350,   -1,  352,
  353,   -1,  355,   -1,  357,  358,   -1,  360,   -1,  362,
   -1,  364,   -1,   -1,   -1,   -1,   -1,  370,   -1,  372,
   -1,  374,  375,   -1,   -1,   -1,   -1,   -1,  381,   -1,
   -1,  384,  385,  386,  387,  388,  256,  257,  258,  259,
  260,  261,   -1,  263,   -1,  265,   -1,  267,  268,  269,
   -1,   -1,   -1,  273,  274,   -1,  276,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  284,  285,   -1,   -1,   -1,   -1,
  290,  291,   -1,  293,   -1,  295,   -1,  297,  298,  299,
   -1,   -1,  302,   -1,  304,   -1,  306,   -1,  308,   -1,
  310,  262,  312,   -1,  314,  266,  316,  317,   -1,   -1,
   -1,  321,   -1,   -1,  275,   -1,  277,   -1,   -1,  280,
  281,  331,   -1,  333,   -1,  335,  287,  288,  289,   -1,
   -1,   -1,   -1,   -1,   -1,  345,   -1,  347,   -1,  349,
  350,   -1,  352,  353,   -1,  355,   -1,  357,  358,   -1,
  360,   -1,  362,   -1,  364,   -1,   -1,   -1,   -1,   -1,
  370,   -1,  372,   -1,  374,   -1,   -1,   -1,   -1,   -1,
   -1,  381,   -1,   -1,  384,  385,  386,  387,  388,  256,
  257,  258,  259,  260,  261,   -1,  263,   -1,  265,   -1,
  267,  268,   -1,   -1,   -1,   -1,  273,  274,   -1,  276,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  284,  285,   -1,
   -1,   -1,   -1,  290,  291,   -1,  293,   -1,  295,   -1,
  297,  298,  299,   -1,   -1,  302,   -1,  304,   -1,  306,
   -1,  308,   -1,  310,  262,  312,   -1,  314,  266,  316,
  317,   -1,   -1,   -1,  321,   -1,   -1,  275,   -1,  277,
   -1,   -1,  280,  281,  331,   -1,  333,   -1,  335,  287,
  288,  289,   -1,   -1,   -1,   -1,   -1,   -1,  345,   -1,
  347,   -1,  349,  350,   -1,  352,  353,   -1,  355,   -1,
  357,  358,   -1,  360,   -1,  362,   -1,  364,   -1,   -1,
   -1,   -1,   -1,  370,   -1,  372,   -1,  374,   -1,   -1,
   -1,   -1,   -1,   -1,  381,   -1,   -1,  384,  385,  386,
  387,  388,  257,  258,  259,  260,  261,   -1,  263,   -1,
  265,   -1,  267,  268,   -1,   -1,   -1,   -1,  273,  274,
   -1,  276,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  284,
  285,   -1,   -1,   -1,   -1,  290,  291,   -1,  293,   -1,
  295,   -1,  297,  298,  299,   -1,   -1,  302,   -1,  304,
   -1,  306,   -1,  308,   -1,  310,  262,  312,   -1,  314,
  266,  316,  317,   -1,   -1,   -1,  321,   -1,   -1,  275,
   -1,  277,   -1,   -1,  280,  281,  331,   -1,  333,   -1,
  335,  287,  288,  289,   -1,   -1,   -1,   -1,   -1,   -1,
  345,   -1,  347,   -1,  349,  350,   -1,  352,  353,   -1,
  355,   -1,  357,  358,   -1,  360,   -1,  362,   -1,  364,
   -1,   -1,   -1,   -1,   -1,  370,   -1,  372,   -1,  374,
   -1,   -1,   -1,   -1,   -1,   -1,  381,   -1,  264,  384,
  385,  386,  387,  388,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,  300,  301,   -1,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,   -1,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,  300,  301,   -1,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,  300,  301,   -1,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,  300,  301,   -1,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,   -1,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,  300,  301,   -1,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,  300,  301,   -1,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,  300,  301,   -1,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,  300,  301,   -1,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,  300,  301,   -1,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,  300,  301,   -1,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
   -1,   -1,   -1,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,   -1,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,   -1,  354,   -1,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,   -1,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,  300,  301,   -1,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,   -1,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,  300,  301,   -1,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,   -1,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,  300,  301,   -1,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,   -1,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,  300,  301,   -1,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
   -1,   -1,   -1,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,   -1,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,   -1,  354,   -1,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,   -1,  354,   -1,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,   -1,  354,   -1,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,   -1,  354,   -1,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,   -1,  354,   -1,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,   -1,  354,   -1,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,   -1,  354,   -1,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,   -1,  354,   -1,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,   -1,  354,   -1,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,   -1,  354,   -1,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,   -1,  354,   -1,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,   -1,  354,   -1,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,   -1,  354,   -1,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,   -1,  354,   -1,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,   -1,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,  300,  301,   -1,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,   -1,  301,  302,  303,   -1,  305,
   -1,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,   -1,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,   -1,  301,  302,  303,   -1,  305,
   -1,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,   -1,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,   -1,  301,  302,  303,   -1,  305,
   -1,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,   -1,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,   -1,  301,  302,  303,   -1,  305,
   -1,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,   -1,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,   -1,  301,  302,  303,   -1,  305,
   -1,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,   -1,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,   -1,  301,  302,  303,   -1,  305,
   -1,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,   -1,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,   -1,  301,  302,  303,   -1,  305,
   -1,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,   -1,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
   -1,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,  358,  359,  360,  361,  362,  363,   -1,  365,
  366,  367,  368,  369,   -1,  371,   -1,  373,   -1,  375,
   -1,  377,  378,  379,  380,   -1,  382,  383,  264,  385,
  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,  309,   -1,  311,   -1,  313,   -1,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,   -1,  264,   -1,  385,
  386,  387,  388,  270,  271,  272,   -1,   -1,  275,   -1,
   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,  286,
   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,  296,
   -1,   -1,  299,  300,  301,  302,  303,  304,  305,  306,
  307,   -1,  309,   -1,  311,   -1,  313,   -1,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
  337,  338,  339,  340,  341,  342,  343,  344,  345,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,  358,  359,  360,  361,  362,  363,  364,  365,  366,
  367,  368,  369,   -1,  371,  372,  373,  374,  375,  376,
  377,  378,  379,  380,   -1,   -1,  264,   -1,  385,  386,
  387,  388,  270,  271,  272,   -1,   -1,  275,   -1,   -1,
   -1,  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,
   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,
   -1,  299,  300,  301,  302,  303,  304,  305,  306,  307,
   -1,  309,   -1,  311,   -1,  313,   -1,  315,  316,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,
  338,  339,  340,  341,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
  368,  369,   -1,  371,  372,  373,  374,  375,  376,  377,
  378,  379,  380,   -1,   -1,  264,   -1,  385,  386,  387,
  388,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,   -1,  322,  323,  324,   -1,  326,   -1,  328,
   -1,  330,   -1,  332,   -1,  334,   -1,  336,   -1,  338,
   -1,  340,   -1,  342,   -1,  344,  345,  346,  347,  348,
  349,  350,  351,   -1,  353,  354,  355,  356,   -1,   -1,
  359,   -1,  361,   -1,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
   -1,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,   -1,  302,   -1,  304,   -1,  306,   -1,  308,
   -1,  310,   -1,  312,   -1,  314,   -1,  316,  317,   -1,
   -1,  321,  321,   -1,   -1,  325,  325,  327,  327,  329,
  329,  331,  331,  333,  333,  335,  335,  337,  337,  339,
  339,  341,  341,  343,  343,   -1,  345,   -1,  347,   -1,
  349,  350,  352,  352,  353,   -1,  355,   -1,  358,  358,
  360,  360,  362,  362,   -1,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  379,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
   -1,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,   -1,  348,
   -1,   -1,  351,  352,  353,  354,  355,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,  264,  382,  383,   -1,   -1,   -1,  270,  271,
  272,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,
  282,  283,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,
   -1,   -1,  294,   -1,  296,   -1,   -1,   -1,  300,  301,
   -1,  303,   -1,  305,   -1,  307,   -1,  309,   -1,  311,
   -1,  313,   -1,  315,   -1,   -1,  318,  319,  320,   -1,
  322,  323,  324,  325,  326,  327,  328,  329,  330,   -1,
  332,   -1,  334,   -1,  336,  337,  338,  339,  340,  341,
  342,  343,  344,   -1,  346,   -1,  348,   -1,   -1,  351,
   -1,   -1,  354,   -1,  356,   -1,   -1,  359,   -1,  361,
   -1,  363,   -1,  365,  366,  367,  368,  369,   -1,  371,
   -1,  373,   -1,  375,  376,  377,  378,  379,  380,  264,
  382,  383,   -1,   -1,   -1,  270,  271,  272,   -1,   -1,
  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,
   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,
   -1,  296,   -1,   -1,   -1,  300,  301,   -1,  303,   -1,
  305,   -1,  307,   -1,  309,   -1,  311,   -1,  313,   -1,
  315,   -1,   -1,  318,  319,  320,   -1,  322,  323,  324,
  325,  326,  327,  328,  329,  330,   -1,  332,   -1,  334,
   -1,  336,  337,  338,  339,  340,  341,  342,  343,  344,
   -1,  346,   -1,  348,   -1,   -1,  351,   -1,   -1,  354,
   -1,  356,   -1,   -1,  359,   -1,  361,   -1,  363,   -1,
  365,  366,  367,  368,  369,   -1,  371,   -1,  373,   -1,
  375,  376,  377,  378,  379,  380,  264,  382,  383,   -1,
   -1,   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,
   -1,  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,
   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,
   -1,   -1,  300,  301,   -1,  303,   -1,  305,   -1,  307,
   -1,  309,   -1,  311,   -1,  313,   -1,  315,   -1,   -1,
  318,  319,  320,   -1,  322,  323,  324,  325,  326,  327,
  328,  329,  330,   -1,  332,   -1,  334,   -1,  336,  337,
  338,  339,  340,  341,  342,  343,  344,   -1,  346,   -1,
  348,   -1,   -1,  351,   -1,   -1,  354,   -1,  356,   -1,
   -1,  359,   -1,  361,   -1,  363,   -1,  365,  366,  367,
  368,  369,   -1,  371,   -1,  373,   -1,  375,  376,  377,
  378,  379,  380,  264,  382,  383,   -1,   -1,   -1,  270,
  271,  272,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,
   -1,  282,  283,   -1,   -1,  286,   -1,   -1,  289,   -1,
   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,   -1,  300,
  301,   -1,  303,   -1,  305,   -1,  307,   -1,  309,   -1,
  311,   -1,  313,   -1,  315,   -1,   -1,  318,  319,  320,
   -1,  322,  323,  324,  325,  326,  327,  328,  329,  330,
   -1,  332,   -1,  334,   -1,  336,  337,  338,  339,  340,
  341,  342,  343,  344,   -1,  346,   -1,  348,   -1,   -1,
  351,   -1,   -1,  354,   -1,  356,   -1,   -1,  359,   -1,
  361,   -1,  363,   -1,  365,  366,  367,  368,  369,   -1,
  371,   -1,  373,   -1,  375,  376,  377,  378,  379,  380,
  264,  382,  383,   -1,   -1,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,   -1,  300,  301,   -1,  303,
   -1,  305,   -1,  307,   -1,  309,   -1,  311,   -1,  313,
   -1,  315,   -1,   -1,  318,  319,  320,   -1,  322,  323,
  324,  325,  326,  327,  328,  329,  330,   -1,  332,   -1,
  334,   -1,  336,  337,  338,  339,  340,  341,  342,  343,
  344,   -1,  346,   -1,  348,   -1,   -1,  351,   -1,   -1,
  354,   -1,  356,   -1,   -1,  359,   -1,  361,   -1,  363,
   -1,  365,  366,  367,  368,  369,   -1,  371,   -1,  373,
   -1,  375,  376,  377,  378,  379,  380,  264,  382,  383,
   -1,   -1,   -1,  270,  271,  272,   -1,   -1,  275,   -1,
   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,  286,
   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,  296,
   -1,   -1,   -1,  300,  301,   -1,  303,   -1,  305,   -1,
  307,   -1,  309,   -1,  311,   -1,  313,   -1,  315,   -1,
   -1,  318,  319,  320,   -1,  322,  323,  324,  325,  326,
  327,  328,  329,  330,   -1,  332,   -1,  334,   -1,  336,
  337,  338,  339,  340,  341,  342,  343,  344,   -1,  346,
   -1,  348,   -1,   -1,  351,   -1,   -1,  354,   -1,  356,
   -1,   -1,  359,   -1,  361,   -1,  363,   -1,  365,  366,
  367,  368,  369,   -1,  371,   -1,  373,   -1,  375,  376,
  377,  378,  379,  380,  264,  382,  383,   -1,   -1,   -1,
  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,  279,
   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,  289,
   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,   -1,
  300,  301,   -1,  303,   -1,  305,   -1,  307,   -1,  309,
   -1,  311,   -1,  313,   -1,  315,   -1,   -1,  318,  319,
  320,   -1,  322,  323,  324,  325,  326,  327,  328,  329,
  330,   -1,  332,   -1,  334,   -1,  336,  337,  338,  339,
  340,  341,  342,  343,  344,   -1,  346,   -1,  348,   -1,
   -1,  351,   -1,   -1,  354,   -1,  356,   -1,   -1,  359,
   -1,  361,   -1,  363,   -1,  365,  366,  367,  368,  369,
   -1,  371,   -1,  373,   -1,  375,  376,  377,  378,  379,
  380,  264,  382,  383,   -1,   -1,   -1,  270,  271,  272,
   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,
  283,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,
   -1,  294,   -1,  296,   -1,   -1,   -1,  300,  301,   -1,
  303,   -1,  305,   -1,  307,   -1,  309,   -1,  311,   -1,
  313,   -1,  315,   -1,   -1,  318,  319,  320,   -1,  322,
  323,  324,  325,  326,  327,  328,  329,  330,   -1,  332,
   -1,  334,   -1,  336,  337,  338,  339,  340,  341,  342,
  343,  344,   -1,  346,   -1,  348,   -1,   -1,  351,   -1,
   -1,  354,   -1,  356,   -1,   -1,  359,   -1,  361,   -1,
  363,   -1,  365,  366,  367,  368,  369,   -1,  371,   -1,
  373,   -1,  375,  376,  377,  378,  379,  380,  264,  382,
  383,   -1,   -1,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,   -1,  300,  301,   -1,  303,   -1,  305,
   -1,  307,   -1,  309,   -1,  311,   -1,  313,   -1,  315,
   -1,   -1,  318,  319,  320,   -1,  322,  323,  324,  325,
  326,  327,  328,  329,  330,   -1,  332,   -1,  334,   -1,
  336,  337,  338,  339,  340,  341,  342,  343,  344,   -1,
  346,   -1,  348,   -1,   -1,  351,   -1,   -1,  354,   -1,
  356,   -1,   -1,  359,   -1,  361,   -1,  363,   -1,  365,
  366,  367,  368,  369,   -1,  371,   -1,  373,   -1,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,  270,  271,
  272,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,
  282,  283,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,
   -1,   -1,  294,   -1,  296,   -1,   -1,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
  342,  343,  344,  345,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,  368,  369,   -1,  371,
  372,  373,  374,  375,  376,  377,  378,  379,  380,   -1,
  382,  383,   -1,  385,  386,  387,  388,  301,   -1,  303,
   -1,  305,   -1,  307,   -1,  309,   -1,  311,   -1,  313,
   -1,  315,   -1,   -1,  318,  319,  320,   -1,  322,  323,
  324,   -1,  326,   -1,  328,   -1,  330,   -1,  332,   -1,
  334,   -1,  336,   -1,  338,   -1,  340,   -1,  342,   -1,
  344,   -1,  346,   -1,  348,  262,   -1,  351,   -1,  266,
  354,   -1,  356,   -1,   -1,  359,   -1,  361,  275,  363,
  277,   -1,   -1,  280,  281,   -1,   -1,   -1,   -1,   -1,
  287,  288,  289,   -1,  378,  258,  259,  260,  261,  262,
  263,  264,  265,  266,  267,  268,   -1,  270,  271,  272,
  ]
$define YYFINAL 2
$define YYMAXTOKEN 388
  yyname := [
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"IDENT","INTLIT","REALLIT",
"STRINGLIT","CSETLIT","EOFX","BREAK","BY","CASE","CLASS","CREATE","CRITICAL",
"DEFAULT","DO","ELSE","END","EVERY","FAIL","GLOBAL","IF","IMPORT","iconINITIAL",
"INITIALLY","INVOCABLE","LINK","LOCAL","METHOD","NEXT","NOT","OF","PACKAGE",
"PROCEDURE","RECORD","REPEAT","RETURN","STATIC","SUSPEND","THEN","THREAD","TO",
"UNTIL","WHILE","BANG","MOD","AUGMOD","AND","AUGAND","STAR","AUGSTAR","INTER",
"AUGINTER","PLUS","AUGPLUS","UNION","AUGUNION","MINUS","AUGMINUS","DIFF",
"AUGDIFF","DOT","SLASH","AUGSLASH","ASSIGN","SWAP","NMLT","AUGNMLT","REVASSIGN",
"REVSWAP","SLT","AUGSLT","SLE","AUGSLE","NMLE","AUGNMLE","NMEQ","AUGNMEQ","SEQ",
"AUGSEQ","EQUIV","AUGEQUIV","NMGT","AUGNMGT","NMGE","AUGNMGE","SGT","AUGSGT",
"SGE","AUGSGE","QMARK","AUGQMARK","AT","AUGAT","BACKSLASH","CARET","AUGCARET",
"BAR","CONCAT","AUGCONCAT","LCONCAT","AUGLCONCAT","TILDE","NMNE","AUGNMNE",
"SNE","AUGSNE","NEQUIV","AUGNEQUIV","LPAREN","RPAREN","PCOLON","COMMA","MCOLON",
"COLON","COLONCOLON","SEMICOL","LBRACK","RBRACK","LBRACE","RBRACE","DOLLAR",
"ABSTRACT","PMATCH","PAND","POR","PUNEVAL","PASSNONMATCH","PIMDASSN","PSETCUR",
"SND","SNDBK","RCV","RCVBK",
  ]
  yyrule := [
"$accept : program",
"program : decls EOFX",
"decls :",
"decls : decls decl",
"decl : record",
"decl : proc",
"decl : global",
"decl : link",
"decl : package",
"decl : import",
"decl : invocable",
"decl : cl",
"initiallysection :",
"initiallysection : INITIALLY SEMICOL locals initial procbody",
"initiallysection : INITIALLY LPAREN arglist RPAREN SEMICOL locals initial procbody",
"optsemi :",
"optsemi : SEMICOL",
"cl : classhead optsemi clocals methods optsemi initiallysection END",
"classhead : CLASS IDENT supers LPAREN carglist RPAREN",
"supers :",
"supers : COLON IDENT supers",
"supers : COLON packageref supers",
"packageref : IDENT COLONCOLON IDENT",
"packageref : COLONCOLON IDENT",
"methods :",
"methods : meth methods",
"methods : global methods",
"methods : record methods",
"invocable : INVOCABLE invoclist",
"invoclist : invocop",
"invoclist : invoclist COMMA invocop",
"invocop : IDENT",
"invocop : STRINGLIT",
"invocop : STRINGLIT COLON INTLIT",
"package : PACKAGE lnkfile",
"import : IMPORT implist",
"link : LINK lnklist",
"lnklist : lnkfile",
"lnklist : lnklist COMMA lnkfile",
"implist : lnkfile",
"implist : implist COMMA lnkfile",
"lnkfile : IDENT",
"lnkfile : STRINGLIT",
"global : GLOBAL idlist",
"record : RECORD IDENT LPAREN fldlist RPAREN",
"fldlist :",
"fldlist : idlist",
"proc : prochead SEMICOL locals initial procbody END",
"meth : methhead SEMICOL locals initial procbody END",
"meth : ABSTRACT methhead",
"prochead : PROCEDURE IDENT LPAREN arglist RPAREN",
"methhead : METHOD IDENT LPAREN arglist RPAREN",
"arglist :",
"arglist : parmlist",
"arglist : parmlist LBRACK RBRACK",
"carglist :",
"carglist : cparmlist",
"carglist : cparmlist LBRACK RBRACK",
"idlist : IDENT",
"idlist : idlist COMMA IDENT",
"varlist : IDENT",
"varlist : IDENT ASSIGN expr1",
"varlist : varlist COMMA IDENT",
"varlist : varlist COMMA IDENT ASSIGN expr1",
"stalist : IDENT",
"stalist : IDENT ASSIGN expr1",
"stalist : stalist COMMA IDENT",
"stalist : stalist COMMA IDENT ASSIGN expr1",
"parmlist : arg",
"parmlist : parmlist COMMA arg",
"cparmlist : carg",
"cparmlist : cparmlist COMMA carg",
"arg : IDENT",
"arg : IDENT COLON IDENT",
"arg : IDENT COLON literal",
"arg : IDENT COLON IDENT COLON literal",
"arg : IDENT COLON AND IDENT",
"arg : IDENT COLON IDENT COLON AND IDENT",
"arg : IDENT COLON LBRACK RBRACK",
"arg : IDENT COLON IDENT COLON LBRACK RBRACK",
"carg : priv arg",
"priv :",
"priv : PLUS",
"priv : MINUS",
"clocals :",
"clocals : clocals LOCAL varlist optsemi",
"locals :",
"locals : locals LOCAL varlist SEMICOL",
"locals : locals STATIC stalist SEMICOL",
"initial :",
"initial : iconINITIAL expr SEMICOL",
"procbody :",
"procbody : nexpr SEMICOL procbody",
"nexpr :",
"nexpr : expr",
"expr : expr1a",
"expr : expr AND expr1a",
"expr1a : expr1",
"expr1a : expr1a QMARK expr1",
"expr1 : expr2a",
"expr1 : expr2a SWAP expr1",
"expr1 : expr2a ASSIGN expr1",
"expr1 : expr2a REVSWAP expr1",
"expr1 : expr2a REVASSIGN expr1",
"expr1 : expr2a AUGCONCAT expr1",
"expr1 : expr2a AUGLCONCAT expr1",
"expr1 : expr2a AUGDIFF expr1",
"expr1 : expr2a AUGUNION expr1",
"expr1 : expr2a AUGPLUS expr1",
"expr1 : expr2a AUGMINUS expr1",
"expr1 : expr2a AUGSTAR expr1",
"expr1 : expr2a AUGINTER expr1",
"expr1 : expr2a AUGSLASH expr1",
"expr1 : expr2a AUGMOD expr1",
"expr1 : expr2a AUGCARET expr1",
"expr1 : expr2a AUGNMEQ expr1",
"expr1 : expr2a AUGEQUIV expr1",
"expr1 : expr2a AUGNMGE expr1",
"expr1 : expr2a AUGNMGT expr1",
"expr1 : expr2a AUGNMLE expr1",
"expr1 : expr2a AUGNMLT expr1",
"expr1 : expr2a AUGNMNE expr1",
"expr1 : expr2a AUGNEQUIV expr1",
"expr1 : expr2a AUGSEQ expr1",
"expr1 : expr2a AUGSGE expr1",
"expr1 : expr2a AUGSGT expr1",
"expr1 : expr2a AUGSLE expr1",
"expr1 : expr2a AUGSLT expr1",
"expr1 : expr2a AUGSNE expr1",
"expr1 : expr2a AUGQMARK expr1",
"expr1 : expr2a AUGAND expr1",
"expr1 : expr2a AUGAT expr1",
"expr2a : expr2",
"expr2a : expr2a PMATCH expr2",
"expr2 : expr3",
"expr2 : expr2 TO expr3",
"expr2 : expr2 TO expr3 BY expr3",
"expr2 : expr2 POR expr3",
"expr3 : expr4",
"expr3 : expr4 PAND expr3",
"expr3 : expr4 BAR expr3",
"expr4 : expr5",
"expr4 : expr4 SEQ expr5",
"expr4 : expr4 SGE expr5",
"expr4 : expr4 SGT expr5",
"expr4 : expr4 SLE expr5",
"expr4 : expr4 SLT expr5",
"expr4 : expr4 SNE expr5",
"expr4 : expr4 NMEQ expr5",
"expr4 : expr4 NMGE expr5",
"expr4 : expr4 NMGT expr5",
"expr4 : expr4 NMLE expr5",
"expr4 : expr4 NMLT expr5",
"expr4 : expr4 NMNE expr5",
"expr4 : expr4 EQUIV expr5",
"expr4 : expr4 NEQUIV expr5",
"expr5 : expr6",
"expr5 : expr5 CONCAT expr6",
"expr5 : expr5 LCONCAT expr6",
"expr6 : expr7",
"expr6 : expr6 PIMDASSN expr7",
"expr6 : expr6 PASSNONMATCH expr7",
"expr6 : expr6 PLUS expr7",
"expr6 : expr6 DIFF expr7",
"expr6 : expr6 UNION expr7",
"expr6 : expr6 MINUS expr7",
"expr7 : expr8",
"expr7 : expr7 STAR expr8",
"expr7 : expr7 INTER expr8",
"expr7 : expr7 SLASH expr8",
"expr7 : expr7 MOD expr8",
"expr8 : expr9",
"expr8 : postfixthreadop",
"expr8 : expr9 CARET expr8",
"postfixthreadop : expr9 SND",
"postfixthreadop : expr9 SNDBK",
"postfixthreadop : expr9 RCV",
"postfixthreadop : expr9 RCVBK",
"expr9 : expr10",
"expr9 : expr9 BACKSLASH expr10",
"expr9 : expr9 AT expr10",
"expr9 : expr9 SND expr10",
"expr9 : expr9 SNDBK expr10",
"expr9 : expr9 RCV expr10",
"expr9 : expr9 RCVBK expr10",
"expr9 : expr9 BANG expr10",
"expr10 : expr11",
"expr10 : AT expr10",
"expr10 : SND expr10",
"expr10 : SNDBK expr10",
"expr10 : RCV expr10",
"expr10 : RCVBK expr10",
"expr10 : NOT expr10",
"expr10 : BAR expr10",
"expr10 : CONCAT expr10",
"expr10 : LCONCAT expr10",
"expr10 : DOT expr10",
"expr10 : BANG expr10",
"expr10 : DIFF expr10",
"expr10 : PLUS expr10",
"expr10 : STAR expr10",
"expr10 : SLASH expr10",
"expr10 : CARET expr10",
"expr10 : INTER expr10",
"expr10 : TILDE expr10",
"expr10 : MINUS expr10",
"expr10 : NMEQ expr10",
"expr10 : NMNE expr10",
"expr10 : SEQ expr10",
"expr10 : SNE expr10",
"expr10 : EQUIV expr10",
"expr10 : UNION expr10",
"expr10 : QMARK expr10",
"expr10 : NEQUIV expr10",
"expr10 : BACKSLASH expr10",
"expr10 : PSETCUR expr10",
"expr11 : literal",
"$$1 :",
"expr11 : NMLT $$1 regex NMGT",
"expr11 : section",
"expr11 : return",
"expr11 : if",
"expr11 : case",
"expr11 : while",
"expr11 : until",
"expr11 : every",
"expr11 : repeat",
"expr11 : SND",
"expr11 : SNDBK",
"expr11 : RCV",
"expr11 : RCVBK",
"expr11 : PUNEVAL",
"expr11 : CREATE expr",
"expr11 : THREAD expr",
"expr11 : CRITICAL expr2a COLON expr",
"expr11 : IDENT",
"expr11 : NEXT",
"expr11 : BREAK nexpr",
"expr11 : LPAREN exprlist RPAREN",
"expr11 : LBRACE compound RBRACE",
"expr11 : LBRACK caselist RBRACK",
"expr11 : LBRACK exprlist RBRACK",
"expr11 : LBRACK COLON expr COLON RBRACK",
"expr11 : expr11 LBRACK exprlist RBRACK",
"expr11 : expr11 LBRACE RBRACE",
"expr11 : expr11 LBRACE pdcolist RBRACE",
"expr11 : expr11 LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR INITIALLY LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR IDENT LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR IDENT DOT INITIALLY LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR IDENT DOT IDENT LPAREN exprlist RPAREN",
"expr11 : expr11 DOT IDENT",
"expr11 : packageref",
"expr11 : expr11 DOT INITIALLY",
"expr11 : AND FAIL",
"expr11 : AND IDENT",
"while : WHILE expr",
"while : WHILE expr DO expr",
"until : UNTIL expr",
"until : UNTIL expr DO expr",
"every : EVERY expr",
"every : EVERY expr DO expr",
"repeat : REPEAT expr",
"return : FAIL",
"return : RETURN nexpr",
"return : SUSPEND nexpr",
"return : SUSPEND expr DO expr",
"if : IF expr THEN expr",
"if : IF expr THEN expr ELSE expr",
"case : CASE expr OF LBRACE caselist RBRACE",
"caselist : cclause",
"caselist : caselist SEMICOL cclause",
"cclause : DEFAULT COLON expr",
"cclause : expr COLON expr",
"exprlist : nexpr",
"exprlist : exprlist COMMA nexpr",
"pdcolist : nexpr",
"pdcolist : pdcolist COMMA nexpr",
"literal : INTLIT",
"literal : REALLIT",
"literal : STRINGLIT",
"literal : CSETLIT",
"regex : neregex",
"regex :",
"neregex : neregex2a",
"neregex : neregex2a BAR neregex",
"neregex2a : neregex2",
"neregex2a : neregex2 neregex2a",
"neregex2 : neregex3",
"neregex2 : neregex2 STAR",
"neregex2 : neregex2 PLUS",
"neregex2 : neregex2 QMARK",
"neregex2 : neregex2 LBRACE INTLIT RBRACE",
"neregex3 : IDENT",
"neregex3 : BREAK",
"neregex3 : BY",
"neregex3 : PROCEDURE",
"neregex3 : INTLIT",
"neregex3 : REALLIT",
"neregex3 : STRINGLIT",
"neregex3 : CSETLIT",
"neregex3 : DOT",
"neregex3 : LPAREN regex RPAREN",
"neregex3 : LBRACK brackchars RBRACK",
"neregex3 : LBRACK CARET brackchars RBRACK",
"neregex3 : BACKSLASH neregex",
"brackchars : brackchars2",
"brackchars : brackchars MINUS brackchars2",
"brackchars : brackchars brackchars2",
"brackchars2 : IDENT",
"brackchars2 : INTLIT",
"brackchars2 : REALLIT",
"brackchars2 : DOT",
"brackchars2 : BACKSLASH IDENT",
"brackchars2 : BACKSLASH INTLIT",
"section : expr11 LBRACK expr sectop expr RBRACK",
"sectop : COLON",
"sectop : PCOLON",
"sectop : MCOLON",
"compound : nexpr",
"compound : nexpr SEMICOL compound",
"program : error decls EOFX",
"proc : prochead error procbody END",
"expr : error",
  ]

end

#####################################################################
#####################################################################
invocable all    # need to look up semantic actions by name

global yytext    # user variable to return contextual strings
global yyval     # used to return semantic vals from action routines
global yylval    # the 'lval' (result) I got from yylex()
global yydebug   # (boolean) do I want debug output?
global yynerrs   # (integer) number of errors so far
global yyerrflag # (integer) was there an error?
global yychar    # (integer) the current working character
global action    # maps an integer to a semantic action procedure

global yylhs
global yylen
global yydefred
global yydgoto
global yysindex
global yyrindex
global yygindex
global yytable
global yycheck
global yyname
global yyrule

global statestk         # state stack
global valstk           # value stack
################################################################
# procedure: init_stacks : allocate and prepare stacks
################################################################
procedure init_stacks()
  local i
  statestk := []
  valstk := []
  yyval  := 0
  yylval := 0
  action := list(1000, action_null)  # remove hard coded 1000 later
  every i := 1 to 1000 do action[i] := proc("action_" || i)
end

#line 907 "unigram.y"

#
# This procedure parenthesizes the right-hand side of an expression,
# apparently to simplify or correct any precedence or semantic issues
# when passing the code on to iconc.
#
procedure parenthesize_assign(nd)
   local rhs

   if /iconc then
      return nd
   if not (*nd.children = 3) then
      return nd
   rhs := nd.children[3]
   if (not(type(rhs) == "treenode")) then
      return nd
   if (not(rhs.label == "invoke")) then
      return nd
   rhs := node("Paren", "(", rhs, ")")
   nd.children[3] := rhs
   return nd
end

procedure FieldRef(lhs, dot, rhs)
   if /iconc | (type(lhs) ~== "treenode") then
      return Field(lhs, dot, rhs)

   if (lhs.label == "invoke") then {
      tmpcount +:= 1;
      return node("Paren", "(",
         node("assign", "__" || tmpcount, " := ", lhs, ")", "& "),
         node("invoke", Field("__" || tmpcount, ".", rhs))
         )
      }
   return Field(lhs, dot, rhs)
end

procedure InvocationNode(args[])
   tmpcount +:= 1
   if type(args[1]) == "token" & (args[1].tok = IDENT) then {
       n1 := args[1]
       lparen := copy(args[1])
       lparen.tok := LPAREN
       lparen.s := "("
   }
   else {
       n1 := node("Paren","(",node("assign","__"||tmpcount,":=",args[1]),")")
       if lparen := Clone1stToken(args[1]) then {
           lparen.tok := LPAREN
           lparen.s := "("
       }
       else lparen := "("
   }
   if *args = 6 then {
       return node("Paren",lparen,node("invoke",
                    # iconc uses no __m business
                   (if /iconc then Field(Field(n1, ".", "__m"), "." , args[3])
                              else Field(n1, ".", args[3])),

             args[4], node("exprlist",
             if n1 === args[1] then args[1] else "__"||tmpcount,
             if args[5] === &null then &null else ",",args[5]),args[6])
             ,")")
      }
   else {
      if /iconc then
         return  node("Paren",lparen,node("invoke",Field(Field(
                          Field(n1,".", "__m"),
                         "." , args[3]),".",args[5]),
                       args[6], node("exprlist",
                                if n1 === args[1] then args[1] else "__"||tmpcount,
                                if args[7] === &null then &null else ",",args[7]),args[8])
                      ,")")
      else return SuperMethodInvok ! args
   }
end

procedure SimpleInvocation(expr11, lparen, args, rparen)
   if /iconc then
      return node("invoke", expr11, lparen, args, rparen)

   if ((type(expr11) == "token") & (expr11.tok = IDENT)) then {
      return node("invoke", expr11, lparen, args, rparen)
      }

   if (type(expr11) == "treenode") then {
      case expr11.label of {
         "field": {
            #
            # need to examine lhs of field-ref to determine
            # whether we need to decompose the expr11 further...
            #
            if (type(expr11.children[1]) == "treenode") then {
               tmpcount +:= 1;
               n1 := node("Paren", "(", node("assign", "__"||tmpcount, ":=",
                  expr11.children[1]), ")")
               return node("exprlist", "(", n1, "&",
                  node("invoke", Field("__"||tmpcount, ".", expr11.children[3]),
                  lparen, args, rparen), ")")
               }
            else {
               return node("invoke", expr11, lparen, args, rparen)
               }
            }
         default: {
            return node("invoke", expr11, lparen, args, rparen)
            }
         }
      }
   return node("invoke", expr11, lparen, args, rparen)
end

procedure SuperMethodInvok(args[])
   tmpcount +:= 1
   if (type(args[1]) == "token") & (args[1].tok = IDENT) then {
      n1 := args[1]
      lparen := copy(args[1])
      lparen.tok := LPAREN
      lparen.s := "("
      }
   else {
      n1 := node("Paren","(",node("assign","__"||tmpcount,":=",args[1]),")")
      if lparen := Clone1stToken(args[1]) then {
         lparen.tok := LPAREN
         lparen.s := "("
         }
      else
         lparen := "("
      }

   args[3].s := mangle_class_sym(args[3].s)
   args[3].s ||:= "__oprec"
   return node("exprlist", "(", n1, ")", " & ",
      node("Paren", lparen, node("invoke",
      Field(args[3], ".", args[5]),
      args[6], node("exprlist",
      if n1 === args[1] then args[1] else "__" || tmpcount,
      if args[7] === &null then &null else ",", args[7]), args[8]),
      ")", ))
end

procedure isloco(node, s)
case type(node) of {
   "treenode": {
      if *node.children > 0 then return isloco(!node.children, s)
      }
   "token" : {
      if (node.tok = IDENT) & (node.s == s) then return
      }
   }
end

procedure buildtab_from_cclause(n, args)
   if type(n) ~== "treenode" then stop("bad table literal")
   comma := copy(n.children[2])
   comma.tok := COMMA
   comma.s := ","
   case n.label of {
     "cclause0": {
        if *args.children > 0 then push(args.children, comma)
        push(args.children, n.children[3])
        }
     "cclause1": {
        if *args.children > 0 then push(args.children, comma)
        push(args.children, n.children[3])
        push(args.children, comma)
        push(args.children, n.children[1])
        }
   }
end

# build a tree equivalent to
# {__tmp :=[]; every put(__tmp, expr); if __tmp>0 then __tmp}
# The enclosing procedure/method also needs to declare this temp var;
# see AppendListCompTemps
#
procedure ListComp(expr)
   local tmp
   tmpcount +:= 1
   tmp := "__" || tmpcount
   return node("ListComp",
                "{", string(tmp), " :=[]; every put(" || tmp || ", ",
                expr,
                "); if *" || tmp || ">0 then " || tmp || "}")
end

#
# AppendListCompTemps(localdecls, procbody) - at the procedure/method
# outermost level, we may need to add some declarations based on what's
# in the procbody. If there are changes to the declared lcls section,
# returns changed locals.
#
procedure AppendListCompTemps(lcls, body)
   # if there is, in the procbody, a list of varnames to declare
   if *\(ltmps := ListCompTemps(body)) > 0 then {
      # make a varlist containing ltmps
      if *ltmps > 1 then {
         vl := token(IDENT, ltmps[1], 0, 0, "lambda.icn")
         every i := 2 to *ltmps do
            vl := node("varlist3", vl, ",",
                        token(IDENT, ltmps[i], 0, 0, "lambda.icn"))
         }
      else {
         # the varlist will just be an IDENT
         vl := token(IDENT, ltmps[1], 0, 0, "lambda.icn")
         }
      if (lcls === &null) |
          (type(lcls)==="treenode" & lcls.label==("locals2"|"locals3")) then {
         return node("locals2", lcls, "local", vl, ";")
         }
      else
         write(&errout, "don't know what to do with ", image(lcls))
      }
end

#
# ListCompTemps(n) - lower level temp. var extraction from proc body.
# returns list of strings containing temp. variables from list comprehension
# L
procedure ListCompTemps(n)
   local LCT
   if type(n) == "treenode" then {
      if n.label=="ListComp" then {
         LCT := [n.children[2]]
         LCT |||:= ListCompTemps(n.children[4])
         return LCT
         }
      else if LCT := ListCompTemps(n.children[k := 1 to *(n.children)]) then {
         every kk := k+1 to *(n.children) do {
            LCT |||:= ListCompTemps(n.children[kk])
            }
         return LCT
         }
      }
end

procedure tablelit(lb, cl, rb)
local tabid, lp, rp, args
   args := node("elst1")
   while type(cl)=="treenode" & cl.label == "Caselist" do {
      buildtab_from_cclause(cl.children[3], args)
      cl := cl.children[1]
      }
   buildtab_from_cclause(cl, args)
   tabid := copy(lb); tabid.tok := IDENT; tabid.s := "table"
   lp := copy(lb); lp.tok := LPAREN; lp.s := "("
   rp := copy(rb); rp.tok := RPAREN; rp.s := ")"
   return node("invoke", tabid, lp, args, rp)
end

#
# A record type for recording errors for later reporting e.g. within an IDE,
# or to stderr.
#
record ParseError ( lineNumber, errorMessage )
#line 2894 "unigram.icn"
$define YYACCEPT return 0
$define YYABORT return 1
################################################################
# procedure: yyparse : parse input and execute indicated items
################################################################
procedure yyparse()
  local yyn        # next next thing to do
  local yym        #
  local yystate    # current parsing state from state table
  local yys        # current token string
  local doaction   # set to 1 if there need to execute action
  local token      # current token

  if /yytable then init()
  init_stacks()
  yynerrs   := 0
  yyerrflag := 0
  yychar    := -1           # impossible char forces a read
  yystate   := 0            # initial state
  push(statestk, yystate)   # save it

  repeat { # until parsing is done, either correctly, or w/error
    doaction := 1

    ##### NEXT ACTION (from reduction table)
        yyn := yydefred[yystate+1]

    while yyn = 0 do {

      if yychar < 0 then {   # we want a char?
        yychar := yylex()    # get next token
        ##### ERROR CHECK ####
        if yychar < 0 then { # it it didn't work/error
          yychar := 0        # change it to default string (no -1!)
          if \yydebug = 1 then yylexdebug(yystate, yychar)
          }
        } # yychar < 0

      yyn := yysindex[yystate+1]  # get amount to shift by (shift index)

      if (yyn ~= 0)           & ((yyn +:= yychar) >= 0) &
         (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yychar) then {

        ##### NEXT STATE ####
        yystate := yytable[yyn+1] # we are in a new state
        push(statestk, yystate)   # save it
        push(valstk, yylval)      # push our lval as the input for next rule
        yychar := -1              # since we have 'eaten' a token, say we need another
        if yyerrflag > 0 then     # have we recovered an error?
           yyerrflag -:= 1        # give ourselves credit
        doaction := 0             # but don't process yet
        break                     # quit the yyn=0 loop
        }

    yyn := yyrindex[yystate+1]    # reduce

    if (yyn ~= 0)           & ((yyn +:= yychar) >= 0) &
       (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yychar) then {
      # e reduced!
      yyn      := yytable[yyn+1]
      doaction := 1  # get ready to execute
      break          # drop down to actions
      }
    else { #ERROR RECOVERY
      if yyerrflag == 0 then {
        (\yyerror | write)("syntax error")
        yynerrs +:= 1
      }
      if yyerrflag < 3 then {     # low error count?
        yyerrflag := 3
        repeat { #do until break
          if *statestk < 1 then {  # check for under & overflow here
            (\yyerror | write)("stack underflow. aborting...")   # note lower case 's'
            return 1
          }
          yyn := yysindex[statestk[1]]
          if ((yyn ~= 0) & (yyn +:= YYERRCODE) >= 0 &
                    yyn <= YYTABLESIZE & yycheck[yyn+1] == YYERRCODE) then {
            yystate := yytable[yyn+1]
            push(statestk, yystate)
            push(valstk, yylval)
            doaction := 0
            break
          }
          else {
            if *statestk = 0 then { # check for under & overflow here
              write("Stack underflow. aborting...") # capital 'S'
              return 1
            }
            pop(statestk)
            pop(valstk)
            }
          }
        }
      else  # discard this token
        {
        if yychar = 0 then return 1  # yyabort
        if \yydebug = 1 then {
          yys := &null
          if yychar <= YYMAXTOKEN then yys := yyname[yychar+1]
          if integer(yys) & yys = 0 then yys := "illegal-symbol"
          write("state ",  yystate, ", error recovery discards token ",
                yychar, " (", yys, ")")
          }
        yychar := -1       # read another
        }
      } # end error recovery
      yyn := yydefred[yystate+1]
    }# yyn = 0 loop

    if doaction = 0 then   # any reason not to proceed?
      next                 # skip action

    yym := yylen[yyn+1]    # get count of terminals on rhs
    yyval := valstk[yym]   # get current semantic value
    if arv := action[yyn]() then return arv # execute the semantic action

    ##### Now let's reduce... ####
    every 1 to yym do pop(statestk)# we just reduced yylen states
    yystate := statestk[1]        # get new state

    every 1 to yym do pop(valstk) # corresponding value drop
    yym := yylhs[yyn+1]           # select next TERMINAL(on lhs)
    if yystate = 0 & yym = 0 then {
                                  # done? 'rest' state and at first TERMINAL
      yystate := YYFINAL          # explicitly say we're done
      push(statestk, YYFINAL)     # and save it
      push(valstk, yyval)         # also save the semantic value of parsing
      if yychar < 0 then {        # we want another character?
        yychar := yylex()         # get next character
        if yychar < 0 then yychar := 0   #clean, if necessary
      }
      if yychar = 0 then break    # Good exit (if lex returns 0  -)
                                  # quit the loop--all DONE
    } # if yystate
    else {                        #else not done yet
      # get next state and push, for next yydefred[]
      yyn := yygindex[yym+1]        # find out where to go
      if (yyn ~= 0)           & ((yyn +:= yystate) >= 0) &
         (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yystate) then {
        yystate := yytable[yyn+1]   # get new state
        }
      else {
        yystate := yydgoto[yym+1]   # else go to new defred
             }
      push(statestk, yystate)       # going again, so push state & val...
      push(valstk, yyval)           # for next action
      }
    } # main loop

  return 0 # yyaccept!!
end

### end of procedure parse() ######################################

### start semantic actions ########################################

procedure action_null()
  #write("null action")
end

procedure action_1()
#line 301 "unigram.y"
 Progend(valstk[2])
end

procedure action_2()
#line 303 "unigram.y"
 yyval := &null
end

procedure action_3()
#line 304 "unigram.y"

             if /parsingErrors | *parsingErrors = 0 then iwrites(&errout,".")
             yyval := node("decls", valstk[2], valstk[1])

end

procedure action_12()
#line 319 "unigram.y"
 yyval := &null
end

procedure action_13()
#line 320 "unigram.y"

           yyval := Method( , , , , , valstk[5], "initially", &null, "method", "(", ")")
           yyval.locals := valstk[3]
           yyval.initl := valstk[2]
           yyval.procbody := valstk[1]

end

procedure action_14()
#line 326 "unigram.y"

           yyval := Method( , , , , , valstk[8], "initially", valstk[6], "method", "(", ")")
           yyval.locals := valstk[3]
           yyval.initl := valstk[2]
           yyval.procbody := valstk[1]

end

procedure action_15()
#line 334 "unigram.y"
 yyval := &null
end

procedure action_17()
#line 337 "unigram.y"

    yyval := class_from_parts(valstk[7], valstk[5], valstk[4], valstk[2])

end

procedure action_18()
#line 341 "unigram.y"

   yyval := Class()
   yyval.tag := valstk[6]
   yyval.unmangled_name := valstk[5].s
   yyval.name := package_mangled_symbol(valstk[5].s)
   if proc(yyval.name, 0) then
      warning("Warning: class "|| yyval.name ||" overrides the built-in function")
   if \ (foobar := classes.lookup(yyval.name)) then {
      yyerror("redeclaration of class " || yyval.name)
      }
   else
      classes.insert(yyval, yyval.name)

   yyval.supers_node := valstk[4]
   yyval.fields := valstk[2]
   yyval.lptoken := valstk[3]
   yyval.rptoken := valstk[1]

end

procedure action_19()
#line 360 "unigram.y"
 yyval := &null
end

procedure action_20()
#line 361 "unigram.y"
 yyval := node("supers", valstk[3], valstk[2], valstk[1])
end

procedure action_21()
#line 362 "unigram.y"
 yyval := node("supers", valstk[3], valstk[2], valstk[1])
end

procedure action_22()
#line 365 "unigram.y"
 yyval := node("packageref", valstk[3],valstk[2],valstk[1])
end

procedure action_23()
#line 366 "unigram.y"
 yyval := node("packageref", valstk[2],valstk[1])
end

procedure action_24()
#line 369 "unigram.y"
 yyval := &null
end

procedure action_25()
#line 370 "unigram.y"
 yyval := node("methods", valstk[2],valstk[1])
end

procedure action_26()
#line 371 "unigram.y"
 yyval := node("methods", valstk[2],valstk[1])
end

procedure action_27()
#line 372 "unigram.y"
 yyval := node("methods", valstk[2],valstk[1])
end

procedure action_28()
#line 375 "unigram.y"
 yyval := node("invocable", valstk[2], valstk[1])
end

procedure action_30()
#line 378 "unigram.y"
 yyval := node("invoclist", valstk[3],valstk[2],valstk[1])
end

procedure action_33()
#line 382 "unigram.y"
yyval := node("invocop3", valstk[3],valstk[2],valstk[1])
end

procedure action_34()
#line 384 "unigram.y"

   if \thePackage then {
      if not (thePackage.name == valstk[1].s) then {
         yyerror(yyfilename || " cannot be in both package "|| thePackage.name ||
            " and package " || valstk[1].s)
         yyval := &null
         }
      else { # this branch allowed for -C / iconc
         thePackage.insertfname(yyfilename)
         thePackage.add_imported()
         }
      }
   else {
      yyval := node("package", valstk[2],valstk[1]);
      thePackage := Package(valstk[1].s)
      thePackage.insertfname(yyfilename)
      thePackage.add_imported()
      }

end

procedure action_35()
#line 404 "unigram.y"

   yyval := node("import", valstk[2],valstk[1]," ")
   import_class(valstk[1])

end

procedure action_36()
#line 409 "unigram.y"
 yyval := node("link", valstk[2],valstk[1]," ")
end

procedure action_38()
#line 412 "unigram.y"
 yyval := node("lnklist", valstk[3],valstk[2],valstk[1])
end

procedure action_40()
#line 415 "unigram.y"
 yyval := node("implist", valstk[3],valstk[2],valstk[1])
end

procedure action_43()
#line 420 "unigram.y"
 yyval := node("global", valstk[2],valstk[1])
end

procedure action_44()
#line 422 "unigram.y"

                yyval := declaration(valstk[4],valstk[2],valstk[5],valstk[3],valstk[1])
                if \iconc then
                   ca_add_proc(yyfilename, valstk[4].s)

end

procedure action_45()
#line 428 "unigram.y"
 yyval := &null
end

procedure action_47()
#line 431 "unigram.y"

#               body_scopeck(valstk[2])
                valstk[4] := AppendListCompTemps(valstk[4], valstk[2])
                yyval := node("proc", valstk[6],";",valstk[4],valstk[3],valstk[2],valstk[1])

end

procedure action_48()
#line 437 "unigram.y"

                yyval := valstk[6]
                yyval.locals := valstk[4]
                yyval.initl := valstk[3]
                yyval.procbody := valstk[2]

end

procedure action_49()
#line 443 "unigram.y"

                yyval := valstk[1]
                yyval.abstract_flag := 1

end

procedure action_50()
#line 448 "unigram.y"

                yyval := declaration(valstk[4], valstk[2], valstk[5], valstk[3], valstk[1])
                if \iconc then
                   ca_add_proc(yyfilename, valstk[4].s)

end

procedure action_51()
#line 454 "unigram.y"

                yyval := Method( , , , , , valstk[5], valstk[4].s, valstk[2], valstk[5].s, valstk[3], valstk[1])

end

procedure action_52()
#line 459 "unigram.y"
 yyval := argList( , , &null)
end

procedure action_53()
#line 460 "unigram.y"
 yyval := argList( , , valstk[1])
end

procedure action_54()
#line 461 "unigram.y"
 yyval := argList("[]" , , valstk[3])
end

procedure action_55()
#line 463 "unigram.y"
 yyval := argList( , , &null)
end

procedure action_56()
#line 464 "unigram.y"
 yyval := argList( , , valstk[1])
end

procedure action_57()
#line 465 "unigram.y"
 yyval := argList("[]" , , valstk[3])
end

procedure action_59()
#line 469 "unigram.y"
 yyval := node("idlist", valstk[3],valstk[2],valstk[1])
end

procedure action_61()
#line 472 "unigram.y"
 yyval := node("varlist2", valstk[3], valstk[2], valstk[1])
end

procedure action_62()
#line 473 "unigram.y"
 yyval := node("varlist3", valstk[3], valstk[2], valstk[1])
end

procedure action_63()
#line 474 "unigram.y"
 yyval := node("varlist4",valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
end

procedure action_65()
#line 477 "unigram.y"
 yyval := node("stalist2", valstk[3], valstk[2], valstk[1])
end

procedure action_66()
#line 478 "unigram.y"
 yyval := node("stalist3", valstk[3], valstk[2], valstk[1])
end

procedure action_67()
#line 479 "unigram.y"
 yyval := node("stalist4",valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
end

procedure action_69()
#line 482 "unigram.y"
 yyval := node("parmlist", valstk[3],valstk[2],valstk[1])
end

procedure action_71()
#line 485 "unigram.y"
 yyval := node("parmlist", valstk[3],valstk[2],valstk[1])
end

procedure action_73()
#line 488 "unigram.y"
 yyval := node("arg2", valstk[3], valstk[2], valstk[1])
end

procedure action_74()
#line 489 "unigram.y"
 yyval := node("arg3", valstk[3], valstk[2], valstk[1])
end

procedure action_75()
#line 490 "unigram.y"
 yyval := node("arg4", valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
end

procedure action_76()
#line 491 "unigram.y"
 yyval := node("arg5", valstk[4], valstk[3], Keyword(valstk[2], valstk[1]))
end

procedure action_77()
#line 492 "unigram.y"
 yyval := node("arg6", valstk[6], valstk[5], valstk[4], valstk[3], Keyword(valstk[2], valstk[1]))
end

procedure action_78()
#line 493 "unigram.y"
 yyval := node("arg7", valstk[4], valstk[3], "[]")
end

procedure action_79()
#line 494 "unigram.y"
 yyval := node("arg8", valstk[6], valstk[5], valstk[4], valstk[3], "[]")
end

procedure action_80()
#line 497 "unigram.y"
 yyval := valstk[1]
end

procedure action_81()
#line 499 "unigram.y"
 yyval := &null
end

procedure action_84()
#line 503 "unigram.y"
 yyval := &null
end

procedure action_85()
#line 504 "unigram.y"
 yyval := node("locals2", valstk[4],valstk[3],valstk[2],";")
end

procedure action_86()
#line 506 "unigram.y"
 yyval := &null
end

procedure action_87()
#line 507 "unigram.y"
 yyval := node("locals2", valstk[4],valstk[3],valstk[2],";")
end

procedure action_88()
#line 508 "unigram.y"
 yyval := node("locals3", valstk[4],valstk[3],valstk[2],";")
end

procedure action_89()
#line 510 "unigram.y"
 yyval := &null
end

procedure action_90()
#line 511 "unigram.y"

           yyval := node("initial", valstk[3], valstk[2],";")

end

procedure action_91()
#line 515 "unigram.y"
 yyval := &null
end

procedure action_92()
#line 516 "unigram.y"
 yyval := node("procbody", valstk[3],";",valstk[1])
end

procedure action_93()
#line 518 "unigram.y"
 yyval := &null
end

procedure action_96()
#line 522 "unigram.y"
 yyval := node("and", valstk[3],valstk[2],valstk[1])
end

procedure action_98()
#line 525 "unigram.y"
 yyval := node("binques", valstk[3],valstk[2],valstk[1])
end

procedure action_100()
#line 528 "unigram.y"
 yyval := node("swap", valstk[3],valstk[2],valstk[1])
end

procedure action_101()
#line 529 "unigram.y"

          yyval := parenthesize_assign(node("assign",valstk[3],valstk[2],valstk[1]))

end

procedure action_102()
#line 532 "unigram.y"
 yyval := node("revswap", valstk[3],valstk[2],valstk[1])
end

procedure action_103()
#line 533 "unigram.y"
 yyval := node("revasgn", valstk[3],valstk[2],valstk[1])
end

procedure action_104()
#line 534 "unigram.y"
 yyval := node("augcat", valstk[3],valstk[2],valstk[1])
end

procedure action_105()
#line 535 "unigram.y"
 yyval := node("auglcat", valstk[3],valstk[2],valstk[1])
end

procedure action_106()
#line 536 "unigram.y"
 yyval := node("Bdiffa", valstk[3],valstk[2],valstk[1])
end

procedure action_107()
#line 537 "unigram.y"
 yyval := node("Buniona", valstk[3],valstk[2],valstk[1])
end

procedure action_108()
#line 538 "unigram.y"
 yyval := node("Bplusa", valstk[3],valstk[2],valstk[1])
end

procedure action_109()
#line 539 "unigram.y"
 yyval := node("Bminusa", valstk[3],valstk[2],valstk[1])
end

procedure action_110()
#line 540 "unigram.y"
 yyval := node("Bstara", valstk[3],valstk[2],valstk[1])
end

procedure action_111()
#line 541 "unigram.y"
 yyval := node("Bintera", valstk[3],valstk[2],valstk[1])
end

procedure action_112()
#line 542 "unigram.y"
 yyval := node("Bslasha", valstk[3],valstk[2],valstk[1])
end

procedure action_113()
#line 543 "unigram.y"
 yyval := node("Bmoda", valstk[3],valstk[2],valstk[1])
end

procedure action_114()
#line 544 "unigram.y"
 yyval := node("Bcareta", valstk[3],valstk[2],valstk[1])
end

procedure action_115()
#line 545 "unigram.y"
 yyval := node("Baugeq", valstk[3],valstk[2],valstk[1])
end

procedure action_116()
#line 546 "unigram.y"
 yyval := node("Baugeqv", valstk[3],valstk[2],valstk[1])
end

procedure action_117()
#line 547 "unigram.y"
 yyval := node("Baugge", valstk[3],valstk[2],valstk[1])
end

procedure action_118()
#line 548 "unigram.y"
 yyval := node("Bauggt", valstk[3],valstk[2],valstk[1])
end

procedure action_119()
#line 549 "unigram.y"
 yyval := node("Baugle", valstk[3],valstk[2],valstk[1])
end

procedure action_120()
#line 550 "unigram.y"
 yyval := node("Bauglt", valstk[3],valstk[2],valstk[1])
end

procedure action_121()
#line 551 "unigram.y"
 yyval := node("Baugne", valstk[3],valstk[2],valstk[1])
end

procedure action_122()
#line 552 "unigram.y"
 yyval := node("Baugneqv", valstk[3],valstk[2],valstk[1])
end

procedure action_123()
#line 553 "unigram.y"
 yyval := node("Baugseq", valstk[3],valstk[2],valstk[1])
end

procedure action_124()
#line 554 "unigram.y"
 yyval := node("Baugsge", valstk[3],valstk[2],valstk[1])
end

procedure action_125()
#line 555 "unigram.y"
 yyval := node("Baugsgt", valstk[3],valstk[2],valstk[1])
end

procedure action_126()
#line 556 "unigram.y"
 yyval := node("Baugsle", valstk[3],valstk[2],valstk[1])
end

procedure action_127()
#line 557 "unigram.y"
 yyval := node("Baugslt", valstk[3],valstk[2],valstk[1])
end

procedure action_128()
#line 558 "unigram.y"
 yyval := node("Baugsne", valstk[3],valstk[2],valstk[1])
end

procedure action_129()
#line 559 "unigram.y"
 yyval := node("Baugques", valstk[3],valstk[2],valstk[1])
end

procedure action_130()
#line 560 "unigram.y"
 yyval := node("Baugamper", valstk[3],valstk[2],valstk[1])
end

procedure action_131()
#line 561 "unigram.y"
 yyval := node("Baugact", valstk[3],valstk[2],valstk[1])
end

procedure action_133()
#line 564 "unigram.y"
 yyval := node("BPmatch", valstk[3],valstk[2],valstk[1])
end

procedure action_135()
#line 567 "unigram.y"
 yyval := node("to", valstk[3],valstk[2],valstk[1])
end

procedure action_136()
#line 568 "unigram.y"
 yyval := node("toby", valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
end

procedure action_137()
#line 569 "unigram.y"
 yyval := node("BPor", valstk[3],valstk[2],valstk[1])
end

procedure action_139()
#line 572 "unigram.y"
 yyval := node("BPand", valstk[3],valstk[2],valstk[1])
end

procedure action_140()
#line 573 "unigram.y"
 yyval := node(BAR, valstk[3],valstk[2],valstk[1])
end

procedure action_142()
#line 576 "unigram.y"
 yyval := node("Bseq", valstk[3],valstk[2],valstk[1])
end

procedure action_143()
#line 577 "unigram.y"
 yyval := node("Bsge", valstk[3],valstk[2],valstk[1])
end

procedure action_144()
#line 578 "unigram.y"
 yyval := node("Bsgt", valstk[3],valstk[2],valstk[1])
end

procedure action_145()
#line 579 "unigram.y"
 yyval := node("Bsle", valstk[3],valstk[2],valstk[1])
end

procedure action_146()
#line 580 "unigram.y"
 yyval := node("Bslt", valstk[3],valstk[2],valstk[1])
end

procedure action_147()
#line 581 "unigram.y"
 yyval := node("Bsne", valstk[3],valstk[2],valstk[1])
end

procedure action_148()
#line 582 "unigram.y"
 yyval := node("Beq", valstk[3],valstk[2],valstk[1])
end

procedure action_149()
#line 583 "unigram.y"
 yyval := node("Bge", valstk[3],valstk[2],valstk[1])
end

procedure action_150()
#line 584 "unigram.y"
 yyval := node("Bgt", valstk[3],valstk[2],valstk[1])
end

procedure action_151()
#line 585 "unigram.y"
 yyval := node("Ble", valstk[3],valstk[2],valstk[1])
end

procedure action_152()
#line 586 "unigram.y"
 yyval := node("Blt", valstk[3],valstk[2],valstk[1])
end

procedure action_153()
#line 587 "unigram.y"
 yyval := node("Bne", valstk[3],valstk[2],valstk[1])
end

procedure action_154()
#line 588 "unigram.y"
 yyval := node("Beqv", valstk[3],valstk[2],valstk[1])
end

procedure action_155()
#line 589 "unigram.y"
 yyval := node("Bneqv", valstk[3],valstk[2],valstk[1])
end

procedure action_157()
#line 592 "unigram.y"
 yyval := node("Bcat", valstk[3],valstk[2],valstk[1])
end

procedure action_158()
#line 593 "unigram.y"
 yyval := node("Blcat", valstk[3],valstk[2],valstk[1])
end

procedure action_160()
#line 596 "unigram.y"
 yyval := node("BPiam", valstk[3],valstk[2],valstk[1])
end

procedure action_161()
#line 597 "unigram.y"
 yyval := node("BPaom", valstk[3],valstk[2],valstk[1])
end

procedure action_162()
#line 598 "unigram.y"
 yyval := node("Bplus", valstk[3],valstk[2],valstk[1])
end

procedure action_163()
#line 599 "unigram.y"
 yyval := node("Bdiff", valstk[3],valstk[2],valstk[1])
end

procedure action_164()
#line 600 "unigram.y"
 yyval := node("Bunion", valstk[3],valstk[2],valstk[1])
end

procedure action_165()
#line 601 "unigram.y"
 yyval := node("Bminus", valstk[3],valstk[2],valstk[1])
end

procedure action_167()
#line 604 "unigram.y"
 yyval := node("Bstar", valstk[3],valstk[2],valstk[1])
end

procedure action_168()
#line 605 "unigram.y"
 yyval := node("Binter", valstk[3],valstk[2],valstk[1])
end

procedure action_169()
#line 606 "unigram.y"
 yyval := node("Bslash", valstk[3],valstk[2],valstk[1])
end

procedure action_170()
#line 607 "unigram.y"
 yyval := node("Bmod", valstk[3],valstk[2],valstk[1])
end

procedure action_173()
#line 611 "unigram.y"
 yyval := node("Bcaret", valstk[3],valstk[2],valstk[1])
end

procedure action_174()
#line 614 "unigram.y"
 yyval := node("Bsnd", valstk[2],valstk[1],&null)
end

procedure action_175()
#line 615 "unigram.y"
 yyval := node("Bsndbk", valstk[2],valstk[1],&null)
end

procedure action_176()
#line 616 "unigram.y"
 yyval := node("Brcv", valstk[2],valstk[1],&null)
end

procedure action_177()
#line 617 "unigram.y"
 yyval := node("Brcvbk", valstk[2],valstk[1],&null)
end

procedure action_179()
#line 620 "unigram.y"
 yyval := node("limit", valstk[3],valstk[2],valstk[1])
end

procedure action_180()
#line 621 "unigram.y"
 yyval := node("at", valstk[3],valstk[2],valstk[1])
end

procedure action_181()
#line 622 "unigram.y"
 yyval := node("Bsnd", valstk[3],valstk[2],valstk[1])
end

procedure action_182()
#line 623 "unigram.y"
 yyval := node("Bsndbk", valstk[3],valstk[2],valstk[1])
end

procedure action_183()
#line 624 "unigram.y"
 yyval := node("Brcv", valstk[3],valstk[2],valstk[1])
end

procedure action_184()
#line 625 "unigram.y"
 yyval := node("Brcvbk", valstk[3],valstk[2],valstk[1])
end

procedure action_185()
#line 626 "unigram.y"
 yyval := node("apply", valstk[3],valstk[2],valstk[1])
end

procedure action_187()
#line 629 "unigram.y"
 yyval := node("uat", valstk[2],valstk[1])
end

procedure action_188()
#line 630 "unigram.y"
 yyval := node("Bsnd", &null,valstk[2],valstk[1])
end

procedure action_189()
#line 631 "unigram.y"
 yyval := node("Bsndbk", &null,valstk[2],valstk[1])
end

procedure action_190()
#line 632 "unigram.y"
 yyval := node("Brcv", &null,valstk[2],valstk[1])
end

procedure action_191()
#line 633 "unigram.y"
 yyval := node("Brcvbk", &null,valstk[2],valstk[1])
end

procedure action_192()
#line 634 "unigram.y"
 yyval := node("unot", valstk[2],valstk[1])
end

procedure action_193()
#line 635 "unigram.y"
 yyval := node("ubar", valstk[2],valstk[1])
end

procedure action_194()
#line 636 "unigram.y"
 yyval := node("uconcat", valstk[2],valstk[1])
end

procedure action_195()
#line 637 "unigram.y"
 yyval := node("ulconcat", valstk[2],valstk[1])
end

procedure action_196()
#line 638 "unigram.y"
 yyval := node("udot", valstk[2],valstk[1])
end

procedure action_197()
#line 639 "unigram.y"
 yyval := node("ubang", valstk[2],valstk[1])
end

procedure action_198()
#line 640 "unigram.y"
 yyval := node("udiff", valstk[2],valstk[1])
end

procedure action_199()
#line 641 "unigram.y"
 yyval := node("uplus", valstk[2],valstk[1])
end

procedure action_200()
#line 642 "unigram.y"
 yyval := node("ustar", valstk[2],valstk[1])
end

procedure action_201()
#line 643 "unigram.y"
 yyval := node("uslash", valstk[2],valstk[1])
end

procedure action_202()
#line 644 "unigram.y"
 yyval := node("ucaret", valstk[2],valstk[1])
end

procedure action_203()
#line 645 "unigram.y"
 yyval := node("uinter", valstk[2],valstk[1])
end

procedure action_204()
#line 646 "unigram.y"
 yyval := node("utilde", valstk[2],valstk[1])
end

procedure action_205()
#line 647 "unigram.y"
 yyval := node("uminus", valstk[2],valstk[1])
end

procedure action_206()
#line 648 "unigram.y"
 yyval := node("unumeq", valstk[2],valstk[1])
end

procedure action_207()
#line 649 "unigram.y"
 yyval := node("unumne", valstk[2],valstk[1])
end

procedure action_208()
#line 650 "unigram.y"
 yyval := node("ulexeq", valstk[2],valstk[1])
end

procedure action_209()
#line 651 "unigram.y"
 yyval := node("ulexne", valstk[2],valstk[1])
end

procedure action_210()
#line 652 "unigram.y"
 yyval := node("uequiv", valstk[2],valstk[1])
end

procedure action_211()
#line 653 "unigram.y"
 yyval := node("uunion", valstk[2],valstk[1])
end

procedure action_212()
#line 654 "unigram.y"
 yyval := node("uqmark", valstk[2],valstk[1])
end

procedure action_213()
#line 655 "unigram.y"
 yyval := node("unotequiv", valstk[2],valstk[1])
end

procedure action_214()
#line 656 "unigram.y"
 yyval := node("ubackslash", valstk[2],valstk[1])
end

procedure action_215()
#line 657 "unigram.y"
 yyval := node("upsetcur", valstk[2],valstk[1])
end

procedure action_217()
#line 660 "unigram.y"
 next_gt_is_ender := 1
end

procedure action_218()
#line 660 "unigram.y"
 yyval := node("regex", valstk[2])
end

procedure action_227()
#line 669 "unigram.y"
 yyval := node("Bsnd", &null,valstk[1],&null)
end

procedure action_228()
#line 670 "unigram.y"
 yyval := node("Bsndbk", &null,valstk[1],&null)
end

procedure action_229()
#line 671 "unigram.y"
 yyval := node("Brcv", &null,valstk[1],&null)
end

procedure action_230()
#line 672 "unigram.y"
 yyval := node("Brcvbk", &null,valstk[1],&null)
end

procedure action_231()
#line 673 "unigram.y"
 yyval := node("BPuneval", valstk[1])
end

procedure action_232()
#line 674 "unigram.y"
 yyval := node("create", valstk[2],valstk[1])
end

procedure action_233()
#line 675 "unigram.y"

              fakeThreadIdent := Clone1stToken(valstk[2])
              fakeThreadIdent.tok := IDENT
              fakeCreate := Clone1stToken(valstk[2])
              fakeCreate.tok := CREATE
              fakeCreate.s := "create"
              fakeThreadIdent.s := "spawn"
              fakeLParen := Clone1stToken(valstk[2])
              fakeLParen.tok := LPAREN
              fakeLParen.s := "("
              fakeRParen := Clone1stToken(valstk[2])
              fakeRParen.tok := RPAREN
              fakeRParen.s := ")"

              yyval := SimpleInvocation(fakeThreadIdent,fakeLParen,
                                     node("create", fakeCreate, valstk[1]),
                                     fakeRParen)

end

procedure action_234()
#line 693 "unigram.y"
 yyval := node("critical", valstk[4],valstk[3],valstk[2],valstk[1])
end

procedure action_236()
#line 695 "unigram.y"
 yyval := node("Next", valstk[1])
end

procedure action_237()
#line 696 "unigram.y"
 yyval := node("Break", valstk[2],valstk[1])
end

procedure action_238()
#line 697 "unigram.y"
 yyval := node("Paren", valstk[3],valstk[2],valstk[1])
end

procedure action_239()
#line 698 "unigram.y"
 yyval := node("Brace", valstk[3],valstk[2],valstk[1])
end

procedure action_240()
#line 699 "unigram.y"
 yyval := tablelit(valstk[3],valstk[2],valstk[1])
end

procedure action_241()
#line 700 "unigram.y"
 yyval := node("Brack", valstk[3],valstk[2],valstk[1])
end

procedure action_242()
#line 701 "unigram.y"
 yyval := ListComp(valstk[3])
end

procedure action_243()
#line 702 "unigram.y"
 yyval := node("Subscript", valstk[4],valstk[3],valstk[2],valstk[1])
end

procedure action_244()
#line 703 "unigram.y"
 yyval := node("Pdco0", valstk[3],valstk[2],valstk[1])
end

procedure action_245()
#line 704 "unigram.y"
 yyval := node("Pdco1", valstk[4],valstk[3],valstk[2],valstk[1])
end

procedure action_246()
#line 705 "unigram.y"

           yyval := SimpleInvocation(valstk[4],valstk[3],valstk[2],valstk[1])

end

procedure action_247()
#line 708 "unigram.y"

           yyval := InvocationNode(valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])

end

procedure action_248()
#line 711 "unigram.y"

           yyval := InvocationNode(valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])

end

procedure action_249()
#line 714 "unigram.y"

           yyval := InvocationNode(valstk[8],valstk[7],valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])

end

procedure action_250()
#line 717 "unigram.y"

           yyval := InvocationNode(valstk[8],valstk[7],valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])

end

procedure action_251()
#line 720 "unigram.y"

           yyval := FieldRef(valstk[3],valstk[2],valstk[1])

end

procedure action_253()
#line 724 "unigram.y"
 yyval := Field(valstk[3],valstk[2],valstk[1])
end

procedure action_254()
#line 725 "unigram.y"
 yyval := node("keyword",valstk[2],valstk[1])
end

procedure action_255()
#line 726 "unigram.y"
 yyval := Keyword(valstk[2],valstk[1])
end

procedure action_256()
#line 728 "unigram.y"

            yyval := node("While0", valstk[2],valstk[1])

end

procedure action_257()
#line 731 "unigram.y"

            # warn if a while loop should be an every.
            # should generalize; compute a semantic attribute and
            # warn if a while loop control expression is a generator.
            # but for now, only complain about the most obvious case
            if type(valstk[3]) == "treenode" & valstk[3].label === "assign" &
               *valstk[3].children = 3 & type(valstk[3].children[3]) == "treenode" &
               valstk[3].children[3].label == "to" & *(valstk[3].children[3].children)=3 &
                     (type(valstk[3].children[3].children[1]) ===
                      type(valstk[3].children[3].children[3]) === "token") &
                     (valstk[3].children[3].children[1].tok =
                      valstk[3].children[3].children[3].tok = INTLIT) &
                     valstk[3].children[3].children[1].s<=valstk[3].children[3].children[3].s
            then {
                warning("infinite loop; use \"every\" to loop on generator results",
                        valstk[4].line, valstk[4].filename, valstk[4].s
                        )
               }
            yyval := node("While1", valstk[4],valstk[3],valstk[2],valstk[1])

end

procedure action_258()
#line 752 "unigram.y"
 yyval := node("until", valstk[2],valstk[1])
end

procedure action_259()
#line 753 "unigram.y"
 yyval := node("until1", valstk[4],valstk[3],valstk[2],valstk[1])
end

procedure action_260()
#line 755 "unigram.y"
 yyval := node("every", valstk[2],valstk[1])
end

procedure action_261()
#line 756 "unigram.y"
 yyval := node("every1", valstk[4],valstk[3],valstk[2],valstk[1])
end

procedure action_262()
#line 758 "unigram.y"
 yyval := node("repeat", valstk[2],valstk[1])
end

procedure action_264()
#line 761 "unigram.y"
 yyval := node("return", valstk[2], valstk[1])
end

procedure action_265()
#line 762 "unigram.y"
 yyval := node("Suspend0", valstk[2],valstk[1])
end

procedure action_266()
#line 763 "unigram.y"
 yyval := node("Suspend1", valstk[4],valstk[3],valstk[2],valstk[1])
end

procedure action_267()
#line 765 "unigram.y"
 yyval := node("If0", valstk[4],valstk[3],valstk[2],valstk[1])
end

procedure action_268()
#line 766 "unigram.y"
 yyval := node("If1", valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
end

procedure action_269()
#line 768 "unigram.y"
 yyval := node("Case", valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
end

procedure action_271()
#line 771 "unigram.y"
 yyval := node("Caselist", valstk[3],";",valstk[1])
end

procedure action_272()
#line 773 "unigram.y"
 yyval := node("cclause0", valstk[3],valstk[2],valstk[1])
end

procedure action_273()
#line 774 "unigram.y"
 yyval := node("cclause1", valstk[3],valstk[2],valstk[1])
end

procedure action_275()
#line 777 "unigram.y"

           if type(valstk[3])=="treenode" & (valstk[3].label=="elst1") then {
              yyval := valstk[3]; put(yyval.children, valstk[2], valstk[1])
              }
           else
              yyval := node("elst1", valstk[3],valstk[2],valstk[1])

end

procedure action_276()
#line 785 "unigram.y"
 yyval := node("pdcolist0", valstk[1])
end

procedure action_277()
#line 786 "unigram.y"
 yyval := node("pdcolist1", valstk[3],valstk[2],valstk[1])
end

procedure action_282()
#line 793 "unigram.y"
 yyval := regexp(valstk[1])
end

procedure action_283()
#line 794 "unigram.y"
 yyval := "emptyregex"
end

procedure action_285()
#line 799 "unigram.y"
 yyval := node("regexbar", valstk[3], valstk[2], valstk[1])
end

procedure action_287()
#line 803 "unigram.y"
 yyval := node("regexconcat", valstk[2], valstk[1])
end

procedure action_289()
#line 807 "unigram.y"
 yyval := node("kleene", valstk[2], valstk[1])
end

procedure action_290()
#line 808 "unigram.y"
 yyval := node("oneormore", valstk[2], valstk[1])
end

procedure action_291()
#line 809 "unigram.y"
 yyval := node("optional", valstk[2], valstk[1])
end

procedure action_292()
#line 810 "unigram.y"

           if valstk[2].s < 0 then {
              yyerror("regex occurrences may not be negative")
              yyval := node("error")
              }
           else if valstk[2].s = 0 then {
              yyerror("regex occurrences may not be zero yet")
              yyval := node("error")
              }
           else if valstk[2].s = 1 then yyval := valstk[4]
           else { # normal case, positive number of repeats of valstk[4]
              yyval := valstk[4]
              every i := 2 to valstk[2].s do {
                 yyval := node("regexconcat", yyval, valstk[4])
                 }
              }

end

procedure action_294()
#line 830 "unigram.y"
 yyval := valstk[1]; yyval.tok := IDENT
end

procedure action_295()
#line 831 "unigram.y"
 yyval := valstk[1]; yyval.tok := IDENT
end

procedure action_296()
#line 832 "unigram.y"
 yyval := valstk[1]; yyval.tok := IDENT
end

procedure action_302()
#line 838 "unigram.y"
 yyval := node("Paren",valstk[3],valstk[2],valstk[1])
end

procedure action_303()
#line 839 "unigram.y"

              yyval := node("acset", valstk[3], valstk[2], valstk[1])
              if type(valstk[2]) == "token" then {
                 if not ((valstk[3].line == valstk[2].line) &
                         (valstk[3].column + 1 == valstk[2].column)) then {
                    # [ is nonadjacent, add space
                    valstk[2].s := " " || valstk[2].s
                    }
                 }
                 else write("[ followed by ", type(valstk[2]), " so not checking for space")

end

procedure action_304()
#line 850 "unigram.y"
 yyval := node("notany", valstk[4], valstk[3], valstk[2], valstk[1])
end

procedure action_305()
#line 851 "unigram.y"
 yyval := node("escape", valstk[2], valstk[1])
end

procedure action_307()
#line 855 "unigram.y"
 yyval := node("brackchars", valstk[3], valstk[2], valstk[1])
end

procedure action_308()
#line 856 "unigram.y"

           if type(valstk[2]) == "treenode" then {
             c1 := csetify(valstk[2])
             }
           if type(valstk[1]) == "treenode" then c2 := csetify(valstk[1])

           yyval := copy(valstk[2])
           while type(yyval) == "treenode" do {
              yyval := copy(yyval.children[1])
              yyval.s := c1
              }
           if type(yyval) ~== "token" then stop("regex type ", image(yyval))

           if type(valstk[1]) == "treenode" then yyval.s ||:= c2
           else yyval.s ||:= valstk[1].s

end

procedure action_313()
#line 875 "unigram.y"
 # ordinary escape char
           yyval := valstk[1]
           yyval.column := valstk[2].column
           case yyval.s[1] of {
              "b"|"d"|"e"|"f"|"l"|"n"|"r"|"t"|"v": yyval.s[1] := "\\" || yyval.s[1]
              default: stop("unrecognized escape char \\", yyval.s[1])
              }

end

procedure action_314()
#line 883 "unigram.y"
 #escaped octal?
           yyval := valstk[1]
           yyval.column := valstk[2].column
           case yyval.s[1] of {
              "0"|"1"|"2"|"3"|"4"|"5"|"6"|"7": yyval.s[1] := "\\" || yyval.s[1]
              default: stop("non-octal numeric escape char \\", yyval.s[1])
              }

end

procedure action_315()
#line 893 "unigram.y"
 yyval := node("section", valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
end

procedure action_320()
#line 900 "unigram.y"
 yyval := node("compound", valstk[3],";",valstk[1])
end

procedure action_322()
#line 903 "unigram.y"
 yyval := node("error", valstk[4],valstk[2],valstk[1])
end

procedure action_323()
#line 904 "unigram.y"
 yyval := node("error")
end

#line 4476 "unigram.icn"
