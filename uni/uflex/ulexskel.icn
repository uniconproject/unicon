procedure ulexskel(f)

fprintf(f, "%s",
  "#\n_
   # ulex skeleton by Katrina Ray. hacked by jeffery.\n_
   # do not edit by hand, this file is machine-generated\n_
   #\n_
    \n_
   record edge(symbol, destinations)\n_
   record anode(label, rulenum, edges, epsilon, dot)\n_
   record automata(start, states, accepting)\n_
   \n_
   global yychar, yytext, yyin, yyleng\n_
   \n_
   #\n_
   # matchstrings reads from a specified input file and calls the simulate\n_
   # function repeatedly on smaller and smaller pieces of the input until\n_
   # it finds a match. It reports what parts of the input\n_
   # it could parse and what rule accepted the string.\n_
   #\n_
   \n_
   global stringseq\n\n")

fprintf(f, "%s",
  "procedure yyulex(aut)\n_
   local rulenum, readfrom, position, less, currstring, getln\n_
   \n_
   initial {\n_
      \ \ \ if /yyin then yyin := &input\n_
      \ \ \ readfrom := yyin\n_
   \n_
      \ \ \ stringseq := read(readfrom) || \"\\n\"\n_
   \n_
      \ \ \ while getln := read(readfrom) do\n_
         \ \ \ \ \ \ stringseq ||:= getln || \"\\n\"\n_
   \n_
      \ \ \ close(readfrom)\n_
      \ \ \ }\n_
   \n_
      \ \ \ if stringseq == \"\" then {\n_
         \ \ \ \ \ \ return yychar := -1\n_
         \ \ \ \ \ \ }\n_
   \n_
      \ \ \ less := 0\n_
      \ \ \ position := *stringseq + 1\n_
   \n_
      \ \ \ foo := 1\n_
      \ \ \ until (foo = *stringseq+1) | (simulate(aut, stringseq[1:foo])===0) do\n_
         \ \ \ \ \ \ foo +:= 1\n_
      \ \ \ less := position - foo - 1\n_
      \ \ \ if less < 0 then less := 0\n_
   \n_
      \ \ \ while *stringseq > 0 do {\n_
         \ \ \ \ \ \ currstring := stringseq[1:position-less]\n_
         \ \ \ \ \ \ rulenum := simulate(aut, currstring)\n_
         \ \ \ \ \ \ if rulenum > 0 then {\n_
            \         yytext := currstring\n_
            \         yyleng := *yytext\n_
            \         stringseq := stringseq[position-less:position]\n_
            \         position := less + 1\n_
            \         foo := 1\n_
            \         until (foo = *stringseq+1) | (simulate(aut, stringseq[1:foo])=== 0) do\n_
            \            foo +:= 1\n_
            \         less := position-foo-1\n_
            \         if less < 0 then less := 0\n_
   \n_
            \         if yychar := (\\semantic_action)[rulenum] () then\n_
            \            return yychar\n_
            \         }\n_
         \      else {\n_
            \         less +:= 1\n_
            \         if less >= position then {\n_
            \            writes(stringseq[1]) # didn't match nothin', copy to stdout\n_
            \            stringseq := stringseq[2:0]\n_
            \            }\n_
            \         }\n_
       \      }\n_
   end\n\n")

fprintf(f, "%s",
   "#\n_
   # simulate(automata, word) determines whether or not the word\n_
   # would be accepted by the given automata. It gets the possible\n_
   # destinations at each symbol of the string and then adds on wherever it\n_
   # could also get if we use any epsilon transitions out of those states.\n_
   # Then the list of accepting states is compared to the reachable set\n_
   # of states to determine if the word was accepted and by which rule.\n_
   #\n_
   procedure simulate(myaut, word)\n_
   local first, currstates, acceptcheck, currsymbol, build, rv\n_
   \   currstates := list(0) # should be set()\n_
   \   put(currstates, myaut.start) # insert(currstates, myaut.start)\n_
   \   acceptcheck := copy(myaut.accepting)\n_
   \   currsymbol := word\n_
   \   while *currsymbol > 0 do {\n_
   \      currstates := getdestinations(currstates, currsymbol)\n_
   \      if *currstates = 0 then\n_
   \         return 0\n_
   \      currsymbol := currsymbol[2:0]\n_
   \      # add states reachable through epsilon transitions\n_
   \      build := copy(currstates)\n_
   \      while *build > 0 do {\n_
   \         current := pop(build)\n_
   \         currstates |||:= copy(current.epsilon)\n_
   \         build |||:= copy(current.epsilon)\n_
   \         }\n_
   \      }\n_
   \n_
   \   while *acceptcheck > 0 do {\n_
   \      value1 := pop(acceptcheck)\n_
   \      check2 := copy(currstates)\n_
   \      while *check2 > 0 do {\n_
   \         value2 := pop(check2)\n_
   \         if value1.label = value2.label then {\n_
   \            if /rv | rv > value1.rulenum then\n_
   \               rv := value1.rulenum\n_
   \            }\n_
   \         }\n_
   \      }\n_
   \   if \\yydebug>0 then write(\"simulate() returns \", image(\\rv)|0)\n_
   \   return \\rv | 0\n_
   end\n\n")

fprintf(f, "%s",
  "#\n_
   # getdestinations uses the current set of states and\n_
   # simulates one step of automata computation on the given\n_
   # string and returns the resulting set of destinations\n_
   #\n_
   procedure getdestinations(currstates, currsymbol)\n_
   local result, current, buildresult\n_
   \n_
   \   result := list(0)\n_
   \   if *currstates ~= 0 then {\n_
   \n_
   \      # add states reachable through epsilon transitions\n_
   \      buildresult := copy(currstates)\n_
   \      while *buildresult > 0 do {\n_
   \         current := pop(buildresult)\n_
   \         currstates |||:= copy(current.epsilon)\n_
   \         buildresult |||:= copy(current.epsilon)\n_
   \         }\n_
   \n_
   \      buildresult := copy(currstates)\n_
   \      while *buildresult > 0 do\n_
   \          result |||:= reach(pop(buildresult), currsymbol)\n_
   \      buildresult := copy(result)\n_
   \      while *buildresult > 0 do {\n_
   \         current := pop(buildresult)\n_
   \         result |||:= copy(current.epsilon)\n_
   \         buildresult |||:= copy(current.epsilon)\n_
   \         }\n_
   \    }\n_
   \    return result\n_
   end\n\n")

fprintf(f, "%s",
  "#\n_
   # reach returns the list of states that can be reached\n_
   # on character symbol from the state state.\n_
   #\n_
   procedure reach(state, symbol)\n_
   local edgeset, answer, edgesymbol, bound1, bound2, curredge\n_
   \n_
   \   edgeset := copy(state.edges)\n_
   \   answer := list(0)\n_
   \n_
   \   while *edgeset > 0 do {\n_
   \      curredge := pop(edgeset)\n_
   \      edgesymbol := copy(curredge.symbol)\n_
   \      if (edgesymbol[1] == symbol[1] ~== \"[\") |\n_
   \         (edgesymbol == symbol == \"[\") then # sometimes a [ is just a [\n_
   \            answer |||:= curredge.destinations\n_
   \      else if edgesymbol[1] == \"[\" then {\n_
   \n_
   \t if edgesymbol[2]==\"^\" then {\n_
   \t    cs := edgesymbol[3:find(\"]\", edgesymbol)]\n_
   \t    if not find(symbol[1], cs) then\n_
   \t       answer |||:= curredge.destinations\n_
   \t    }\n_
   \t else {\n_
   \t    while edgesymbol[1] ~== \"]\" do {\n_
   \t       edgesymbol := edgesymbol[2:0]\n_
   \n_
   \t       if edgesymbol[1] == \"\\\\\" then {\n_
   \t          edgesymbol := edgesymbol[2:0]\n_
   \t          if (edgesymbol[1] == \"n\") & (symbol[1] == \"\\n\") then\n_
   \t             answer |||:= curredge.destinations\n_
   \t          else if (edgesymbol[1] == \"t\") & (symbol[1] == \"\\t\") then\n_
   \t             answer |||:= curredge.destinations\n_
   \t          else if edgesymbol[1] == symbol[1] then\n_
   \t             answer |||:= curredge.destinations\n_
   \t          }\n_
   \n_
   \t       else if edgesymbol[2] == \"-\" then {\n_
   \t          bound1 := edgesymbol[1]\n_
   \t          edgesymbol := edgesymbol[3:0]\n_
   \t          bound2 := edgesymbol[1]\n_
   \t          if ord(bound1) <= ord(symbol[1]) <= ord(bound2) then\n_
   \t             answer |||:= curredge.destinations\n_
   \t          }\n_
   \t       else if edgesymbol[1] == symbol[1] then\n_
   \t          answer |||:= curredge.destinations\n_
   \t       }\n_
   \t    }\n_
   \t }\n_
   \n_
   \t else if edgesymbol[1] == \"\\\\\" then {\n_
   \t    if (edgesymbol[2] == \"n\") & (symbol[1] == \"\\n\") then\n_
   \t       answer |||:= curredge.destinations\n_
   \t    else if (edgesymbol[2] == \"t\") & (symbol[1] == \"\\t\") then\n_
   \t       answer |||:= curredge.destinations\n_
   \t    else if edgesymbol[2] == symbol[1] then\n_
   \t       answer |||:= curredge.destinations\n_
   \t    }\n_
   \t }\n_
   \n_
   \   answer |||:= state.dot\n_
   \   return answer\n_
   end\n\n");

fprintf(f, "%s",
   "procedure printautomaton(a)\n_
   \   write(\"Automaton:\")\n_
   \   write(\"start: \", image(a.start.label),\n_
   \         \" for rulenum \", image(a.start.rulenum))\n_
   \   write(\"states:\")\n_
   \   every printstate(!a.states)\n_
   \   writes(\"accepting: \")\n_
   \   every writes((!a.accepting).label, \" \")\n_
   \   write()\n_
   end\n\n");

fprintf(f, "%s",
   "procedure printstate(state)\n_
   \   write(\"state \", state.label, \" is for rule #\", state.rulenum)\n_
   \   if (*state.edges)>0 then {\n_
   \      writes(\"\\tedges: \"); every printedge(!state.edges); write()\n_
   \      }\n_
   \   if *state.epsilon>0 then {\n_
   \      writes(\"\\tepsilon: \")\n_
   \      every writes((!state.epsilon).label, \" \"); write()\n_
   \      }\n_
   \   if (*state.dot)>0 then {\n_
   \      writes(\"\\tdot: \")\n_
   \      every writes((!state.dot).label, \" \"); write()\n_
   \      }\n_
   end\n\n");

fprintf(f, "%s",
   "procedure printedge(edge)\n_
   \   writes(image(edge.symbol), \" -> \")\n_
   \   every writes((!edge.destinations).label)\n_
   \   writes(\"; \")\n_
   end\n\n");

fprintf(f, "%s",
   "procedure printstates(states)\n_
   local statecopy, current\n_
   \n_
   \   write(\"printstates size \", *states, \" in entity \", image(states))\n_
   \   statecopy := copy(states)\n_
   \n_
   \   while *statecopy > 1 do {\n_
   \      current := pop(statecopy)\n_
   \      write(current.label, \", \")\n_
   \      }\n_
   \n_
   \   if *statecopy > 0 then {\n_
   \      current := pop(statecopy)\n_
   \      write(current.label)\n_
   \      }\n_
   \    else write(\"state list is empty\")\n_
   end\n")
end


