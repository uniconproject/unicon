#
# A test for unicon image file formats, Textures, and Dynamic Textures
# Jafar Al-Gharaibeh
# Feb 28, 2016
#

record renderObj(format, imgFile, shape, rot, tex)
record windowObj(w, format)

#
# Return the current time of day from the system clock, in milliseconds.
#
procedure milliseconds()
   local t := gettimeofday()
   return t.sec*1000 + t.usec/1000
end

procedure microseconds()
   local t := gettimeofday()
   return t.sec*1000000 + t.usec
end

procedure readimg(w, imgFile, bkresult)
    writes("\tReadimage " , format, ": ")
    if ReadImage(w, imgFile) then {
	write(w, "background: ", imgFile, bkgresult)
	write(w, "ReadImage(", imgFile,") OK" )
	write("OK")
    }
    else{
	write(w, "ReadImage(", imgFile,") Failed" )
	write("Failed")
    }
end

procedure win(title, imgFile)
   if \imgFile then {  
       if w := open(title, "g", "image="|| imgFile, "inputmask=c") then {
	   write("OK")
	   write(w, "background: ", imgFile, " OK")
	   readimg(w, imgFile, " OK")
	   return w
       }
   }
   else  if w := open(title, "g", "inputmask=c") then {
       write("Failed")
       write(w, "background: ", imgFile, " Failed")
       readimg(w, imgFile, " Failed")
       return w
   }
end

procedure main(argv)
    local windows, imgFormats, renderList
    
    write("\nUnicon Image and Texture Test")

    if not (&features == "graphics") then
	stop("This test requires 2D graphics which is not available in this build, aborting...")
    
    write("Beside succeeding or failing a test, look for visual artifacts")
    write("possiable issues to look for:")
    
    windows:=[]
    renderList := []
    imgFormats := ["gif", "bmp", "jpg", "png"]
    x := 1
    y := 1
    every format := !imgFormats do {
       write("\nTesting ", format, "...")
       if (format == "jpg" & not (&features == "JPEG images")) |
          (format == "png" & not (&features == "PNG images")) then
          write ("\t",format, " support is not enabled in this build") & next
          
       fname := "unicon." || format
       writes("\tOpen window with " , format, " background: ")
       if w := win(format || " 2D Window", fname) then {
          put(windows, w)
          WAttrib(w, "pos=" || x ||"," || y )
      }
           
   	x+:=256
    }

    if not (&features == "3D graphics") then {
       write ("3D graphics support is not enabled in this build")
       write ("Image textures and dynamic texxtures cannot be tested\n")
       write ("Close any of the opened windows or press q/ESC in any window to exit...")
       repeat
          case Event(Active()) of {
             "q" | "Q" | "\e" | -11: {
                write("Exiting...")
                every close(!windows)
                exit(0)
                }
             }
       }
    write("\nContinuing to texture test...\n")

    title1 := "3D Win 1: Image Textures, src:   [gif]   [bmp]   [jpg]   [png]"
    # Open a 3D window to test textures created from the different image formats
    (w3d:= open(title1, "gl", "size=1024,256", "bg=blue", "buffer=on")) |
       stop("Can't Open 3D window, textures can't be tested\n")
  
    WAttrib(w3d, "pos=" || 1 ||"," || 290 )

    title2 := "3D Win 2: Dynamic Textures, src window: [*gif 2D] --  [*3D Win 1]" ||
	"  --  [*All 2D-win drawable canvases] --  [*current focus]"
    # Open a 3D window to test dynamic textures
    (wtex := open(title2, "gl", "size=1024,256", "bg=very dark gray",
                  "pos=1,258", "buffer=on")) |
       stop("Can't Open 3D window, textures can't be tested\n")
    
    WAttrib(wtex, "pos=" || 1 ||"," || 580 )

    t:=&time
    x:=-3

    every format := !imgFormats do {
        writes("\nTesting texture ", format, "...")	
	put(renderList, rObj:= renderObj(format,"unicon." || format))
	renderBox(w3d, x, 0,0, 1, rObj)
	x+:=2
    }

    Eye(w3d, 0,0,8, 0,0,0, 0,1,0)
    Eye(wtex, 0,0,8, 0,0,0, 0,1,0)
    Refresh(w3d)
    
    x:=-3

    write("\nDynamic textures test...")
    write()
    
    # if some of the 2D windows failed to open, replicate
    # windows[1] to fill in the missing slots
    while *windows < 4 do
	put(windows, windows[1])

    writes("Testing source - 2D window...")
    put(renderList, rObj:= renderObj("win",windows[1]))
    renderBox(wtex,x, 0,0, 1, rObj)
    x+:=2

    writes("\nTesting source - 3D window...")
    put(renderList, rObj:= renderObj("win",w3d))
    renderBox(wtex,x, 0,0, 1, rObj)
    x+:=2

    writes("\nTesting source - Drawable 2D window (shared canvas with all 2D windows)...")
    put(renderList, texObj:= renderObj("win",windows[3]))
    renderBox(wtex,x, 0,0, 1, texObj)
    x+:=2

    writes("\nTesting source - Pick any window...")
    put(renderList, texObj2:= renderObj("win",windows[4]))
    renderBox(wtex,x, 0,0, 1, texObj2)
    x+:=2
      
    Eye(w3d, 0,0,8, 0,0,0, 0,1,0)

    put(windows, \w3d)
    put(windows, \wtex)

    wid:=4
    ht:=4
    every Fg(!windows ,"red")
    j:=0
    rf:=50
    repeat{
	i:=0
	j+:=1
	update(renderList)
	Refresh(w3d)
	Refresh(wtex)
	WAttrib(w3d, "windowlabel= " || title1 || "  " || (rf:=FPS()) ||"fps" )
	every w := !windows  do{
	    i+:=1
	    if *Pending(w)>0 then { 
		case Event(w) of{
		    "q" | "Q" | "\e" : {
			shutdown := 1
			break break
		    }
		    &lpress | &rpress  :{
			flag := 1
			the_win := i
		    }
		    &ldrag :{
			FillRectangle(texObj.tex, x:=&x,y:=&y, wid:=4,ht:=4)
			FillRectangle(w, x,y, wid,ht)
		    }		    
		}
	    }
	}

	if j>rf then{
	    CopyArea(windows[\the_win], texObj2.tex, 0,0, 256, 256, 0,0)
	    the_win := &null
	    j:=0
	}
    }

end

procedure copytex()
   local i:=1
    CopyArea(w2, tex, 40, 20, 432,216, 40, 20)
end


procedure update(renderList)
    every rObj := !renderList do
	rObj.rot.angle +:= 0.05;
end


procedure FPS()
    local len:=5000
   static t, fps
   initial{ 
      t:=milliseconds()
      fps:=0
      }
   fps+:=1
   if (d:=milliseconds()-t) > len then{
       fpsTmp := fps*1000/d
       fps:=0
       t:=milliseconds()
       return fpsTmp
      }
   
end

procedure renderBox(w, x,y,z, r, rObj)
    Fg(w,"red")
    PushTranslate(w, x,y,z)
    rObj.rot := Rotate(w, 0, 0, 1, 0)
    WAttrib(w,"texmode=on")
    if rObj.tex := Texture(w, rObj.imgFile) then
	write("OK")
    else
	write("Failed")
    rObj.shape := DrawCube(w, 0,0,0, r)
    WAttrib(w,"texmode=off")
    PopMatrix(w)
    return \(rObj.tex)
end
  
