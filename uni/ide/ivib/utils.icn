#
# $Id: utils.icn,v 1.5 2010-07-13 23:12:43 ghollingshead Exp $
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import gui

link gpxop, imscolor

#
# Read a flag (&null or 1) value
#
procedure flag_read(f)
   s := read(f) | fail
   return if *s = 0 then &null else 1
end

#
# Read a value which may be &null or have a value
#
procedure opt_read(f)
   (t := read(f) &
   s := read(f)) | fail
   return if t == "1" then s else &null
end

#
# Write a value which may be &null or have a value
#
procedure opt_write(f, s)
   write(f, if \s then 1 else "&null")
   write(f, s)
end

#
# Generate the elements of l in reverse
#
procedure rev(l)
   suspend l[*l to 1 by -1]
end

#
# Minimum of x, y
#
procedure min(x, y)
   return (x > y) | x
end

#
# Maximum of x, y
#
procedure max(x, y)
   return (x < y) | x
end

#
# Convert a list l to a string representation.
#
procedure list2string(l)
   local s, x
   s := ""
   every x := image(!l) do
      s ||:= ", " || x

   return s[3:0] | ""
end

#
# Read icon from file s.  dialog is an instance of CommonDialog
#
procedure util_read_icon(dialog, s)
   if map(s)[-4:0] == ".xpm" then
      return read_xpm_icon(dialog, s)
   else if stat(s) then
      return read_imagefile_icon(dialog, s)
   else
      return read_string_icon(dialog, s)
end

#
# Read a standard gif icon.
#
procedure read_gif_icon(dialog, s)
   return read_imagefile_icon(dialog, s)
end

procedure read_imagefile_icon(dialog, s)
   local w, raw, len

   w := WOpen("canvas=hidden", "image=" || s) | return dialog.alert_error("Couldn't open file " || s)
   raw := Capture(w, "c6")
   WClose(w)

   return raw
end

#
# Read an xpm icon.
#
procedure read_xpm_icon(dialog, s)
   local f, raw

   f := open(s) | return dialog.alert_error("Couldn't open file " || s)
   raw := XPMImage(f, "c6")
   close(f)

   return raw
end

#
# Read a standard Icon string formatted icon.
#
procedure read_string_icon(dialog, s)
   local res, x, f

   f := open(s) | return dialog.alert_error("Couldn't open file " || s)

   res := ""
   while x := read(f) do {
      x ? {
         if ="#" then
            next

         ="\""
         res ||:= tab(0)
      }

      if res[-1] == "_" then
         res[-1] := ""
      else
         break
   }

   close(f)

   #
   # Check for reasonably valid image 
   #
   if img_height(res) then
      return res
   else   
      return dialog.alert_error("Not a valid image")
end

#
# Check that the window attributes in list l are valid.
#
procedure util_check_attribs(dialog, l)
   local s
   static test_win, attrib_table
   initial {
      test_win := WOpen("canvas=hidden") | stop("couldn't open window")
      attrib_table := table()
      every attrib_table["label" | "posx" | "pos" | "posy" | "resize" | "size" | "height" | 
                         "width" | "lines" | "columns" | "image" | "canvas" | "iconpos" | "iconlabel" | 
                         "iconimage" | "echo" | "cursor" | "x" | "y" | "row" | "col" | "pointer" | 
                         "pointerx" | "pointery" | "pointerrow" | "pointercol" | "display" | "depth" | 
                         "displayheight" | "displaywidth" | "fg" | "bg" | "reverse" | "drawop" | "gamma" | 
                         "font" | "fheight" | "fwidth" | "ascent" | "descent" | "leading" | "linewidth" | 
                         "linestyle" | "fillstyle" | "pattern" | "clipx" | "clipy" | "clipw" | "cliph" | 
                         "dx" | "dy"] := 1
   }

   every s := !l do {
      if /attrib_table[s[1]] then
         return dialog.alert_error("Invalid attribute " || s[1])
      if not(WAttrib(test_win, s[1] || "=" || s[2])) then
         return dialog.alert_error("Invalid value " || s[2] || " for attrib " || s[1])
   }
   return
end

