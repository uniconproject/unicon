/*
 * rwin3d.ri - platform-independent 3D facilities code
 *
 * The analogy in 2D is the rwindow.r file.  As much of ropengl.ri as possible
 * should be moved here and used in all 3D implementations.
 */
#ifdef Graphics3D

/*
 * clang complains that "implicit declaration of function 'lookup_texture_byname' is invalid in C99",
 * so throw it a bone.
 */
int lookup_texture_byname(wbp w, char *name, int len, int type, int curtex); /* defined in rd3d.ri and ropengl.ri */

/*
 * For each 3D graphics operation, there is a descriptor that
 * holds the record constructor for that type of primitive.
 * The first field is named "name"; for > 1 field, their names are in
 * an array. If fields > 2, then fields 2-4 are named "x", "y", "z".
 */
struct descrip gl_torus = {D_Null};
struct descrip gl_cube = {D_Null};
struct descrip gl_sphere = {D_Null};
struct descrip gl_cylinder = {D_Null};
struct descrip gl_disk = {D_Null};
struct descrip gl_rotate = {D_Null};
struct descrip gl_translate = {D_Null};
struct descrip gl_scale = {D_Null};
struct descrip gl_popmatrix = {D_Null};
struct descrip gl_pushmatrix = {D_Null};
struct descrip gl_identity = {D_Null};
struct descrip gl_matrixmode = {D_Null};
struct descrip gl_meshmode = {D_Null};
struct descrip gl_texture = {D_Null};
struct descrip gl_font3d = {D_Null};
struct descrip gl_drawstring3d = {D_Null};
struct descrip gl_mark = {D_Null};
struct descrip gl_endmark = {D_Null};

char * gl_torus_fields[] = {"radius1","radius2"};
char * gl_cube_fields[] = {"length"};
char * gl_sphere_fields[] = {"radius"};
char * gl_cylinder_fields[] ={"height","radius1","radius2"};
char * gl_disk_fields[] = {"radius1","radius2", "angle1","angle2"};
char * gl_rotate_fields[] = {"angle"};
char * gl_matrixmode_fields[] = {"mode"};
char * gl_meshmode_fields[] = {"mode"};
char * gl_texture_fields[] = {"texture_handle", "window_binding"};
char * gl_font_fields[] = {"font_ptr"};
char * gl_drawstring3d_fields[] = {"str"};
char * gl_mark_fields[] = {"section_name","skip","count","int_code", "depth"};
char * gl_endmark_fields[] = {"depth"};


/*
 * Map 3D redrawing names to which switch case to use, and how many
 * real number arguments to convert.
 */
stringint redraw3Dnames[] = {
   { 0,			34 },		/* number of entries */
   { "DrawCube",	REDRAW_CUBE | 4 },
   { "DrawCylinder",	REDRAW_CYLINDER | 6},
   { "DrawDisk",	REDRAW_DISK | 7 },
   { "DrawLine",	REDRAW_LINE },
   { "DrawPoint",	REDRAW_POINT },
   { "DrawPolygon",	REDRAW_POLYGON },
   { "DrawSegment",	REDRAW_SEGMENT },
   { "DrawSphere",	REDRAW_SPHERE | 4 },
   { "DrawString3d",    REDRAW_DRAWSTRING3D | 3},
   { "DrawTorus",	REDRAW_TORUS | 5},
   { "EndMark",         REDRAW_ENDMARK},
   { "Fg",		REDRAW_FG},
   { "FillPolygon",	REDRAW_FILLPOLYGON },
   { "Font3d",          REDRAW_FONT3D },
   { "Identity",	REDRAW_IDENTITY },
   { "Mark",            REDRAW_MARK},
   { "MatrixMode",	REDRAW_MATRIXMODE },
   { "MeshMode",        REDRAW_MESHMODE },
   { "MultMatrix",	REDRAW_MULTMATRIX },
   { "Normals",		REDRAW_NORMALS },
   { "Pick"	,	REDRAW_PICK},
   { "PopMatrix",	REDRAW_POPMATRIX },
   { "PushMatrix",	REDRAW_PUSHMATRIX },
   { "Rotate",		REDRAW_ROTATE | 4 },
   { "Scale",		REDRAW_SCALE | 3 },
   { "Texcoord",	REDRAW_TEXCOORD },
   { "Texture",		REDRAW_TEXTURE },
   { "Translate",	REDRAW_TRANSLATE | 3 },
   { "dim",		REDRAW_DIM },
   { "linewidth",	REDRAW_LINEWIDTH },
   { "normode",		REDRAW_NORMODE },
   { "rings",		REDRAW_RINGS },
   { "slices",		REDRAW_SLICES },
   { "texmode",		REDRAW_TEXMODE },
   };

/*
 *
 */
dptr rec_structinate(dptr dp, char *name, int nfields, char *a[])
{
   int i;
   struct descrip s;
   struct descrip fields[16];
   if (is:null(*dp)) {
      AsgnCStr(s, name);
      AsgnCStr(fields[0], "name");
      AsgnCStr(fields[1], "code");
      if (nfields > 3) {
         if (!strcmp(name,"gl_mark") || !strcmp(name, "gl_texture")) {
           for(i=2; i < nfields; i++)
              AsgnCStr(fields[i], a[i-2]);
           }
         else {
           AsgnCStr(fields[2], "x");
           AsgnCStr(fields[3], "y");
           AsgnCStr(fields[4], "z");
           for(i=5; i < nfields; i++)
              AsgnCStr(fields[i], a[i-5]);
           }
         }
      else if (nfields == 3)
         AsgnCStr(fields[2], a[0]);
      dp->dword = D_Proc;
      dp->vword.bptr = (union block *)dynrecord(&s, fields, nfields);
      }
   return dp;
}


dptr rec_structor3d(char *name)
{
#ifdef Graphics3D
   if (!strcmp(name, "gl_torus"))
      return rec_structinate(&gl_torus, "gl_torus", 7, gl_torus_fields);
   else if (!strcmp(name, "gl_cube"))
      return rec_structinate(&gl_cube, "gl_cube", 6, gl_cube_fields);
   else if (!strcmp(name, "gl_sphere"))
      return rec_structinate(&gl_sphere, "gl_sphere", 6, gl_sphere_fields);
   else if (!strcmp(name, "gl_cylinder"))
      return rec_structinate(&gl_cylinder, "gl_cylinder", 8, gl_cylinder_fields);
   else if (!strcmp(name, "gl_disk"))
      return rec_structinate(&gl_disk, "gl_disk", 9, gl_disk_fields);
   else if (!strcmp(name, "gl_rotate"))
      return rec_structinate(&gl_rotate, "gl_rotate", 6, gl_rotate_fields);
   else if (!strcmp(name, "gl_translate"))
      return rec_structinate(&gl_translate, "gl_translate", 5, NULL);
   else if (!strcmp(name, "gl_scale"))
      return rec_structinate(&gl_scale, "gl_scale", 5, NULL);
   else if (!strcmp(name, "gl_popmatrix"))
      return rec_structinate(&gl_popmatrix, "gl_popmatrix", 2, NULL);
   else if (!strcmp(name, "gl_pushmatrix"))
      return rec_structinate(&gl_pushmatrix, "gl_pushmatrix", 2, NULL);
   else if (!strcmp(name, "gl_identity"))
      return rec_structinate(&gl_identity, "gl_identity", 2, NULL);
   else if (!strcmp(name, "gl_matrixmode"))
      return rec_structinate(&gl_matrixmode, "gl_matrixmode",
				3, gl_matrixmode_fields);
   else if (!strcmp(name, "gl_meshmode"))
      return rec_structinate(&gl_meshmode, "gl_meshmode",
				3, gl_meshmode_fields);
   else if (!strcmp(name, "gl_texture"))
      return rec_structinate(&gl_texture, "gl_texture", 4, gl_texture_fields);
   else if (!strcmp(name, "gl_font3d"))
      return rec_structinate(&gl_font3d, "gl_font3d", 3, gl_font_fields);
   else if (!strcmp(name, "gl_drawstring3d"))
	return rec_structinate(&gl_drawstring3d, "gl_drawstring3d",
				6, gl_drawstring3d_fields);
   else if (!strcmp(name, "gl_endmark"))
      return rec_structinate(&gl_endmark, "gl_endmark", 3, gl_mark_fields);
   else if (!strcmp(name, "gl_mark"))
	return rec_structinate(&gl_mark, "gl_mark", 7, gl_mark_fields);
#endif					/* Graphics3D */

   return 0;
}

int create3Dlisthdr(dptr dp, char *strname, word size){
   int draw_code;
   struct descrip funcname, g;	/* do not need to be tended */
   tended struct b_list *func;
  
   /* create a list to save function information */
   Protect(func = alclist(0, size), return RunError);
   dp->dword = D_List;
   dp->vword.bptr = (union block *) func;
   MakeStr(strname, strlen(strname), &funcname);
   c_put(dp, &funcname);
  
   draw_code = si_s2i(redraw3Dnames, strname);
   if (draw_code == -1)
      return RunError;
   MakeInt(draw_code, &g);
   c_put(dp, &g);
   return Succeeded;
}


void getmeshmode(wbp w, char *answer)
{
   switch(w->context->meshmode) {
      case U3D_POINTS: strcpy(answer, "points"); break;
      case U3D_LINES: strcpy(answer, "lines"); break;
      case U3D_LINE_STRIP: strcpy(answer, "linestrip"); break;
      case U3D_LINE_LOOP: strcpy(answer, "lineloop"); break;
      case U3D_TRIANGLES: strcpy(answer, "triangles"); break;
      case U3D_TRIANGLE_FAN: strcpy(answer, "trianglefan"); break;
      case U3D_TRIANGLE_STRIP: strcpy(answer, "trianglestrip"); break;
      case U3D_QUADS: strcpy(answer, "quads"); break;
      case U3D_QUAD_STRIP: strcpy(answer, "quadstrip"); break;
      case U3D_POLYGON: strcpy(answer, "polygon"); break;
   }
}

void gettexmode(wbp w, char *abuf, dptr answer)
{
   wcp wc = w->context;
   switch (wc->texmode) {
      case U3D_REPLACE: strcpy(abuf, "on"); break;
      case U3D_BLEND: strcpy(abuf, "blend"); break;
      case U3D_MODULATE: strcpy(abuf, "modulate"); break;
      case 0: strcpy(abuf, "off"); break;
      default: strcpy(abuf, "unknown texture mode"); break;
      }
   MakeStr(abuf, strlen(abuf), answer);
}


void getatexcoord(double d, char *b)
{
   if ((double)(int)d == d) sprintf(b,"%d",(int)d);
   else sprintf(b,"%.3f",d);
}

/* get the user specified texture coordinates */
int gettexcoords(wbp w, char *buf)
{
   char *s = buf;
   int i;
   wcp wc = w->context;
   getatexcoord(wc->texcoords->a[0], s);

   s += strlen(s);
   for (i = 1; i < wc->numtexcoords; i++) {
      *s++ = ',';
      getatexcoord(wc->texcoords->a[i], s);
      s += strlen(s);
     }
   return Succeeded;
}

int gettexture(wbp w, dptr dp)
{
   wcp wc= w->context;
   wtp wt = wc->display->stex;
   if (wc->curtexture>=0 && wc->curtexture<wc->display->ntextures) {
      *dp = wt->d;
      return Succeeded;
      }
   else
      return Failed;
}

int init_3dcontext(wcp wc)
{
  /* set defaults for attributes */
   wc->eyeupx = wc->eyeupz = 0.0;
   wc->eyeupy = 1.0;
   wc->dim = 3;
   wc->slices = 15;
   wc->rings = 10;
   wc->selectionenabled = 0;
   wc->selectionrendermode=0;
   wc->selectionnamelistsize=256;
   wc->selectionnamecount=0;
   wc->selectionnamelist = malloc(wc->selectionnamelistsize*sizeof(char*));
   if (wc->selectionnamelist == NULL) return Failed;
   wc->app_use_selection3D = 0;

   wc->eyeposx = wc->eyeposy =  wc->eyeposz = wc->eyedirx = wc->eyediry = 0.0;
   wc->eyedirz = -100.0;
   wc->autogen = 1;
   wc->normode = 1;
   wc->normals = NULL;
   wc->texmode = wc->numtexcoords = 0;

   wc->texcoords = NULL; 
   wc->curtexture = -1;
   wc->buffermode = IMMEDIATE3D;
   wc->meshmode = U3D_POLYGON;
   return Succeeded;
}

int copy_3dcontext(wcp wc, wcp rv)
{
  /* set defaults for attributes */
   rv->eyeupx = wc->eyeupx;
   rv->eyeupz = wc->eyeupz;
   rv->eyeupy = wc->eyeupy;
   rv->dim = wc->dim;
   rv->slices = wc->slices;
   rv->rings = wc->rings;
   rv->selectionenabled = wc->selectionenabled;
   rv->selectionrendermode = wc->selectionrendermode;
   rv->selectionnamelistsize = wc->selectionnamelistsize;
   rv->selectionnamecount = wc->selectionnamecount;
   rv->selectionnamelist = wc->selectionnamelist;
   rv->app_use_selection3D = wc->app_use_selection3D;

   rv->eyeposx = wc->eyeposx;
   rv->eyeposy = wc->eyeposy;
   rv->eyeposz = wc->eyeposz;
   rv->eyedirx = wc->eyedirx;
   rv->eyediry = wc->eyediry;
   rv->eyedirz = wc->eyedirz;
   rv->autogen = wc->autogen;
   rv->normode = wc->normode;
   rv->normals = wc->normals;
   rv->texmode = wc->texmode;
   rv->numtexcoords = wc->numtexcoords;

   rv->texcoords = wc->texcoords;
   rv->curtexture = wc->curtexture;
   rv->buffermode = wc->buffermode;
   rv->meshmode = wc->meshmode;
   return Succeeded;
}


/*
 * push matrix and return a descriptor for a corresponding record
 */
int pushmatrix_rd(wbp w, dptr f)
{
   static dptr constr;
   int nfields, draw_code;
   tended struct b_record *rp;

   if (!constr && !(constr = rec_structor3d("gl_pushmatrix")))
      syserr("failed to create opengl record constructor");
   nfields = (int) ((struct b_proc *)BlkLoc(*constr))->nfields;

   makecurrent(w);

   /* push a copy of the top matrix, if possible */
   if (pushmatrix() == 0)
      return 151;

   /*
    * create a record of the graphical object
    */
   Protect(rp = alcrecd(nfields, BlkLoc(*constr)), return -1);
   f->dword = D_Record;
   f->vword.bptr = (union block *)rp;
   MakeStr("PushMatrix", 10 ,&(rp->fields[0]));

   draw_code = si_s2i(redraw3Dnames, "PushMatrix");
   if (draw_code == -1)
       return Failed;
   MakeInt(draw_code, &(rp->fields[1]));

   c_put(&(w->window->funclist), f);
   return 0;
}

/*
 * Calculate the length of the current section, created by WSection().
 */
int section_length(wbp w)
{
   wsp ws = w->window;
   int i, tmp, flag=0;
   C_integer v;
   tended struct descrip flist, save_flist, fname;
   tended struct b_list *funclist;
   tended struct b_list *hp;
   tended struct b_lelem *bp;
   tended struct b_record *rp;
   int used, elements;
   word k;

   hp = BlkD(ws->funclist, List);
   elements = hp->size;
   if (hp->size <= 0)
        return 0;

   bp = Blk(hp->listtail, Lelem);
   used=bp->nused;
   k = bp->first + used-1;
   if (k>=bp->nslots) k = k - bp->nslots;

   for (i=0; i<elements; i++) {
      flist = bp->lslots[k];
      k--;
      used--;
      if (k<0) k=bp->nslots-1;

      if (used<=0) {
  	 bp = (struct b_lelem *) bp->listprev;
	 used = bp->nused;
         k = bp->first + used-1;
         if (k>=bp->nslots) k=k-bp->nslots-1;
      }
      if (is:record(flist)) {
	 rp = BlkD(flist, Record);
         fname = rp->fields[0];
         tmp=si_s2i(redraw3Dnames, StrLoc(fname));

	 if (tmp == -1) {
	    return Failed;
	    }
         if ((tmp & ~0xf)==REDRAW_MARK) {
             if (!cnv:C_integer(rp->fields[4], v)) return Failed;
	     if (v==0) {
		save_flist = flist;
                flag = 1;
                break;
                }
             }
         }
      }

   /* # of elements plus the new element which mark the end of the section */
   if (w->context->selectionenabled) i++;

   if (flag) {  /* count */
      MakeInt(i, &(((struct b_record *) BlkLoc(save_flist))->fields[4]));
      }
   return Succeeded;
}

/*
 * set the dim(ension) attribute
 */
int setdim(wbp w, char* s)
{
   tended struct descrip f;
   tended struct descrip d;
   int dim;

   makecurrent(w);
   /* create a list */
   if (create3Dlisthdr(&f, "dim", 4)!=Succeeded)
     return RunError;
   
   dim = atoi(s);
   /* must be a value between 1 and 4 */
   if (dim < 1 || dim > 4)
      return RunError;
   w->context->dim = dim;

   /* put the value of dim on the list of functions */
   MakeInt(dim, &d);
   c_put(&f, &d);
   c_put(&(w->window->funclist), &f);
   return Succeeded;
}


/* set the eye attribute */
/* this set the eyeup, eyedir, and the eyepos attributes */
int seteye(wbp w, char *s)
{
   wcp wc = w->context;

   if (sscanf(s, " %lf , %lf , %lf , %lf , %lf , %lf , %lf , %lf , %lf ",
	      &(wc->eyeposx), &(wc->eyeposy), &(wc->eyeposz),
	      &(wc->eyedirx), &(wc->eyediry), &(wc->eyedirz),
	      &(wc->eyeupx),  &(wc->eyeupy),  &(wc->eyeupz)) != 9) {
      return RunError;
      }

   if (redraw3D(w) == Failed)
      return Failed;
   return Succeeded;
}

/* sets the eyedir attribute */
int seteyedir(wbp w, char *s)
{
   char *s2 = s;
   wcp wc = w->context;

   while (isspace(*s2)) s2++;
   /* find the x-coordinate of eyedir */
   if (!isdigit(*s2) && (*s2 != '-') &&(*s2 != '.')) return RunError;
   wc->eyedirx = atof(s2);

   if (*s2 == '-') s2++;
   while (isdigit(*s2)) s2++;
   if (*s2 == '.') {
      s2++;
      while (isdigit(*s2)) s2++;
      }
   /* find the y-coordinate */
   if (*s2++ != ',') return RunError;
   if (!isdigit(*s2) && (*s2 != '-') &&(*s2 != '.')) return RunError;
   wc->eyediry= atof(s2);

   if (*s2 == '-') s2++;
   while (isdigit(*s2)) s2++;
   if (*s2 == '.') {
      s2++;
      while (isdigit(*s2)) s2++;
      }
   /* find the z-coordinate */
   if (*s2++ != ',') return RunError;
   if (!isdigit(*s2) && (*s2 != '-') &&(*s2 != '.')) return RunError;
   wc->eyedirz = atof(s2);

   if (*s2 == '-') s2++;
   while (isdigit(*s2)) s2++;
   if (*s2 == '.') {
      s2++;
      while (isdigit(*s2)) s2++;
      }
   /* if there are more entries return an error */
   if (*s2) return RunError;
   redraw3D(w);
   return Succeeded;
}

/* set the eyepos attribute */
int seteyepos(wbp w, char *s)
{
   char *s2 =s;
   wcp wc = w->context;

   /* parse string */
   while (isspace(*s2)) s2++;

   /* get the x-coordinate of eyepos */
   if (!isdigit(*s2) && (*s2 != '-') &&(*s2 != '.'))
      return RunError;
   wc->eyeposx = atof(s2);

   if (*s2 == '-') s2++;
   while (isdigit(*s2)) s2++;
   if (*s2 == '.') {
      s2++;
      while (isdigit(*s2)) s2++;
      }
   /* get the y-coordinate of eyepos */
   if (*s2++ != ',') return RunError;
   if (!isdigit(*s2) && (*s2 != '-') &&(*s2 != '.')) return RunError;
   wc->eyeposy = atof(s2);

   if (*s2 == '-') s2++;
   while (isdigit(*s2)) s2++;
   if (*s2 == '.') {
      s2++;
      while (isdigit(*s2)) s2++;
      }
   /* get the z-coordinate of eyepos */
   if (*s2++ != ',') return RunError;
   if (!isdigit(*s2) && (*s2 != '-') &&(*s2 != '.')) return RunError;
   wc->eyeposz = atof(s2);

   if (*s2 == '-') s2++;
   while (isdigit(*s2)) s2++;
   if (*s2 == '.') {
      s2++;
      while (isdigit(*s2)) s2++;
      }
   if (*s2) return RunError;

   redraw3D(w);
   return Succeeded;
}


/* sets the eyeup attribute */
int seteyeup(wbp w, char *s)
{
   char *s2 = s;
   wcp wc = w->context;

   while (isspace(*s2)) s2++;

   /* set the x-coordinate of eyeyp */
   if (!isdigit(*s2) && (*s2 != '-') &&(*s2 != '.'))
      return RunError;
   wc->eyeupx = atof(s2);

   if (*s2 == '-') s2++;
   while (isdigit(*s2)) s2++;
   if (*s2 == '.') {
      s2++;
      while (isdigit(*s2)) s2++;
      }
   /* set the y-coordinate of eyeup */
   if (*s2++ != ',') return RunError;
   if (!isdigit(*s2) && (*s2 != '-') &&(*s2 != '.'))
      return RunError;
   wc->eyeupy= atof(s2);

   if (*s2 == '-') s2++;
   while (isdigit(*s2)) s2++;
   if (*s2 == '.') {
      s2++;
      while (isdigit(*s2)) s2++;
      }

   /* set the z-coordinate of eyeup */
   if (*s2++ != ',') return RunError;
   if (!isdigit(*s2) && (*s2 != '-') &&(*s2 != '.'))
      return RunError;
   wc->eyeupz = atof(s2);

   if (*s2 == '-') s2++;
   while (isdigit(*s2)) s2++;
   if (*s2 == '.') {
      s2++;
      while (isdigit(*s2)) s2++;
      }
   if (*s2) return RunError;
   redraw3D(w);
   return Succeeded;
}

/* set the fovangle attribute */
int setfov(wbp w, char* s)
{
   tended struct descrip f;
   tended struct descrip val;
   double fov;
   wcp wc = w->context;
   
   makecurrent(w);
   /* create a list */
   if (create3Dlisthdr(&f, "fov", 4)!=Succeeded)
     return RunError;
   
   fov = atof(s);
#ifdef DescriptorDouble
   val.vword.realval = fov;
#else					/* DescriptorDouble */
   BlkLoc(val) = (union block *)alcreal(fov);
#endif					/* DescriptorDouble */
   val.dword = D_Real;
   c_put(&f, &val);
   wc->fov = fov;
   
   c_put(&(w->window->funclist), &f);
   return Succeeded;
}


/* set the normal mode, on, off or auto */
int setnormode(wbp w, char* s)
{
   tended struct descrip f;
   tended struct b_list *func;
   tended struct descrip mode;
   wcp wc = w->context;
   
   makecurrent(w);
   /* create a list */
   if (create3Dlisthdr(&f, "normode", 4)!=Succeeded)
     return RunError;
   
   if (!strcmp("on", s))
      wc->normode = 2;
   else if (!strcmp("auto", s))
      wc->normode = 1;
   /* turn normals off */
   else if (!strcmp("off", s))
      wc->normode = 0;
   /* not a valid normals mode so generate an error */
   else
      return RunError;
   
   MakeInt(wc->normode, &mode);
   c_put(&f, &mode);
   c_put(&(w->window->funclist), &f);
   return Succeeded;
}

/* set the rings attribute */
int setrings(wbp w, char* s)
{
   tended struct descrip f;
   tended struct descrip val;
   int rings;
   wcp wc = w->context;
   
   makecurrent(w);
   /* create a list */
   if (create3Dlisthdr(&f, "rings", 4)!=Succeeded)
     return RunError;
   
   rings = atoi(s);
   /* must be positive integer */
   if (rings<=0) return RunError;
   MakeInt(rings, &val);
   c_put(&f, &val);   
   wc->rings = rings;
   
   c_put(&(w->window->funclist), &f);
   return Succeeded;
}

/* set the slices attribute */
int setslices(wbp w, char* s)
{
   tended struct descrip f;
   tended struct descrip val;
   int slices;
   wcp wc = w->context;
   
   makecurrent(w);
   /* create a list */
   if (create3Dlisthdr(&f, "slices", 4) != Succeeded)
     return RunError;
   
   slices = atoi(s);
   /* must be positive integer */   
   if (slices <= 0) return RunError;
   MakeInt(slices, &val);
   c_put(&f, &val);   
   wc->slices = slices;
   
   c_put(&(w->window->funclist), &f);
   return Succeeded;
}

/*
 * Set the texture mode. Originally either on or off, now "on" can be
 * "blend" or "modulate", besides the default "replace".
 */
int settexmode(wbp w, char* s)
{
   tended struct descrip f;
   tended struct descrip mode;
   wcp wc = w->context;
   int oldtexmode = wc->texmode;

   makecurrent(w);
    /* create a list */
    if (create3Dlisthdr(&f, "texmode", 4)!=Succeeded)
      return RunError;

   /*
    * turn textures on in replace, blend, or modulate (default mode = replace)
    */
   if (!strcmp("on", s) || !strcmp("replace", s)) {
      wc->texmode = U3D_REPLACE;
      }
   else if (!strcmp("blend", s)) {
      wc->texmode = U3D_BLEND;
      }
   else if (!strcmp("modulate", s)) {
      wc->texmode = U3D_MODULATE;
      }
   /* turn texture off */
   else if (!strcmp("off", s)) {
      wc->texmode = 0;
     }
   /* not a valid texture mode so generate an error */
   else
      return RunError;

   if (((oldtexmode == 0) && (wc->texmode != 0)) ||
       ((oldtexmode != 0) && (wc->texmode == 0)))
      apply_texmodechange(w);

   MakeInt(wc->texmode, &mode);
   c_put(&f, &mode);
   c_put(&(w->window->funclist), &f);
   return Succeeded;
}

/*
 * Enable/disable automatic texture generation.
 */
int setautogen(wbp w, int i)
{
   w->context->autogen = i;
   return Succeeded;
}

/* set a texture */
int settexture(wbp w, char* str, int len, struct descrip *f, int curtex,
	       int is_init)
{
   wcp wc = w->context;
   char* s;
   int nfields, draw_code;
   tended struct descrip d;
   tended struct b_record *rp;
   static dptr constr;
   int wt_index;
   int ttype;

   makecurrent(w);

   if (!is_init){
      if (!constr &&  !(constr = rec_structor3d("gl_texture")))
      	 syserr("failed to create opengl record constructor");
   	 nfields = (int) ((struct b_proc *)BlkLoc(*constr))->nfields;

   	 /*
    	  * create a record of the graphical object and its parameters
    	  */
      if (!(rp = alcrecd(nfields, BlkLoc(*constr))))
      	 return Failed;
     (*f).dword = D_Record;
     (*f).vword.bptr = (union block *)rp;
     MakeStr("Texture", 7, &(rp->fields[0]));

     draw_code = si_s2i(redraw3Dnames, "Texture");
     if (draw_code == -1)
       return Failed;
     MakeInt(draw_code, &(rp->fields[1]));

     Protect(BlkLoc(rp->fields[3]) =
	      (union block *)alcfile((FILE *)w, Fs_Window|Fs_Read|Fs_Write
		      | (w->context->is_3D?Fs_Window3D:0)	
		      , &emptystr), return Failed);

     rp->fields[3].dword = D_File;
     }
   else
      rp = BlkD(*f, Record);

   s=str;
   while(isspace(*s)) s++;
   while(isdigit(*s)) s++;
   while(isspace(*s)) s++;
   if (*s == ',')  /* must be an image string */
      ttype = 3;
   else	{	  /* it is a file name */
      ttype = 1;
      }

   wt_index = lookup_texture_byname(w, str, len, ttype, curtex);
   if (wt_index == Failed) return Failed;

   /*
    * To redraw the window we must keep track of the "texture name" assigned
    * to it by opengl. This name is stored in wc->stex[wc->ntextures].texName.
    * So by remembering wc->ntextures we can recover the name of the texture.
    */
   MakeInt(wc->curtexture, &(rp->fields[2]));

   c_put(&(w->window->funclist), f);

   return Succeeded;
}

/* 
 * Create an empty list for function calls for a 3D window
 */
int create_display_list(wbp w, int size)
{
   if ((w->window->funclist.vword.bptr = (union block *)alclist(0, size)) == NULL)
      return Failed;

   w->window->funclist.dword = D_List;

   return Succeeded;
}
#endif					/* Graphics3D */
