###############################################################################
#       File:   funclookup.icn
#
#       Subject: look up known functions
#
#       Author: Serendel Macphereson, Shea Newton, Clint Jeffery
#
#       Date:   Febuarary 25, 2015
#
##############################################################################
#
#  This program loads a table with names of built-in functions, collects
#  the word under the cursor, looks for it in the table and preforms a
#  jump to the function definition in UTR8 if a match, otherwise looks in a
#  table of user-defined functions generated from the ClassBroswer tree.
#  If that matches, it jumps to the line number saved in the table.
#
#  Currently only accessed through right-clicking in the editbox of the IDE
#
#   result from--> ide.icn buffertextlist.icn
#
###############################################################################
#  Links: ide.icn buffertextlist.icn
###############################################################################
import lang
import util
import gui

$include "guih.icn"

class known_funcs (built_ins, usr_func_table, reserved_words, keywords)

   method load_BInames()
      local f, func_name
      built_ins :=  set( [
         "abs","acos","any","args","asin","atan","atanh",
         "bal",
         "center","channel","char","chdir","chmod","classname",
            "close","cofail","collect","condvar","constructor",
            "copy","cos","cset","ctime",
         "dbcolumns","dbdriver","dbkeys","dblimits","dbproduct","dbtables",
            "delay","delete","detab","display","dtor",
         "entab","errorclear","eventmask",
            "EvGet","EvSend","exit","exp",
         "fetch","fieldnames","find","flock","flush","function",
         "get","getch","getche","getenv","gettimeofday","globalnames","gtime",
         "iand","icom","image","insert","integer",
            "ior","ishift","istate","ixor",
         "kbhit","key","keyword",
         "left","list","load","loadfunc","localnames","lock","log",
         "many","map","match","max","member","membernames","methodnames",
            "methods","min","mkdir","move","mutex",
         "name","numeric",
         "open","opmask","oprec","ord",
         "paramnames","parent","pipe","pop","pos","proc","pull","push","put",
         "read","reads","ready","real","receive","remove","rename","repl",
            "reverse","right","rmdir","rtod","runerr",
         "seek","select","send","seq","serial","set","setenv",
            "signal","sin","sort","sortf","spawn","sql","sqrt",
            "stat","staticnames","stop","string","system",
         "tab","table","tan","trap","trim","truncate","trylock","type",
         "unlock","upto","utime",
         "variable",
         "wait","where","write","writes",
         "Active","Alert",
         "Bg",
         "Clip","Clone","Color","ColorValue","CopyArea","Couple",
         "DrawArc","DrawCircle","DrawCube","DrawCurve","DrawCylinder",
            "DrawDisk","DrawImage","DrawLine","DrawPoint","DrawPolygon",
            "DrawRectangle","DrawSegment","DrawSphere","DrawString","DrawTorus",
         "EraseArea","Event",
         "Fg","FillArc","FillCircle","FillPolygon","FillRectangle",
            "Font","FreeColor",
         "GotoRC","GotoXY",
         "IdentityMatrix",
         "Lower",
         "MatrixMode","MultMatrix",
         "NewColor",
         "PaletteChars","PaletteColor","PaletteKey","Pattern","Pending",
            "Pixel","PopMatrix","PushMatrix",
            "PushRotate","PushScale","PushTranslate",
         "QueryPointer",
         "Raise","ReadImage","Refresh", "Rotate",
         "Scale",
         "Texcoord","TextWidth","Texture","Translate",
         "Uncouple",
         "WAttrib","WDefault","WFlush","WindowContents",
            "WriteImage","WSection","WSync",
         "Abort","Any","Arb","Arbno",
         "Bal","Break","Breakx",
         "Fail","Fence",
         "Len",
         "NotAny","Nspan",
         "Pos",
         "Rem","Rpos","Rtab",
         "Span","Succeed",
         "Tab",
         "chown","chroot","crypt",
         "exec",
         "fcntl","fdup","filepair","fork",
         "getegid","geteuid","getgid","getgr","gethost",
            "getpgrp","getpid","getppid","getpw","getserv","getuid",
         "hardlink",
         "kill",
         "readlink",
         "setgid","setgrent","sethostent","setpgrp","setpwent",
            "setservent","setuid","symlink","sys_errstr",
         "umask",
         "wait",
         "WinButton","WinColorDialog","WinEditRegion","WinFontDialog",
            "WinMenuBar","WinOpenDialog","WinPlayMedia","WinSaveDialog",
            "WinScrollBar","WinSelectDialog"])
   end

   method load_reserved_words()
      reserved_words := table(
         "abstract", "declare unimplemented method",
         "break", "exits the enclosing loop",
         "by", "specifies the increment used in generating i to j",
         "case", "selects code from alternative values",
         "class", "declares a new object type",
         "create", "constructs an independent co-expression context",
         "critical", "declares a non-concurrent code block",
         "default", "indicates a branch of code to execute",
         "do", "identifies the body of a loop",
         "else", "specifies what to do if a then-part is not executed",
         "end", "indicates the end of a procedure, method, or class",
         "every", "requires all the elements from a generator",
         "fail", "exits the procedure immediately with no return value",
         "global", "declares variables visible throughout the program",
         "if", "executes some code only when an expression succeeds",
         "import", "introduces symbols defined in a package",
         "initial", "gives an expression that executes only on the first call",
         "initially", "executes code each time a class instance is created",
         "invocable", "declares procedures that may be called indirectly",
         "link", "declares library modules that may be used in this program",
         "local", "declares variables used within a procedure or method call",
         "method", "declares a block of code that operates on class instances",
         "next", "executes the next iteration of a loop",
         "not", "succeeds if the following expression fails",
         "of", "identifies the body of a case expression",
         "package", "declares this module to be a member of the named package",
         "procedure", "declares a block of code that may be called by name",
         "record", "declares a new type with fields accessed by name",
         "repeat", "declares a loop that will execute any number of times",
         "return", "exits the procedure immediately, with a return value",
         "static", "declares variables that retain values across calls",
         "suspend", "produces a value to the caller, allowing resumption",
         "then", "identifies the conditional part of an if expression",
         "thread", "executes an expression concurrently",
         "to", "generates incremental values between a start and an end",
         "until", "gives an expression that allows a loop to terminate",
         "while", "gives an expression that allows a loop to continue"
         )
   end

   method load_keywords()
      keywords := table(
         "&allocated", "produces the space used in the storage regions",
         "&ascii", "is a cset consisting of the 128 ASCII characters",
         "&clock", "is a string consisting of the current time of day",
         "&col", "is the mouse horizontal position, in text columns",
         "&collections", "is the number of garbage collections",
         "&column", "is the source column number of the execution point",
         "&control", "succeeds if the control key was pressed last event",
         "&cset", "is a cset consisting of all the 256 characters",
         "&current", "is the current active co-expression",
         "&date", "is the current date",
         "&dateline", "is the current date and time",
         "&digits", "is a cset consisting of the decimal digits",
         "&dump", "is a variable that controls termination dump",
         "&e", "is the base of the natural logarithms",
         "&errno", "contains an error number from a previous system call",
         "&error", "is a variable that enables/disables error conversion",
         "&errornumber", "is the error number of last error converted to failure",
         "&errortext", "is the error message of the last error converted to failure",
         "&errorvalue", "is the erroneous value of the last error converted to failure",
         "&errout", "is the standard error output file",
         "&eventcode", "indicates the most recent event in a monitored program",
         "&eventsource", "gives the source of events in a monitor program",
         "&eventvalue", "is the value associated with the most recent event in a monitored program",
         "&fail", "is an expression that fails",
         "&features", "generates strings identifying features in this implementation",
         "&file", "is the name of the source file at the execution point",
         "&host", "identifies the host computer",
         "&input", "is the standard input file",
         "&interval", "gives the milliseconds since the previous event",
         "&lcase", "is a cset consisting of the 26 lower case letters",
         "&ldrag", "is the integer code for a left drag event",
         "&letters", "is a cset consisting of the 52 upper and lower case letters",
         "&level", "is the depth (from main) of the current call",
         "&line", "is the source line number of the execution point",
         "&lpress", "is the integer code for a left press event",
         "&lrelease", "is the integer code for a left release event",
         "&main", "is the main co-expression",
         "&mdrag", "is the integer code for a middle-button drag event",
         "&meta", "succeeds if the meta/alt key was pressed last input event",
         "&mpress", "is the integer code for a middle-button press event",
         "&mrelease", "is the integer code for a middle-button release event",
         "&now", "is the current system time",
         "&null", "is a null value",
         "&output", "is the standard output file",
         "&phi", "is the golden ratio, 1.618...",
         "&pi", "is pi, 3.1415...",
         "&pick", "contains the result of 3D selection",
         "&pos", "is the index position at which the subject is being scanned",
         "&progname", "contains the program name",
         "&random", "is a variable that contains the current seed for random operations",
         "&rdrag", "is the integer code for a right-button drag event",
         "&regions", "generates the regions' sizes",
         "&resize", "is the integer code for a window resize event",
         "&row", "is the mouse vertical position in text rows",
         "&rpress", "is the integer code for a right-button press event",
         "&rrelease", "is the integer code for a right-button release event",
         "&shift", "succeeds if the shift key was pressed at the last input event",
         "&source", "is the co-expression that invoked the current co-expression",
         "&storage", "generates the amount of storaged used for each region",
         "&subject", "is the string being scanned",
         "&time", "is the elapsed execution time in milliseconds",
         "&trace", "is an integer specifying how many calls to trace",
         "&ucase", "is a cset containing the 26 upper case letters",
         "&version", "is the current unicon version",
         "&window", "is the default graphics window",
         "&x", "is the mouse x position at the time of the last input event",
         "&y", "is the mouse y position at the time of the last input event",
         )
   end

   method open_reference(func_name)
      #load up remote or local utr8 documentation for built-ins
      uidlog.menubar.handle_help("doc/book/utr8.html#"||func_name,
                                 "http://unicon.org/utr/utr8.html#"||func_name)
   end

   method usr_funcs(usr_func_name)
      #change cursor position to be at the function name (jump to line)
      uidlog.FileBrowser.goto(usr_func_table[usr_func_name])
   end

   # on init: every t:= 0 to *N.subnodes do
   # treeRecursion(N.subnodes[t])
   # in tree recursion populate the table
   method treeRecursion(N)
      local t
      every t := 0 to *N.subnodes do {
         treeRecursion(N.subnodes[t])
         }
      if not (N.label[-4:0] == ".icn") then {
         if not member(usr_func_table, N.label) then
            insert(usr_func_table,N.label, N.lineno)
         }
   end

   # Check user-defined and built in functions for the word under the cursor
   # note the following revised return value interface:
   # return value of 1 === built-in function
   # return value of 2 === user-defined procedure
   # return value of list === ["reserved word", "description"] OR
   # return value of list === ["keyword", "description"] OR
   # return value of -1 === unknown
   method func_lookup(var_tocheck)
      local N

# write("var_tocheck ", image(var_tocheck))

      #go through the known user functions in ClassBrowser and
      #load them, if not present, into a table with their line numbers
      N := uidlog.FileBrowser.get_root_node()
      treeRecursion(N.subnodes[1])

      if member(built_ins, var_tocheck) then #if it's a built in
         return 1 #open_reference(var_tocheck)
      else if member(usr_func_table, var_tocheck) then #if it's user defined
         return 2 #usr_funcs(var_tocheck)
      else if member(reserved_words, var_tocheck) then #if it's a reserved word
         return ["reserved word", reserved_words[var_tocheck]]
      else if member(keywords, var_tocheck) then #if it's a keyword
         return ["keyword", keywords[var_tocheck]]
      else return -1
   end

   #collect the word under the cursor in the main UI editbox
   # TODO: use actual lexical rules of Unicon to identify the "word"
   method word_under_cursor()
      local x, line, the_word, end_of_word, non_whitespace, editBuffer

      editBuffer := ide.CurrentEditBox().get_contents()
      line := editBuffer[ide.CurrentEditBox().cursor_y] | []
      x := ide.CurrentEditBox().cursor_x | []
      non_whitespace := &cset -- ' \t(.'

      if any(non_whitespace,line,x) then {
         while x > 1 & any(non_whitespace,line,x-1) do x -:= 1
         end_of_word := many(non_whitespace,line,x)
         the_word := line[x:end_of_word]
         #look it up in the table of known functions
         #func_lookup(the_word)
         return the_word
         }
      else return -1    #not a word
   end

initially
   usr_func_table := table()
   load_reserved_words()
   load_keywords()
end

